colorscheme desertex

add-highlighter global/line-numbers number-lines -hlcursor
add-highlighter global/list-chars show-whitespaces \
  -tab '»' -tabpad '·' -nbsp '•' -spc ' ' -lf ' '

add-highlighter global/overlong-line dynregex \
  '^[^\n]{%opt{autowrap_column}}([^\n]+)' 1:Error

# keep tabstop synced with indentwidth
hook global WinSetOption indentwidth=.* \
  %{ set-option buffer tabstop %opt{indentwidth} }
# default to 2-space indentation everywhere (override in individual filetypes)
set-option global indentwidth 2

# default `%opt{path}` includes `/usr/include`, which only makes sense for C/C++
# also moves `%/` in front of `./` (though I'm not sure it matters)
set-option global path %/ ./

# TODO: organize this better: full plugin? / autoload/ ?
define-command vim-star -docstring %{
  Make `*` in Kakoune work more like `*` in Vim.
  If there is only one selection
  ... and it is only one character
  ... then select the current word before running `*`.
} %{
  try %{
    execute-keys -draft '<a-space>'
  } catch %{
    try %{
      execute-keys -draft '<a-K>..<ret>'
      execute-keys '<a-i>w'
    }
  }
  execute-keys -save-regs '' '*'
}
map global normal '*' ': vim-star<ret>'

alias global h doc

## plug.kak plugins

declare-option -docstring 'Install plugins in ~/.local/kak by default' \
  str localkak %sh{echo "$HOME/.local/kak"}

source "%opt{localkak}/plugins/plug.kak/rc/plug.kak"
plug "andreyorst/plug.kak" noload
try %{ set-option global plug_install_dir "%opt{localkak}/plugins" }

plug "andreyorst/fzf.kak" defer 'fzf' %{
  map global normal <c-p> ': fzf-file<ret>' -docstring 'fzf = <Ctrl+p>'
  map global user b ': fzf-buffer<ret>' -docstring 'fzf buffer selection'
  map global user F ': fzf-mode<ret>' -docstring 'FZF mode'
  set-option global fzf_file_command 'rg'
}
try %{ require-module fzf } catch %{ echo -markup '{Error}fzf not installed' }

plug "benizi/toggle-highlighter.kak" config %{
  map -docstring 'toggle line numbers' global user N \
    ': toggle-highlighter global/line-numbers number-lines -hlcursor<ret>'
  map -docstring 'toggle line wrapping' global user w \
    ': toggle-highlighter buffer/wrap wrap<ret>'
  define-command toggle-overlong-lines %{
    toggle-highlighter global/overlong-line dynregex \
      '^[^\n]{%opt{autowrap_column}}([^\n]+)' 1:Error
  }
  map -docstring 'toggle overlong line Errors' global user E \
    ': toggle-overlong-lines<ret>'
}

map -docstring 'insert case-insensitive flag for searching by default' global normal / '/(?i)'

hook global ModuleLoaded x11 %{
  set-option global termcmd 'term -e sh -c'
}

set-option global grepcmd 'rg --hidden --column'

hook global BufOpenFile .* 'git show-diff'
hook global WinCreate .* 'git show-diff'
hook global BufWritePost .* 'git update-diff'
hook global BufReload .* 'git update-diff'
hook global ModeChange insert:normal 'git update-diff'

map global user 'd' ': git diff %reg{%}<ret>' -docstring 'git diff current file'
map global user 'u' ': git update-diff<ret>' -docstring 'update git markers'

eval %sh{kak-lsp --kakoune -s $kak_session}
# lsp-enable # TODO: enable per-filetype?

hook global WinSetOption filetype=elixir %{
  set-option buffer autowrap_column 98
}

hook global WinSetOption filetype=java %{
  set-option buffer autowrap_column 120
  set-option buffer indentwidth 4
}

hook global WinSetOption filetype=git-commit %{
  set-option buffer comment_line ';'
  set-option buffer autowrap_column 72
  autowrap-enable

  # first non-{comment/empty} line ("summary" line) should stay under 50 chars
  add-highlighter buffer/summary-line dynregex \
    '\A(?:(?:%opt{comment_line}[^\n]*)?\n)*(?:(?<=\n)|\A)(?!%opt{comment_line})[^\n]{50}([^\n]+)' \
    1:Error

  # first line after summary line, excepting comment lines, needs to be blank
  add-highlighter buffer/space-between dynregex \
    '\A(?:(?:%opt{comment_line}[^\n]*)?\n)*(?:(?<=\n)|\A)(?!%opt{comment_line})[^\n]+\n(?:%opt{comment_line}[^\n]*\n)*(?!%opt{comment_line})([^\n]+)' \
    1:Error
}

# SuperTab: <Tab> with only whitespace preceding? indent ; otherwise, completion
hook global InsertChar '\t' %{
  try %{
    execute-keys -draft <a-h><a-K>\S<ret>
    execute-keys -draft h@
  } catch %{
    execute-keys -draft hd<c-n>
  }
}

# TODO: <Backspace> -> delete indentwidth characters

# Navigate completion menu with <Tab>/<Shift+Tab>
# https://www.reddit.com/r/kakoune/comments/8jllac/how_can_i_navigate_the_completion_menu_with_tab/dz0k94e/
hook global InsertCompletionShow .* %{
  try %{
    exec -draft 'h<a-K>\h<ret>'
    map window insert <s-tab> <c-p>
    map window insert <tab> <c-n>
  }
}
hook global InsertCompletionHide .* %{
  unmap window insert <tab> <c-n>
  unmap window insert <s-tab> <c-p>
}
