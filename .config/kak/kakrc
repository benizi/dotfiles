colorscheme desertex

define-command debug-hooks %{
  hook -group kak-debug global BufCreate .* %{echo -debug BufCreate[ %val{buffile} ]}
  hook -group kak-debug global BufOpenFile .* %{echo -debug BufOpenFile[ %val{buffile} (lines: %val{buf_line_count}) ]}

  hook -group kak-debug global BufSetOption filetype=(.*) %{echo -debug BufSetOption[ %val{buffile} %val{hook_param} %val{hook_param_capture_1} ]}
  hook -group kak-debug global WinSetOption filetype=(.*) %{echo -debug WinSetOption[ %val{buffile} %val{hook_param} %val{hook_param_capture_1} ]}
}

map -docstring 'Ctrl+Tab = insert literal Tab' \
  global insert <c-tab> '<a-;>\\i<tab><esc>'
map -docstring 'Ctrl+t = insert literal Tab' \
  global insert <c-t> '<a-;>\\i<tab><esc>'

define-command -docstring %{
  Set up standard per-buffer highlighters
} add-standard-highlighters %{ try %{
  add-highlighter buffer/line-numbers number-lines -hlcursor
  add-highlighter buffer/list-chars show-whitespaces \
    -tab '»' -tabpad '·' -nbsp '•' -spc ' ' -lf ' '

  add-highlighter buffer/overlong-line dynregex \
    '^[^\n]{%opt{autowrap_column}}([^\n]+)' 1:Error

  add-highlighter buffer/trailing-whitespace regex '(\h+)$' 1:whitespace_error
  set-face global whitespace_error Error
} }

hook -group add-highlighters global BufCreate .* add-standard-highlighters

define-command -docstring %{
  Delete the current buffer if:
  - This is the only client that has it open
  Quit the current client unless, either:
  - It's the only client
  - The buffer (which may have just been deleted) had no filetype
} delete-buffer-and-quit %{
  declare-option str-list client_buffer_list
  set-option global client_buffer_list

  evaluate-commands %sh{
    set -- 'evaluate-commands -client %s %%{'
    set -- "$1 set-option -add global client_buffer_list %%val{bufname}"
    set -- "$1 } ; "
    eval "set -- \"\$@\" $kak_quoted_client_list"
    printf "$@"
  }

  execute-keys %sh{
    eval "this=$kak_quoted_bufname"
    eval "set -- $kak_quoted_opt_client_buffer_list"

    seen=
    for buf
    do
      # printf '|| buf (%s) = this (%s) ' "$buf" "$this"
      case "$buf" in
        ("$this") seen=x$seen ;;
      esac
    done

    case "$seen/$kak_client_list" in
      (x/*' '*) set -- db ;;
      (*' '*) set -- ;;
      (*) set -- db ;;
    esac

    case "$kak_client/$kak_opt_filetype/$kak_client_list" in
      (*//*|client0/*) : ;;
      (*/*/*' '*) set -- "$@" quit ;;
    esac

    test $# -eq 0 || printf ': %s<ret>' "$@"
  }
}

map global normal <a-w> ': delete-buffer-and-quit<ret>'
map global normal <a-t> ': tmux-terminal-window kak -c %val{session}<ret>'

declare-user-mode windowing
map global normal <c-w> ': enter-user-mode windowing<ret>'
map global windowing v ': new<ret>'

# keep tabstop synced with indentwidth
hook global BufSetOption indentwidth=.* \
  %{ set-option buffer tabstop %opt{indentwidth} }
# default to 2-space indentation everywhere (override in individual filetypes)
set-option global indentwidth 2

# default `%opt{path}` includes `/usr/include`, which only makes sense for C/C++
# also moves `%/` in front of `./` (though I'm not sure it matters)
set-option global path %/ ./

define-command vnew -params .. -command-completion -docstring %{
  vnew [<command>]: like `terminal`, but split into two vertical panes
  Tries `tmux` first
} %{
  tmux-terminal-horizontal kak -c %val{session} -e "%arg{@}"
}

# TODO: organize this better: full plugin? / autoload/ ?
define-command vim-star -docstring %{
  Make `*` in Kakoune work more like `*` in Vim.
  If there is only one selection
  ... and it is only one character
  ... then select the current word before running `*`.
} %{
  try %{
    execute-keys -draft '<a-space>'
  } catch %{
    try %{
      execute-keys -draft '<a-K>..<ret>'
      execute-keys '<a-i>w'
    }
  }
  execute-keys -save-regs '' '*'
}
map global normal '*' ': vim-star<ret>'

define-command vim -docstring 'open in vim' 'terminal vim %reg{%}'

define-command pwd %{ echo %sh{pwd} }

define-command sh -docstring 'open a new terminal' %{
  nop %sh{ setsid term < /dev/null > /dev/null 2> /dev/null & }
}

alias global h doc

## plug.kak plugins

declare-option -docstring 'Install plugins in ~/.local/kak by default' \
  str localkak %sh{echo "$HOME/.local/kak"}

source "%opt{localkak}/plugins/plug.kak/rc/plug.kak"
plug "andreyorst/plug.kak" noload
try %{ set-option global plug_install_dir "%opt{localkak}/plugins" }

plug "andreyorst/fzf.kak" defer 'fzf' %{
  map global normal <c-p> ': fzf-file<ret>' -docstring 'fzf = <Ctrl+p>'
  map global user b ': fzf-buffer<ret>' -docstring 'fzf buffer selection'
  map global user F ': fzf-mode<ret>' -docstring 'FZF mode'
  set-option global fzf_file_command 'rg'

  set-option global fzf_window_map 'ctrl-t'
  set-option global fzf_horizontal_map 'ctrl-v'
  set-option global fzf_vertical_map 'ctrl-w'

  define-command -override -docstring %{
    Open a file with `fzf` starting from the current file's directory
  } fzf-file-from -params 1 %{
    set-option window fzf_file_command %sh{
      echo "rg -L --files '$1'"
    }
    try %{ fzf-file }
    try %{ unset-option window fzf_file_command }
  }
  map -docstring 'fzf find file starting from current' \
    global user n ': fzf-file-from %sh{dirname "$kak_bufname"}<ret>'
}
try %{ require-module fzf } catch %{ echo -markup '{Error}fzf not installed' }

map -docstring %{edit from current file's directory} \
  global user e %sh{ printf ':e %s/' "$(dirname "$kak_bufname")" }

plug "benizi/toggle-highlighter.kak" config %{
  map -docstring 'toggle line numbers' global user N \
    ': toggle-highlighter buffer/line-numbers number-lines -hlcursor<ret>'
  map -docstring 'toggle line wrapping' global user w \
    ': toggle-highlighter buffer/wrap wrap<ret>'
  define-command toggle-overlong-lines %{
    toggle-highlighter buffer/overlong-line dynregex \
      '^[^\n]{%opt{autowrap_column}}([^\n]+)' 1:Error
  }
  map -docstring 'toggle overlong line Errors' global user E \
    ': toggle-overlong-lines<ret>'
  map -docstring 'toggle whitespace markers' global user W %{
    : toggle-highlighter buffer/list-chars show-whitespaces \
      -tab '»' -tabpad '·' -nbsp '•' -spc ' ' -lf ' '<ret>
  }
}

plug "Delapouite/kakoune-palette"

plug "benizi/jellybeans.kak" branch "wip" config %{
  require-module jellybeans
} defer 'jellybeans' %{
  jellybeans-theme
}


define-command copycode -params 0..1 %{
  execute-keys -draft %sh{
    if test $# -gt 0
    then ft=$1
    else ft=$kak_opt_filetype
    fi
    printf '<a-|>sed -e "1i\\```%s" -e "$a\\```" | pbcopy<ret>' \
      "$ft" | tr '"' "'"
  }
}

define-command suggest %{ copycode suggestion }

define-command -docstring 'Set buffer filetype' -params 1 setf %{
  set buffer filetype %arg{1}
}

hook global ModuleLoaded x11 %{
  set-option global termcmd 'term -e sh -c'
}

# No `--hidden` for `rg` for use with `:grep` by default
set-option global grepcmd 'rg --column'

declare-option -docstring 'Whether git detection has been attempted' \
  bool git_setup false
declare-option -docstring 'Whether buffer is in a git repo' \
  bool git_found false
declare-option -docstring 'Root of git work tree' \
  str git_worktree ''
declare-option -docstring 'Git directory' \
  str git_dir ''
declare-option -docstring 'Git "common" directory' \
  str git_common_dir ''

define-command git-find-repo %{
  try %{
    evaluate-commands -no-hooks %sh{
      if $kak_opt_git_setup
      then echo fail already attempted git setup
      fi
    }
    try %{
      set-option buffer git_dir %sh{
        cd "$(dirname "$kak_quoted_buffile")"
        git rev-parse --absolute-git-dir
      }
      set-option buffer git_worktree %sh{
        cd "$(dirname "$kak_quoted_buffile")"
        git rev-parse --show-toplevel
      }
      set-option buffer git_common_dir %sh{
        cd "$(dirname "$kak_quoted_buffile")"
        git rev-parse --git-common-dir
      }
      set-option buffer git_found true
    }
    set-option buffer git_setup true
  }
}

define-command git-setup-buffer %{
  try %{
    git-find-repo
    evaluate-commands -no-hooks %sh{
      $kak_opt_git_found || echo "fail 'buffer not in a git directory?'"
    }
    hook -group git-setup global BufOpenFile .* 'git show-diff'
    hook -group git-setup global WinCreate .* 'git show-diff'
    hook -group git-setup global BufWritePost .* 'git update-diff'
    hook -group git-setup global BufReload .* 'git update-diff'
    hook -group git-setup global ModeChange insert:normal 'git update-diff'
  }
}

hook -group git-setup global BufOpenFile .* git-setup-buffer

map global user 'd' ': git diff %reg{%}<ret>' -docstring 'git diff current file'
map global user 'u' ': git update-diff<ret>' -docstring 'update git markers'

# eval %sh{kak-lsp --kakoune -s $kak_session}
# lsp-enable # TODO: enable per-filetype?

hook -group filetype-buffer-opts global WinSetOption filetype=elixir %{
  set-option buffer autowrap_column 98
}

hook global ModuleLoaded elixir %{
  try %{ rmhl 'shared/elixir/code/regex_[A-Z][\w_]+\b_0:module' }
  catch %{ echo -markup {error} unneeded workaround for elixir highlighting }
  try %{
    add-highlighter shared/elixir/code/better-module regex \
      '\b[A-Z][\w_]+\b' 0:module
  }
}

hook -group filetype-buffer-opts global WinSetOption filetype=java %{
  set-option buffer autowrap_column 120
  set-option buffer indentwidth 4
  set-option buffer formatrangecmd format-java
}

hook -group filetype-buffer-opts global WinSetOption filetype=go %{
  set-option buffer indentwidth 4
  set-option buffer formatrangecmd format-go
  try %{ remove-highlighter buffer/list-chars }
}

hook -group filetype-buffer-opts global WinSetOption filetype=git-commit %{
  set-option buffer comment_line ';'
  set-option buffer autowrap_column 72
  autowrap-enable

  # first non-{comment/empty} line ("summary" line) should stay under 50 chars
  add-highlighter buffer/summary-line dynregex \
    '\A(?:(?:%opt{comment_line}[^\n]*)?\n)*(?:(?<=\n)|\A)(?!%opt{comment_line})[^\n]{50}([^\n]+)' \
    1:Error

  # first line after summary line, excepting comment lines, needs to be blank
  add-highlighter buffer/space-between dynregex \
    '\A(?:(?:%opt{comment_line}[^\n]*)?\n)*(?:(?<=\n)|\A)(?!%opt{comment_line})[^\n]+\n(?:%opt{comment_line}[^\n]*\n)*(?!%opt{comment_line})([^\n]+)' \
    1:Error
}

declare-option -docstring 'Expand tabs into spaces' \
  bool expandtab true

# SuperTab: <Tab> with only whitespace preceding? indent ; otherwise, completion
hook -group supertab global InsertChar '\t' %{
  try %{
    evaluate-commands %sh{ $kak_opt_expandtab || echo fail not expanding tabs }
    try %{
      execute-keys -draft <a-h><a-K>\S<ret>
      execute-keys -draft h@
    } catch %{
      execute-keys -draft hd<c-n>
    }
  }
}

# TODO: <Backspace> -> delete indentwidth characters

# Navigate completion menu with <Tab>/<Shift+Tab>
# https://www.reddit.com/r/kakoune/comments/8jllac/how_can_i_navigate_the_completion_menu_with_tab/dz0k94e/
hook -group supertab global InsertCompletionShow .* %{
  try %{
    exec -draft 'h<a-K>\h<ret>'
    map window insert <s-tab> <c-p>
    map window insert <tab> <c-n>
  }
}
hook -group supertab global InsertCompletionHide .* %{
  unmap window insert <tab> <c-n>
  unmap window insert <s-tab> <c-p>
}

define-command -docstring %{
  Assert selection spans multiple regions or characters.
  Mostly useful for scripting.
} assert-non-single-selection %{
  try %{
    execute-keys -draft '<a-space>'
  } catch %{
    execute-keys -draft '<a-k>..<ret>'
  }
}

define-command -docstring %{
  Assert only one character is selected.
  Mostly useful for scripting.
} assert-single-char-selection %{
  evaluate-commands %sh{
    case "$kak_selections_desc" in
      ("${kak_selections_desc#*,}","${kak_selections_desc%,*}") exit ;;
    esac
    printf 'fail "selection was not of the form line.char,line.char"\n'
  }
}

define-command -params 2 -docstring %{
  <name> <keys>
  Create a jump command "jump-<name>" that, if only one character is selected:
    Runs: <keys> and <;>
    Otherwise: just <keys>
} define-jump-command %§
  define-command -override "jump-%arg{1}" "
    try %%¶
      assert-single-char-selection
      execute-keys ""%arg{2};""
    ¶ catch %%¶
      execute-keys ""%arg{2}""
    ¶
  "
§

define-command -params 2 -docstring %{
  <name> <text-object>
  Create a pair of jump commands:
    "jump-<name>": jumps/extends to end of <text-object>
    "jump-<name>-backward": jumps/extends to beginning of <text-object>
} define-paired-jump-command %§
  define-jump-command %arg{1} "}%arg{2}"
  define-jump-command "%arg{1}-backward" "{%arg{2}"
§

define-command -params 4 -docstring %{
  <name> <text-object> <forward-key> <backward-key>
  Create a paired jump command and map both the forward- and backward versions.
  E.g.:
    define-paired-jump-mapping par p \' "<a-'>"
      creates: jump-par and jump-par-backward
      maps: <'> to jump-par, <a-'> to jump-par-backward
} define-paired-jump-mapping %§
  define-paired-jump-command %arg{1} %arg{2}
  map global normal %arg{3} ": jump-%arg{1}<ret>"
  map global normal %arg{4} ": jump-%arg{1}-backward<ret>"
§

# java range formatting
define-command -docstring %{
  Use `google/google-java-format` to format:
  - if the current selection only spans one character: the whole file
  - otherwise: the selected lines
} format-java %{
  evaluate-commands -draft %sh{
    set -- java -jar ~/.local/bin/google-java-format-all-deps.jar

    ranges=false
    case "$kak_selections_desc" in
      (*,*,*) ranges=true ;;
      ("${kak_selections_desc#*,},${kak_selections_desc%,*}") ranges=false ;;
      (*) ranges=true ;;
    esac

    if $ranges
    then
      set -- "$@" --skip-sorting-imports --skip-removing-unused-imports $(
        printf '%s\n' $kak_selections_desc |
        awk -F'[^0-9]' '{ print $1 ; print $3 }' |
        sort -n |
        awk '{ printf("%s%s", $0, (NR % 2) ? ":" : "\n") }' |
        sed 's/^/--lines /'
      )
    fi

    set -- "$@" --aosp "--assume-filename='$kak_buffile'" -

    printf 'execute-keys %%{%%|%s<ret>}\n' "$*"
  }
}

define-command format-go %{
  try %{
    assert-non-single-selection
    execute-keys '| gofmt<ret>'
  } catch %{
    execute-keys -draft '%| gofmt<ret>'
  }
}

define-command -hidden format-range-unsupported %{
  fail 'Range formatting not supported for this filetype'
}

declare-option -docstring 'Set command for range formatting' \
  str formatrangecmd 'format-range-unsupported'

define-command format-range %{ evaluate-commands %opt{formatrangecmd} }

map -docstring 'Format selection(s) or file' \
  global user 'f' ': format-range<ret>'
