local batch cmd file tmpfile uploadfile json uuid auth=$(curl-api-file auth)
local -a cmds
cmds=( jq s3cmd uuidgen )
if [[ ! -s $auth ]] ; then warn "Not logged in" ; return 1 ; fi
for cmd in $cmds ; do
  (( $+commands[$cmd] )) && continue
  warn "$0 requires these commands: $cmds"
  return 1
done
local bucket=$(jq -r .drop_bucket < $auth)
local -a s3args blobs
s3args=(
  --access_key=$(jq -r .access_key < $auth)
  --secret_key=$(jq -r .secret_key < $auth)
)
for file ; do
  [[ -z "$batch" ]] && batch=$(curl-api-post /batches | jq -r .id)
  uuid=$(uuidgen)
  if [[ -n "$uuidstamp" ]] ; then
    if ! tmpfile=`mktemp` ; then
      warn "Failed to create temp file for uuidstamping"
      continue
    fi
    printf 'uuidstamp %s' "$(uuidgen)" \
      | convert $file -set comment @- ${file:e}:$tmpfile
    uploadfile=$tmpfile
  else
    uploadfile=$file
  fi
  if ! s3cmd $s3args put $uploadfile s3://$bucket/$uuid.$file:e ; then
    warn "Failed to upload $file to S3 (bucket=$bucket)"
    continue
  fi

  json="$(json_object \
    url from-$0 \
    key $uuid.$file:e \
    filename $file:t \
    size $(stat -c %s $uploadfile) \
    batch_id $batch \
    | jq -c -r '{"files":.}'
  )"
  if [[ -z $batched ]]
  then printf %s $json | curl-api-post /photos -d @- && echo
  else blobs+=( $json )
  fi
  [[ -n $tmpfile ]] && rm $tmpfile
done

for json in $blobs ; do
  printf %s $json | curl-api-post /photos -d @- && echo
done
