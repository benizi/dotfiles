# don't try to auto-correct directories
zstyle ':completion:*' accept-exact-dirs true
# <C-x><C-f> == complete file regardless of context
zle -C complete-files complete-word _generic
zstyle ':completion:complete-files:*' completer _files
bindkey '^[,' complete-files
# <C-x><C-h> == complete history regardless of context
zle -C complete-history complete-word _generic
zstyle ':completion:complete-history:*' completer _history
bindkey '^X^H' complete-history
# don't insert tab on empty line
zstyle ':completion:*' insert-tab false
# only complete bhaskell/root/current for ssh'ing
local _ssh_users
typeset -U _ssh_users
_ssh_users=( bhaskell root $LOGNAME )
zstyle ':completion:*:ssh:*' users ${^_ssh_users}
# complete all git commands
zstyle ':completion:*:git:*' wanted-commands all
# add custom git commands to completion
zstyle ':completion:*:git:*' user-commands ${${(k)commands[(I)git-*]}#git-}

# from mikachu
zstyle ':completion:*:descriptions' format "%B---- %d%b"
zstyle ':completion:*:messages' format '%B%U---- %d%u%b'
zstyle ':completion:*:warnings' format '%B%F{9}---- no match for: %d%f%b'
zstyle ':completion:*:corrections' format '%B---- %d %F{11}(errors: %e)%f%b'
zstyle ':completion:*:options' description 'yes'
zstyle ':completion:*:options' auto-description '%d'
zstyle ':completion:*' separate-sections 'yes'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' prompt 'errors: %e'

_check_for_git_alias () {
  [[ $words[1] = g?* ]] || return 1
  local al=${words[1]#g}
  valid_git_alias $al || valid_git_command $al || return 1
  words[1]=(git $al)
  ((++CURRENT))
  _normal
}
_add_git_commands () {
  [[ $words[1] = g* ]] || return 1
  local -a cmds
  cmds=( g${(f)^:-"$(all_git_aliases ; all_git_commands)"} )
  print -l cmds $cmds >&2
  compadd -a cmds
}
zstyle ':completion:*' completer _check_for_git_alias _complete
zstyle ':completion::complete:-command-::' completer _add_git_commands

__git_files () {
  # localize options as appropriate
  local compadd_opts opts tag description
  # ignore compadd-related options that __git_files passes along
  zparseopts -D -E -a compadd_opts V: J: 1 2 n f X: M: P: S: r: R: q F:
  # ignore git ls-files options that __git_files uses
  zparseopts -D -E -a opts -- -cached -deleted -modified -others -ignored -unmerged -killed x+: --exclude+:
  # __git_files expects a tag and a description
  tag=$1 description=$2 ; shift 2
  # but we ignore those and call __git_tree_files against the HEAD revision
  # with the current PREFIX
  __git_tree_files ${PREFIX:-.} HEAD
}

_git-co () {
  _git-checkout "$@"
  _git-clone "$@"
}

_git-hard () { _git-reset "$@" }
