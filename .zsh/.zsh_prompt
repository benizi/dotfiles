# TODO: vcs_info stuff
# autoload -Uz vcs_info
# zstyle ':vcs_info:*' disable cdv darcs mtn p4 svk tla
__i_am_admin () {
  local admin=1
  [ -n "$INCYG" -a "$USERNAME" = "Administrator" ] && admin=0
  [ -n "$INCYG" ] && [[ "$(id)" = *,0'(root)',* ]] && admin=0
  [ "$UID" = "0" ] && admin=0
  return $admin
}

__prompt_screen () {
  local _screen=''
  if [ -n "$STY" ] ; then
    _screen="$STY"
    [[ $_screen = [0-9]*.* ]] && _screen="${_screen[(ws:.:)2,-1]}"
    local _host=$(print -P '%m')
    [[ $_screen = *.$_host ]] && _screen=$_screen:r
  elif [ -n "$DTACH" ] ; then
    _screen=${DTACH:t}
  fi
  printf %s $_screen
}

__prompt_vcs () {
  local -a vcs_strings test_git other_vcs
  test_git=( $PWD(N) )
  other_vcs=()
  local -A added
  local n=0 git_dir= o
  while (( $#test_git && n < 20 )) ; do
    local d=$test_git[1]
    # avoid issues with Cygwin/MSYS treating // specially
    [[ $d = / ]] && d=''
    shift test_git
    n=$(( n + 1 ))
    for o in $d/{.hg,.svn,CVS} ; do
      if [[ -d $o ]] ; then
        case $o:t in
          .svn|CVS) [[ -d $o:h:h/$o:t ]] || other_vcs+=( $o:h ) ;;
          *) other_vcs+=( $o ) ;;
        esac
      fi
    done
    [[ -d $d/.git ]] && git_dir=$d/.git && break
    local -a add
    add=( $d:h $d/./..(+A,N) )
    for d in $add ; do
      (( $+added[(e)$d] )) && continue
      test_git+=( $d )
      added[$d]=1
    done
  done
  if (( $#other_vcs )) ; then
    for n in $other_vcs ; do
      vcs_strings+=( $(cd -q $n ; print -P '%~') )
    done
  fi
  if (( $#git_dir )) ; then
    local -a pretty_git
    local dir=$(cd -q $git_dir:h ; print -P '%~')
    [[ $dir = $(print -P '%~') ]] || pretty_git+=( $dir )
    local branch="$(git --git-dir=$git_dir branch | grep '^[*]' | cut -c3-)"
    [[ "$branch" = master ]] || pretty_git+=( $branch )
    (( $#pretty_git )) || pretty_git+=( . )
    (( $#pretty_git > 1 && ${#pretty_git[1]} > 15 )) && pretty_git[1]=''
    vcs_strings+=( '%F{white}%K{blue}git:'${(j.:.)pretty_git}%f%k )
  fi
  printf %s $vcs_strings
}

__prompt_ruby_manager () {
  if (( $+ruby_manager )) ; then
    case $ruby_manager in
      prb) printf %s "prb:$(prb version --short)" ;;
      rbenv) printf %s "$(rbenv version-name)" ;;
      rvm) printf %s "rvm:$(rvm current)" ;;
      rbfu) printf %s ${RBFU_RUBY_VERSION:-rbfu} ;;
      *) printf %s "$ruby_manager:?" ;;
    esac
  fi
}

__setup_prompt () {
  setopt promptsubst

  local _ps_color='$PSCOLORNORM'
  (( $+termcap[Co] )) && (( $termcap[Co] > 8 )) || _ps_color='$PSCOLORLO'
  __i_am_admin && _ps_color='${PSCOLORROOT-$INVERSE$BOLD'$_ps_color'}'
  __i_am_admin && _pschar='#' || _pschar='$'

  local _screen="$(__prompt_screen)"
  _screen=${_screen:+[$_screen]}

  local -a _extra

  _extra+=( "${(f):-"$(__prompt_vcs)"}" )

  [[ ! -e $PWD ]] && _extra+=( "!deleted!" )

  local _ruby_info="$(__prompt_ruby_manager)"

  [[ -n $_ruby_info ]] && _extra+=( '%F{white}%K{red}'$_ruby_info%f%k )

  if [[ "$DISPLAY" = localhost:[[:digit:]]*.0 ]] ; then
    (( ${${DISPLAY#localhost:}%.0} > 9 )) && _extra+=( ssh-x11 )
  fi

  if [[ "$LD_PRELOAD" = *proxychains* ]] && [[ -n "$PROXY_SOCKS5" ]] ; then
    _extra+=( "socks:$PROXY_SOCKS5" )
  fi

  (( $+incognito_mode )) && _extra+=( '_^_' )

  local -a prompt_parts
  _extra=( $_ps_color%n@%m%f%b $_extra )
  (( $#_extra )) && prompt_parts+=( ${(j:╶╴:)_extra} )

  prompt_parts+=( '%F{white}%K{22}%~%f%k'$_pschar' ' )

  PROMPT=$'\n''╭╴'${prompt_parts[1]}' ╼'$'\n╰─╴'${prompt_parts[2]}
}

prompt_shorten () {
  local in=$1
  if (( $#in > 15 )) ; then
    local -a out
    local i
    out=( ${(s./.)in} )
    for (( i = 1 ; i < $#out ; i++ )) ; do
      part=$out[$i]
      case $part in
        .[[:alpha:]]*) part=.$part[2] ;;
        [[:alpha:]]*) part=$part[1] ;;
      esac
      out[$i]=$part
    done
    in=${(j./.)out}
  fi
  printf %s $in
}

TITLESEP='│' # ceçi n'est pas un pipe
(( $+INCYG || $+STY )) && TITLESEP='|'
[[ $TERM = (screen|cygwin)* ]] && TITLESEP='|'
fancytitle () {
  (( $+terminfo[tsl] )) || return 0
  [[ -n "$NOTITLE" ]] && return 0
  local host c=$TITLESEP title
  host="%m $c "
  case "$DISPLAY" in
    :0*|localhost:*) [ -z "$SSH_CLIENT" ] && host="" ;;
  esac
  local extra=
  __i_am_admin && extra="ROOT $c "
  title="$1$(print -nP "$extra$host"'%~ $c %n${STY+ $c $STY}')"
  [[ $title = ?(#c100,) ]] && title=${title[1,88]}...
  printf "${TITLE}%s${ENDTITLE}" $title
}
preexec () {
  __last_command=$1
  fancytitle "$1 $TITLESEP "
}
precmd () {
  __setup_prompt
  fancytitle ""
}
() {
  zle-line-init zle-keymap-select () {
    local -A seqs
    if [[ $TERM = rxvt* ]] ; then
      seqs+=( cmd $'\e]12;1\a' )
      seqs+=( ins $'\e]12;0\a' )
    elif (( $+terminfo[cvvis] && $+terminfo[cnorm] )) ; then
      seqs+=( cmd $terminfo[cvvis] )
      seqs+=( ins $terminfo[cnorm] )
    else
      return
    fi
    case $KEYMAP in
      vicmd) print -rn -- $seqs[cmd] ;;
      main|viins) print -rn -- $seqs[ins] ;;
    esac
  }
  # need line-init for cancelled commands
  zle -N zle-line-init
  zle -N zle-keymap-select
}
