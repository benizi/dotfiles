local simple_prompt
unset simple_prompt

case $TERM in
  (9term) simple_prompt=true ;;
esac

if (( $+simple_prompt )) ; then
  PS1='%n@%m %~%% '
  return
fi

__light_terminal () { false }

__i_am_admin () {
  local admin=1
  [ -n "$INCYG" -a "$USERNAME" = "Administrator" ] && admin=0
  [ -n "$INCYG" ] && [[ "$(id)" = *,0'(root)',* ]] && admin=0
  [ "$UID" = "0" ] && admin=0
  return $admin
}

__prompt_screen () {
  local _screen=''
  if [ -n "$STY" ] ; then
    _screen="$STY"
    [[ $_screen = [0-9]*.* ]] && _screen="${_screen[(ws:.:)2,-1]}"
    local _host=$(print -P '%m')
    [[ $_screen = *.$_host ]] && _screen=$_screen:r
  elif [ -n "$DTACH" ] ; then
    _screen=${DTACH:t}
  fi
  printf %s $_screen
}

__prompt_vcs () {
  local -a test_git types
  local -A vcs
  test_git=( $PWD(N) )
  other_vcs=()
  local -A added
  local n=0 git_dir= o
  while (( $#test_git && n < 20 )) ; do
    local d=$test_git[1]
    # avoid issues with Cygwin/MSYS treating // specially
    [[ $d = / ]] && d=''
    shift test_git
    n=$(( n + 1 ))
    for o in .hg .svn CVS ; do
      local other_type=${o:l:s/./}
      local other_dir=$d/$o
      (( $+vcs[$other_type] )) && continue
      [[ -d $other_dir ]] || continue
      # skip if not highest level of repo for hierarchically-littered systems
      [[ $other_type = (svn|cvs) ]] && [[ -d $other_dir:h:h/$o:t ]] && continue
      vcs[$other_type]=${:-"$(cd -q $d ; print -P '%~')"}
      types+=( $other_type )
    done
    [[ -d $d/.git ]] && git_dir=$d/.git && break
    local -a add
    add=( $d:h $d/./..(+A,N) )
    for d in $add ; do
      (( $+added[(e)$d] )) && continue
      test_git+=( $d )
      added[$d]=1
    done
  done
  if (( $#git_dir )) ; then
    local -a pretty_git
    local dir=$(cd -q $git_dir:h ; print -P '%~')
    [[ $dir = $(print -P '%~') ]] || pretty_git+=( $dir )
    local branch="$(git --git-dir=$git_dir branch | grep '^[*]' | cut -c3-)"
    [[ "$branch" = master ]] || pretty_git+=( $branch )
    (( $#pretty_git )) || pretty_git+=( . )
    (( $#pretty_git > 1 && ${#pretty_git[1]} > 15 )) && pretty_git[1]=''
    vcs[git]=${(j.:.)pretty_git}
    types+=( git )
  fi
  for o in $types ; do
    printf '%s:%s\n' $o $vcs[$o]
  done
}

typeset -A __prompt_once __color_warn_once
__prompt_setup() {
  setopt promptsubst

  (( $+__prompt_color )) || __prompt_color=( f:231 k:124 b: )
  local ps_char='$'
  hi_color || __prompt_color=()
  if __i_am_admin ; then
    __prompt_color+=( s: )
    ps_char='#'
  fi

  local screen="$(__prompt_screen)"
  local -a vcs
  vcs=( "${(f):-"$(__prompt_vcs)"}" )

  local x11 deleted socks fail_couchdb current_dir virtenv_info
  unset x11 deleted socks fail_couchdb virtenv_info
  (( $+VIRTUAL_ENV )) && virtenv_info=$VIRTUAL_ENV:t

  [[ ! -e $PWD ]] && deleted=true
  [[ -e ~$owner/failed-couchdb ]] && fail_couchdb=true

  if [[ "$DISPLAY" = localhost:[[:digit:]]*.0 ]] ; then
    (( ${${DISPLAY#localhost:}%.0} > 9 )) && x11=ssh
  elif (( $+DISPLAY )) && [[ "$DISPLAY" != :0 ]] ; then
    x11=$DISPLAY
  fi

  if [[ "$LD_PRELOAD" = *proxychains* ]] && [[ -n "$PROXY_SOCKS5" ]] ; then
    socks=$PROXY_SOCKS5
  fi

  current_dir=${${(%):-%d}/$HOME/${:-'~'}}
  if [[ ${(%):-%~} = */* ]] ; then
    current_dir=%~
  elif [[ $current_dir != ${(%):-%~} ]] ; then
    current_dir="%~ [$current_dir]"
  fi

  local C=$0.colorize map_att=$0.map_att

  typeset -a top middle bottom
  $map_att() {
    local att=$1
    local -A map
    __light_terminal && map=( f k k f )
    (( $+map[$att] )) && att=$map[$att]
    printf %s $att
  }

  $C() {
    local name=$1
    shift
    local -a rest
    local -A atts
    atts=( f 15 )
    while (( $# )) ; do
      local arg=$1
      shift
      case $arg in
        (:norm) atts=() ;;
        (f:*|k:*|?:) atts[${arg%%\:*}]=${arg#*:} ;;
        (*) rest+=( $arg $@ ) ; break ;;
      esac
    done
    (( $#rest )) || return 0
    local att= val= c_pre= c_post=
    for att in ${(k)atts} ; do
      local key="$($map_att $att)"
      val=$atts[$att]
      c_pre+=%${key:u}
      (( $#val )) && c_pre+='{'$val'}'
      c_post+=%$key
    done
    eval "$name+=( $c_pre${(@q)^rest}$c_post )"
  }

  $C top k:22 $current_dir
  $C top k:22 $real_pwd
  $C top $__prompt_color ${${${(%):-%n@%m}#$owner@}#$owner-}
  $C top k:128 $screen
  $C top k:20 $^vcs[1,1]
  $C top f:184 $^vcs[2,-1]
  $C top k:88 $ruby_version
  $C top k:128 ${node_version#v}
  $C top k:166 ${go_version#go}
  $C top k:88 $erlang_version
  $C top k:93 ${elixir_version#v}
  $C top k:130 ${rust_version#v}
  $C top k:22 $virtenv_info
  (( $+socks )) && $C top k:22 "socks:$socks"
  (( $+x11 )) && $C top k:27 "display $x11"
  $C top k:17 '%D{%Y-%m-%d %H:%M:%S}'
  (( __prompt_once[term]++ )) || $C top k:68 $TERM

  if (( $__prompt_return )) && (( $+__last_command )) ; then
    local escaped_command=${${${__last_command%%$'\n'}:gs/[$]/\\\$}:gs/[%]/%%}
    $C middle k:208 $escaped_command' -> %?'
    __prompt_return=0
  fi

  local mem="$(mem)"
  local -a memargs
  [[ $mem = (*\!*) ]] && memargs+=( k:1 )
  $C middle $memargs $mem

  (( $+DATABASE_URL )) && $C bottom k:167 "DB ${testdb:-$DATABASE_URL}"
  (( $+deleted )) && $C bottom k:196 '!deleted!'
  (( $+fail_couchdb )) && $C bottom k:196 '!CouchDB!'
  (( $+incognito_mode )) && $C bottom k:208 '!!!'
  (( $+ssh_control_master )) && $C bottom k:88 SSH-MASTER
  (( $+DOCKER_HOST )) && $C bottom k:167 docker=${${DOCKER_HOST:s%unix://%}:s%$HOME%\~}
  (( $+MYVIMRC )) && $C bottom f:145 '(inside vim)'
  (( $+curl_api_env )) && $C bottom k:167 "curl_api=$curl_api_env"

  $C bottom :norm $ps_char

  local -a lines

  $0.lowcolor() {
    local var seqval
    for var
    do
      if (( $+lo[${(P)var}] ))
      then typeset -g $var="${lo[${(P)var}]}"
      elif (( ! __color_warn_once["$var=${(P)var}"]++ ))
      then
        seqval="$var=«${(%):-"%216F"}${(P)var}${(%):-"%F{red}"}»"
        warn "No low-color version of $seqval (new prompt sequence?)"
      fi
    done
  }
  local LOWCOLOR=$0.lowcolor

  $0.lines() {
    local sep='╶╴' fmt=$1 array=$2:r join=$2:e var val
    hi_color || $LOWCOLOR sep fmt
    if (( ${#join} ))
    then set -- "${(Ppj:$sep:)array}"
    else set -- "${(P@)array}"
    fi
    local -a rows
    printf -v rows "$fmt" "$@"
    lines+=( "${rows[@]}" )
  }

  local -A lo
  lo=(
    # sep
    '╶╴' ' - '
    # line formats
    '' ''
    '╭─╴%s╶╼' '/- %s -'
    '│ %s' '| %s'
    '╰╴%s ' '\\-%s '
  )
  $0.lines '' '' ''
  $0.lines '╭─╴%s╶╼' top.join
  $0.lines '│ %s' middle
  $0.lines '╰╴%s ' bottom.join
  PROMPT=${(F)lines}

  unfunction -m "$0.*"
}

TITLESEP='│' # ceçi n'est pas un pipe
(( $+INCYG || $+STY )) && TITLESEP='|'
[[ $TERM = (screen|cygwin)* ]] && TITLESEP='|'
fancytitle () {
  (( $+terminfo[tsl] )) || return 0
  [[ -n "$NOTITLE" ]] && return 0
  local host c=$TITLESEP title
  host="%m $c "
  case "$DISPLAY" in
    (:0*|localhost:*) [ -z "$SSH_CLIENT" ] && host="" ;;
  esac
  local extra=
  __i_am_admin && extra="ROOT $c "
  title="$1$(print -nP "$extra$host"'%~ $c %n${STY+ $c $STY}')"
  [[ $title = ?(#c100,) ]] && title=${title[1,88]}...
  echoti tsl
  printf %s $title
  echoti fsl
}

typeset -A __terminal_seqs
typeset -i __last_command_number

__reset_cursor () {
  if (( $+__terminal_seqs[reset] )) ; then
    printf '%s' $__terminal_seqs[reset]
  fi
}

unset __x11
__add_x11_last_used() {
  (( $+__x11 )) || __x11=$(( $+commands[xprop] && $+DISPLAY && $+WINDOWID ))
  (( __x11 )) || return 0
  xprop -id $WINDOWID -f _ZSH_LAST_USED 32c -set _ZSH_LAST_USED $EPOCHSECONDS
  xprop -id $WINDOWID -f _ZSH_LAST_CMD 8u -set _ZSH_LAST_CMD $__last_command
}

preexec () {
  __last_command=$1
  (( __last_command_number ++ ))
  fancytitle "$1 $TITLESEP "
  __reset_cursor
  __add_x11_last_used
  unset __prompt_return
}

precmd () {
  __prompt_return=${__prompt_return-$?}
  __prompt_setup
  fancytitle ""
}

() {
  zle-line-init zle-keymap-select () {
    local normal=1 insert
    __light_terminal && insert=0 || insert=15
    if [[ $TERM = rxvt* ]] ; then
      __terminal_seqs+=( cmd $'\e]12;'$normal$'\a' )
      __terminal_seqs+=( ins $'\e]12;'$insert$'\a' )
    elif [[ $TERM = (st*|*xterm*) ]] ; then
      __terminal_seqs+=( cmd $'\e[2 q' )
      __terminal_seqs+=( ins $'\e[6 q' )
      __terminal_seqs[reset]=$__terminal_seqs[cmd]
    elif (( $+terminfo[cvvis] && $+terminfo[cnorm] )) ; then
      __terminal_seqs+=( cmd $terminfo[cvvis] )
      __terminal_seqs+=( ins $terminfo[cnorm] )
    else
      return
    fi
    case $KEYMAP in
      (vicmd) print -rn -- $__terminal_seqs[cmd] ;;
      (main|viins) print -rn -- $__terminal_seqs[ins] ;;
    esac
  }
  # need line-init for cancelled commands
  zle -N zle-line-init
  zle -N zle-keymap-select
}
