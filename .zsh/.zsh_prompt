__light_terminal () {
  [[ $TERM != (st*|konsole*) ]]
}

__i_am_admin () {
  local admin=1
  [ -n "$INCYG" -a "$USERNAME" = "Administrator" ] && admin=0
  [ -n "$INCYG" ] && [[ "$(id)" = *,0'(root)',* ]] && admin=0
  [ "$UID" = "0" ] && admin=0
  return $admin
}

__prompt_screen () {
  local _screen=''
  if [ -n "$STY" ] ; then
    _screen="$STY"
    [[ $_screen = [0-9]*.* ]] && _screen="${_screen[(ws:.:)2,-1]}"
    local _host=$(print -P '%m')
    [[ $_screen = *.$_host ]] && _screen=$_screen:r
  elif [ -n "$DTACH" ] ; then
    _screen=${DTACH:t}
  fi
  printf %s $_screen
}

__prompt_vcs () {
  local -a test_git types
  local -A vcs
  test_git=( $PWD(N) )
  other_vcs=()
  local -A added
  local n=0 git_dir= o
  while (( $#test_git && n < 20 )) ; do
    local d=$test_git[1]
    # avoid issues with Cygwin/MSYS treating // specially
    [[ $d = / ]] && d=''
    shift test_git
    n=$(( n + 1 ))
    for o in .hg .svn CVS ; do
      local other_type=${o:l:s/./}
      local other_dir=$d/$o
      (( $+vcs[$other_type] )) && continue
      [[ -d $other_dir ]] || continue
      # skip if not highest level of repo for hierarchically-littered systems
      [[ $other_type = (svn|cvs) ]] && [[ -d $other_dir:h:h/$o:t ]] && continue
      vcs[$other_type]=${:-"$(cd -q $d ; print -P '%~')"}
      types+=( $other_type )
    done
    [[ -d $d/.git ]] && git_dir=$d/.git && break
    local -a add
    add=( $d:h $d/./..(+A,N) )
    for d in $add ; do
      (( $+added[(e)$d] )) && continue
      test_git+=( $d )
      added[$d]=1
    done
  done
  if (( $#git_dir )) ; then
    local -a pretty_git
    local dir=$(cd -q $git_dir:h ; print -P '%~')
    [[ $dir = $(print -P '%~') ]] || pretty_git+=( $dir )
    local branch="$(git --git-dir=$git_dir branch | grep '^[*]' | cut -c3-)"
    [[ "$branch" = master ]] || pretty_git+=( $branch )
    (( $#pretty_git )) || pretty_git+=( . )
    (( $#pretty_git > 1 && ${#pretty_git[1]} > 15 )) && pretty_git[1]=''
    vcs[git]=${(j.:.)pretty_git}
    types+=( git )
  fi
  for o in $types ; do
    printf '%s:%s\n' $o $vcs[$o]
  done
}

__prompt_ruby_manager () {
  if (( $+ruby_manager )) ; then
    case $ruby_manager in
      prb) printf %s "prb:$(prb version --short)" ;;
      rbenv) printf %s "$(rbenv version-name)" ;;
      rvm) printf %s "rvm:$(rvm current)" ;;
      rbfu) printf %s ${RBFU_RUBY_VERSION:-rbfu} ;;
      *) printf %s "$ruby_manager:?" ;;
    esac
  fi
}

__setup_prompt () {
  setopt promptsubst

  (( $+__prompt_color )) || __prompt_color=( f:231 k:124 b: )
  local ps_char='$'
  (( $+termcap[Co] )) && (( $termcap[Co] > 8 )) || __prompt_color=()
  if __i_am_admin ; then
    __prompt_color+=( s: )
    ps_char='#'
  fi

  local screen="$(__prompt_screen)"
  local -a vcs
  vcs=( "${(f):-"$(__prompt_vcs)"}" )

  local x11 deleted socks current_dir
  unset x11 deleted socks
  local ruby_info="$(__prompt_ruby_manager)"

  [[ ! -e $PWD ]] && deleted=true

  if [[ "$DISPLAY" = localhost:[[:digit:]]*.0 ]] ; then
    (( ${${DISPLAY#localhost:}%.0} > 9 )) && x11=ssh
  elif (( $+DISPLAY )) && [[ "$DISPLAY" != :0 ]] ; then
    x11=$DISPLAY
  fi

  if [[ "$LD_PRELOAD" = *proxychains* ]] && [[ -n "$PROXY_SOCKS5" ]] ; then
    socks=$PROXY_SOCKS5
  fi

  current_dir=${${(%):-%d}/$HOME/${:-'~'}}
  [[ $current_dir != ${(%):-%~} ]] && current_dir+=" [%~]"

  typeset -a top_row middle_row bottom_row
  map_att () {
    local att=$1
    local -A map
    __light_terminal && map=( f k k f )
    (( $+map[$att] )) && att=$map[$att]
    printf %s $att
  }

  add.top_row add.middle_row add.bottom_row () {
    local arg
    local -a rest
    local -A atts
    atts=( f 15 )
    while (( $# )) ; do
      local arg=$1
      shift
      case $arg in
        :norm) atts=() ;;
        f:*|k:*|?:) atts[${arg%%\:*}]=${arg#*:} ;;
        *) rest+=( $arg $@ ) ; break ;;
      esac
    done
    (( $#rest )) || return 0
    local att= val= c_pre= c_post=
    for att in ${(k)atts} ; do
      local key="$(map_att $att)"
      val=$atts[$att]
      c_pre+=%${key:u}
      (( $#val )) && c_pre+='{'$val'}'
      c_post+=%$key
    done
    eval "${0:e}+=( $c_pre${(@q)^rest}$c_post )"
  }

  add.top_row k:22 $current_dir
  add.top_row $__prompt_color %n@%m
  add.top_row k:128 $screen
  add.top_row k:blue $^vcs[1,1]
  add.top_row f:yellow $^vcs[2,-1]
  add.top_row k:red $ruby_info
  (( $+socks )) && add.top_row k:22 "socks:$socks"
  (( $+x11 )) && add.top_row k:27 "display $x11"

  if (( $__prompt_return )) ; then
    local escaped_command=${${${__last_command%%$'\n'}:gs/[$]/\\\$}:gs/[%]/%%}
    add.middle_row k:208 $escaped_command' -> %?'
  fi

  (( $+deleted )) && add.bottom_row k:red '!deleted!'
  (( $+incognito_mode )) && add.bottom_row k:208 '!!!'
  add.bottom_row :norm $ps_char

  local -a lines
  lines=(
    ''
    '╭─╴'${(j:╶╴:)top_row}' ╼'
    '│ '$^middle_row
    '╰╴'${(j:╶╴:)bottom_row}' '
  )
  PROMPT=${(F)lines}

  unfunction map_att add.top_row add.middle_row add.bottom_row
}

TITLESEP='│' # ceçi n'est pas un pipe
(( $+INCYG || $+STY )) && TITLESEP='|'
[[ $TERM = (screen|cygwin)* ]] && TITLESEP='|'
fancytitle () {
  (( $+terminfo[tsl] )) || return 0
  [[ -n "$NOTITLE" ]] && return 0
  local host c=$TITLESEP title
  host="%m $c "
  case "$DISPLAY" in
    :0*|localhost:*) [ -z "$SSH_CLIENT" ] && host="" ;;
  esac
  local extra=
  __i_am_admin && extra="ROOT $c "
  title="$1$(print -nP "$extra$host"'%~ $c %n${STY+ $c $STY}')"
  [[ $title = ?(#c100,) ]] && title=${title[1,88]}...
  printf "${TITLE}%s${ENDTITLE}" $title
}
preexec () {
  __last_command=$1
  fancytitle "$1 $TITLESEP "
}
precmd () {
  __prompt_return=$?
  __setup_prompt
  fancytitle ""
}
() {
  zle-line-init zle-keymap-select () {
    local -A seqs
    if [[ $TERM = rxvt* ]] ; then
      seqs+=( cmd $'\e]12;1\a' )
      seqs+=( ins $'\e]12;0\a' )
    elif (( $+terminfo[cvvis] && $+terminfo[cnorm] )) ; then
      seqs+=( cmd $terminfo[cvvis] )
      seqs+=( ins $terminfo[cnorm] )
    else
      return
    fi
    case $KEYMAP in
      vicmd) print -rn -- $seqs[cmd] ;;
      main|viins) print -rn -- $seqs[ins] ;;
    esac
  }
  # need line-init for cancelled commands
  zle -N zle-line-init
  zle -N zle-keymap-select
}
