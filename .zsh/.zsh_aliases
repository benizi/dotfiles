# keep some builtins out of history
alias fg=' fancytitle "$(fc -ln -1) (cont.) " ; builtin fg'
alias bg=' builtin bg'
alias rehash=' builtin rehash'
alias shit=' shit'

# keep shell history separate
() {
  local shell
  for shell in /bin/bash csh fish ksh mksh tcsh sh
  do
    [[ $shell = */* && -e $shell ]] || (( $+commands[$shell] )) || continue
    alias ${shell:t}='HISTFILE=$zsh_dirs[-1]/'"${shell:t}-history $shell"
  done
}

# no globbing for some commands
alias cave='noglob cave'
() {
local cmd
for cmd in $commands[(I)find*] ; do
  alias $cmd="noglob $cmd"
done
}
'find' () {
  integer i=${argv[(i)-*]}
  (( $+INOSX && ! $#argv )) && [[ $0 = find ]] && argv=( . )
  command $0 ${~argv[1,i-1]} "${(@)argv[i,-1]}"
}

google goog() {
  local -i i
  for (( i=1; i<$#argv; i++ )) ; do
    [[ $argv[i] == -* ]] && continue
    break
  done
  ((i++))
  ack-like "${(@)argv[1,i-1]}" ${~argv[i,-1]}
}

ack-like() {
  local cmd found=false
  local -a args
  for cmd in ack ack-grep
  do
    (( $+commands[$cmd] )) || continue
    found=true
    break
  done

  if ! $found && (( $+commands[grep] ))
  then cmd=grep found=true args=( -r )
  fi

  if $found
  then $cmd $args "$@"
  else warn "No ack-like command found" ; return 1
  fi
}

ack-app bing() {
  local -a cmd xargs
  [[ -e .zeus.sock ]] && cmd=( zeus ) || cmd=( rails )
  cmd+=( r 'puts $:.select { |d| Dir.exists?(d) }' )
  xargs=( xargs )
  (( $+commands[ack] )) && xargs+=( ack ) || xargs+=( grep -r )
  $cmd | $xargs "$@"
}

alias ri='noglob ri'

alias chroot32='sudo su - -c "linux32 chroot /32 /bin/zsh -l"'
alias fcl='fc -t %Y-%m-%d@%H:%M:%S -nl 0 | less'

# various versions of 'ls'
() {
local lscolor="ls --color=auto"
(( $+INLIN )) && export QUOTING_STYLE=literal
(( $+INBSD || $+INSOL )) && lscolor=ls
# OSX: -G = colorize, -e = show ACLs, -O = show file flags
(( $+INOSX )) && lscolor="ls -GO"

alias ll="$lscolor -trl"
alias l="ll -A"
alias la=l
alias lsd="ll -d"
alias lss="$lscolor -Srl"
alias lsr="$lscolor -Sl"
}

# really-short list
alias g=git
alias gv=gvim
alias v=vim
alias vi=v

# Auto-bundled commands
cap rake rspec ruby cucumber () { be $0 "$@" }

with-git-tag() {
  if git rev-parse --git-dir &>/dev/null ; then
    local branch=$(git symbolic-ref HEAD 2>/dev/null || printf '%s' no-branch)
    git update-ref refs/run-tests/$EPOCHSECONDS/$branch HEAD
  fi
  "$@"
}

push-upstream() {
  # push to upstream, setting it up if needed
  local -a args
  local branch=${1:-"$(git branch | awk '/^\*/ { print $2 }')"}
  (( $# )) && shift
  if ! git rev-parse $branch@{upstream} &> /dev/null ; then
    local remote=$(git config push-upstream.remote | grep . 2> /dev/null || git remote | sed 1q)
    args=( -u $remote $branch )
  fi
  setopt local_options xtrace
  git push ${dry+-n} $args
}

rpush () { run-tests && push-upstream }

executable() {
  (( $+commands[$1] || $+aliases[$1] || $+functions[$1] || $+builtins[$1] )) || [[ -x $1 ]]
}

if-able() {
  if executable $1
  then "$@"
  else true
  fi
}

rails () {
  local base dir=$PWD warning
  local -a rails rails_cmds
  local -A rails3
  unset warning
  rails=()
  rails3=( c console db dbconsole g generate d destroy r runner s server )
  rails_cmds=( ${(kv)rails3} )
  while true ; do
    [[ -d $dir/app ]] && base=$dir && break
    [[ $dir = / ]] && break
    dir=$dir:h
  done
  if [[ -f $base/bin/rails ]] ; then # rails 4
    rails=( bin/rails )
  elif [[ -f $base/script/rails ]] ; then # rails 3
    rails=( rails )
  elif [[ -f $base/script/runner ]] && [[ $rails_cmds[(i)$1] -le $#rails_cmds ]] ; then # rails 2
    if (( $+rails3[$1] )) ; then
      rails=( $base/script/$rails3[$1] )
    else
      rails=( $base/script/$1 )
    fi
    shift
    rails=( ruby $rails )
  else
    if ! "$(gem list -i rails -v '>= 3')" ; then
      warning='Rails 2 being called'
      rails=( rails )
    else
      rails=( rails )
      if [[ $1 != -* ]] && [[ $1 != new ]] ; then
        warning='Implied Rails new'
        rails+=( new )
      fi
    fi
  fi
  (( $+base )) || warning="Couldn't determine Rails app directory (implied command: $rails)"
  if (( $+warning )) ; then
    warn $warning
    read -q 'proceed?Continue (y/N)? ' || return 1
  fi
  be $rails "$@"
}

zrails zrake zc zr() {
  local -a cmd
  cmd=( ${0#z} "$@" )
  if [[ -e .zeus.sock ]] ; then
    cmd=( zeus $cmd[1,-1] )
    [[ $0 == zrails ]] && cmd[2]=()
  else
    [[ $0 == z? ]] && cmd[1]=(rails $cmd[1])
  fi
  $cmd
}

# global aliases
alias -g L='| less'
alias -g LS='|& less -S'
alias -g LS1='| less -S'

(( UID )) && alias lvm='sudo lvm'

(( $+commands[certutil] )) && alias c-cert="certutil -d sql:$HOME/.pki/nssdb"
(( $+commands[pk12util] )) && alias c-pk12="pk12util -d sql:$HOME/.pki/nssdb"

(( $+commands[myip] )) || myip () { curl 'http://benizi.com/ip?raw=1' }

(( $+commands[colorizediff-stdin.pl] )) && diffy () {
  diff -ur "$@" | colorizediff-stdin.pl --files
}
(( $+INOSX )) && alias pf='ps aux' || alias pf='ps -ef'
alias pfg='pf | grep'
if [[ $commands[alpine] != /usr/local/bin/alpine ]] ; then
  (( $+commands[alpine-svn] )) && alias alpine='titlep ALPINE ; alpine-svn -bail -p $PINERC'
fi
(( $+commands[parallel] )) && pvim () {
  parallel -uXj1 vim "$@"
  stty --file $TTY sane
}

vimrecover () {
  local l s just_list
  unset just_list
  local -a lines extra
  local -A swapped
  (( $#argv )) && just_list=true
  for l in ~/.vim-tmp/%*.sw?(N.) ; do
    extra=()
    s=${l:t:r:gs.[%]./.}
    pid=$(perl -Mbytes -nwe 'BEGIN { $/ = \2; } print unpack s => $_ if 13..13' $l)
    if kill -0 $pid 2>/dev/null ; then
      (( $+just_list )) && extra+=( "[PID:$pid still running]" ) || continue
    fi
    if (( $+swapped[$s] )) ; then
      (( $+just_list )) && extra+=( "[already seen]" ) || continue
    fi
    if (( $+just_list )) ; then
      extra=( $s $extra )
      lines+=( ${(pj:\t:)extra} )
    else
      v +'map q :qa<CR>' $s || break
    fi
    swapped+=( $s 1 )
  done
  (( $+commands[tabulate.pl] )) && extra=( tabulate.pl ) || extra=( cat )
  (( $+just_list )) && print -rl - $lines | $extra
}

alias nacroread='acroread -openInNewWindow'
alias noagent='env -u SSH_AGENT_PID -u SSH_AUTH_SOCK'
alias ssh-noagent='noagent ssh'
alias hidessh='env -u SSH_CLIENT -u SSH_CONNECTION -u SSH_TTY'
alias noproxy='env -u auto_proxy -u http_proxy -u socks_proxy'
alias with-depot='PATH=${HOME}/bin/depot_tools:${PATH}'
alias wget-cookies='wget --load-cookies $MOZ5PROF/cookies.txt'
alias wget-fakeit="wget -U 'Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.8.1.4) Gecko/20070515 Firefox/2.0.0.4' --load-cookies \$MOZ5PROF/cookies.txt"
alias wcc='LC_ALL=C wc'
() {
local jar
for jar in /usr/share/java/saxon8.jar ; do
  if [[ -f $jar ]] ; then
    eval "xsltproc () { java -jar $jar - \"\$@\" }"
    break
  fi
done
}
alias z=' exec zsh'
if (( $+zsh_admin_mode )) ; then
  alias zu='sudo ZDOTDIR=$HOME zsh -l'
elif (( $+INOSX )) ; then
  alias zu='sudo su - root -c "ZDOTDIR=$HOME zsh -l"'
else
  alias zu='sudo su - -s =zsh -l'
fi

# fix completion for some alia
compdef _ssh ssh-noagent
compdef _precommand noagent hidessh noproxy with-depot with-status proxychains be
compdef _precommand repeat-status with-fresh-test-db in-btrfs-snapshot with-git-tag

alias Z=' exec sudo su -l bhaskell'
hash -d afs=/afs/cs.cmu.edu/user/bhaskell/protected
if [ -n "$INCYG" ] ; then
  alias sudo='runas /savecred /user:Administrator'
  alias -g '/?=/\?'
  hash -d c='/cygdrive/c'
  hash -d progfiles=~c/'Program Files'
else
  hash -d vdb=/var/db/pkg
fi

hash_if_exist () {
  local arg name dir remove=false
  unset name
  unset dir
  for arg ; do
    case $arg in
      -r) remove=true ;;
      *)
        if (( ! $+name )) ; then
          name=$arg
        elif (( ! $+dir )) ; then
          dir=$arg
        fi
        ;;
    esac
  done
  if [[ -d $dir ]] ; then
    hash -d $name=$dir
  elif $remove ; then
    hash -d $name=
  fi
}
hash_if_exist xkb /usr/share/X11/xkb
hash_if_exist \L /usr/local
hash_if_exist cellar /usr/local/Cellar
hash_if_exist g ~/git
hash_if_exist mac /mnt/mac/Users/bhaskell
hash_if_exist bac /mnt/mac/backups/bhaskell-hp/home/USC/bhaskell
hash_if_exist build /usr/src/packages
hash_if_exist spec /usr/src/packages/SPECS
hash_if_exist dwm ~$owner/hg/dwm

local _win_root _win_docset _win_inet _win_down _win_doc
[ -n "$INCYG" ] && _win_root=/cygdrive/c || _win_root=/mnt/acer2k3
[ -n "$INWIN7" ] && _win_docset=Users || _win_docset="Documents and Settings"
_win_inet=inetpub
[ -n "$INWIN7" ] && _win_down=Downloads || _win_down="My Documents/Downloads"
[ -n "$INWIN7" ] && _win_doc=Documents || _win_doc="My Documents"
hash -d benwin="$_win_root/$_win_docset/bhaskell"
hash -d allusers="$_win_root/$_win_docset/All Users"
hash -d inetpub="$_win_root/$_win_inet"
hash -d progfiles="$_win_root/Program Files"
[ -n "$INCYG" ] && hash -d colinux=~progfiles/coLinux || hash -d colinux=/opt/coLinux
hash -d downloads=~benwin/$_win_down
hash -d desktop=~benwin/Desktop
hash -d documents=~benwin/$_win_doc
hash -d chrome=~benwin/"Local Settings/Application Data/Google/Chrome"
hash -d quicklaunch=~benwin/"Application Data/Microsoft/Internet Explorer/Quick Launch"
hash -d log=/var/log

hash_if_exist alog /var/log/apache2
hash_if_exist ht /srv/www/htdocs

(( $+commands[xwininfo] )) && alias x-click-id='xwininfo | grep Window.id | cut -f4 -d" "'

if (( $+commands[ruby-build] )) ; then
  ruby-install rbfu-install () { ruby-build $1 $rbfu_dir/rubies/$1 "$@" }
  compdef _ruby-build rbfu-install ruby-install
fi

() {
local dir
local -a target
for dir in ${^zsh_dirs}/(#i)[[:alpha:]]*(N@-/) ; do
  [[ -e $dir ]] || continue
  target=( $dir(+A) )
  (( $#target )) || continue
  hash -d ${dir:t}=$target[1]
done
}

named-gem-directory () {
  local -a bcmd

  if [[ -e .zeus.sock ]]
  then bcmd=( zeus runner )
  elif [[ -f bin/rails ]] || [[ -f script/rails ]]
  then bcmd=( rails runner )
  else bcmd=( ruby -rubygems -rbundler/setup -e )
  fi

  case $1 in
    d) # /opt/ruby/.../gems/football -> football
      return 1 # unimplemented
      ;;
    n) # ~[football] -> /opt/ruby/.../gems/football
      local printcmd='gem "'$2'" ; puts Gem.loaded_specs["'$2'"].gem_dir'
      local -a gemdir
      gemdir=( $($bcmd $printcmd 2>/dev/null) )
      if (( $? )) ; then
        gemdir=( $(command ruby -rubygems -e $printcmd 2>/dev/null) )
        (( $? )) && return 1
      fi
      gemdir=( $gemdir[-1] )
      [[ -d $gemdir ]] || return 1
      [[ -z $gemdir ]] && return 1
      reply=( $gemdir )
      ;;
    c) # completion
      local expl
      local -a dirs
      dirs=( $($bcmd 'puts Gem.loaded_specs.keys.sort') )
      _wanted dynamic-dirs expl 'gem directory' compadd -S\] -a dirs
      ;;
    *) return 1 ;;
  esac
}
zsh_directory_name_functions+=( named-gem-directory )

cd.() { cd "$(pwd)" }
'cd.!'() { cd "$(pwd)"(+A) }
