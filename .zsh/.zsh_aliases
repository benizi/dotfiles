# keep some builtins out of history
alias fg=' fancytitle "$(fc -ln -1) (cont.) " ; builtin fg'
alias bg=' builtin bg'
alias rehash=' builtin rehash'

# keep shell history separate
() {
	local shell
	for shell in {ba,c,fi,k,tc,}sh ; do
		alias $shell='HISTFILE=$zsh_dirs[-1]/'"${shell}-history $shell"
	done
}

# no globbing for some commands
alias cave='noglob cave'
() {
local cmd
for cmd in $commands[(I)find*] ; do
	alias $cmd="noglob $cmd"
done
}
'find' () {
	integer i=${argv[(i)-*]}
	(( $+INOSX && ! $#argv )) && argv=( . )
	command find ${~argv[1,i-1]} "${(@)argv[i,-1]}"
}
alias ri='noglob ri'

alias chroot32='sudo su - -c "linux32 chroot /32 /bin/zsh -l"'
alias fcl='fc -t %Y-%m-%d@%H:%M:%S -nl 0 | less'

# various versions of 'ls'
() {
local lscolor="ls --color=auto"
(( $+INBSD || $+INSOL )) && lscolor=ls
# OSX: -G = colorize, -e = show ACLs, -O = show file flags
(( $+INOSX )) && lscolor="ls -GO"

alias l="$lscolor -trl"
alias ll="$lscolor -trlL"
alias lll="$lscolor -trl | less"
alias la="$lscolor -trlA"
alias lsd="$lscolor -trld"
alias lsda="$lscolor -trldA"
alias lso="$lscolor -tlA"
alias lss="$lscolor -Srl"
alias lsr="$lscolor -Sl"
alias lsl=l
}

# really-short list
alias g=git
alias gv=gvim
alias v=vim
alias vi=v
alias em='emacs -nw'
be () {
	local dir=$PWD
	local -a bundler
	bundler=()
	while true ; do
		[[ -f $dir/Gemfile ]] && bundler=( bundle exec ) && break
		[[ $dir = / ]] && break
		dir=$dir:h
	done
	$bundle "$@"
}

# global aliases
alias -g L='| less'
alias -g LS='| less -S'

(( UID )) && alias lvm='sudo lvm'

(( $+commands[certutil] )) && alias c-cert="certutil -d sql:$HOME/.pki/nssdb"
(( $+commands[pk12util] )) && alias c-pk12="pk12util -d sql:$HOME/.pki/nssdb"

(( $+commands[curl] )) && myip () { curl 'http://benizi.com/ip?raw=1' }

(( $+commands[colorizediff-stdin.pl] )) && diffy () {
	diff -ur "$@" | colorizediff-stdin.pl --files
}
alias pf='ps -ef'
alias pfg='ps -ef | grep'
if [[ $commands[alpine] != /usr/local/bin/alpine ]] ; then
	(( $+commands[alpine-svn] )) && alias alpine='titlep ALPINE ; alpine-svn -bail -p $PINERC'
fi
(( $+commands[parallel] )) && pvim () {
	parallel -uXj1 vim "$@"
	stty --file $TTY sane
}

vimrecover () {
	local l s
	local -A swapped
	for l in ~/.vim-tmp/%*.sw?(N.) ; do
		s=${l:t:r:gs.[%]./.}
		pid=$(perl -Mbytes -nwe 'BEGIN { $/ = \2; } print unpack s => $_ if 13..13' $l)
		kill -0 $pid 2>/dev/null && continue
		(( $+swapped[$s] )) && continue
		[[ -d $s ]] && continue
		[[ -e $s ]] || continue
		v +'map q :qa<CR>' $s || break
		swapped+=( $s 1 )
	done
}

alias nacroread='acroread -openInNewWindow'
alias noagent='env -u SSH_AGENT_PID -u SSH_AUTH_SOCK'
alias ssh-noagent='noagent ssh'
alias hidessh='env -u SSH_CLIENT -u SSH_CONNECTION -u SSH_TTY'
alias noproxy='env -u auto_proxy -u http_proxy -u socks_proxy'
alias with-depot='PATH=${HOME}/bin/depot_tools:${PATH}'
alias wget-cookies='wget --load-cookies $MOZ5PROF/cookies.txt'
alias wget-fakeit="wget -U 'Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.8.1.4) Gecko/20070515 Firefox/2.0.0.4' --load-cookies \$MOZ5PROF/cookies.txt"
alias wcc='LC_ALL=C wc'
() {
local jar
for jar in /usr/share/java/saxon8.jar ; do
	if [[ -f $jar ]] ; then
		eval "xsltproc () { java -jar $jar - \"\$@\" }"
		break
	fi
done
}
alias z=' exec zsh'
if (( $+commands[zu] )) ; then
	: noop
elif (( $+zsh_admin_mode )) ; then
	alias zu='sudo ZDOTDIR=$HOME zsh -l'
elif (( $+INOSX )) ; then
	alias zu='sudo su - root -c "ZDOTDIR=$HOME zsh -l"'
else
	alias zu='sudo su - -s =zsh -l'
fi

# fix completion for some alia
compdef _ssh ssh-noagent
compdef _precommand noagent hidessh noproxy with-depot with-status proxychains be

alias Z=' exec sudo su -l bhaskell'
hash -d afs=/afs/cs.cmu.edu/user/bhaskell/protected
if [ -n "$INCYG" ] ; then
	alias sudo='runas /savecred /user:Administrator'
	alias -g '/?=/\?'
	hash -d c='/cygdrive/c'
	hash -d progfiles=~c/'Program Files'
else
	hash -d vdb=/var/db/pkg
fi

hash_if_exist () {
	local arg name dir remove=false
	unset name
	unset dir
	for arg ; do
		case $arg in
			-r) remove=true ;;
			*)
				if (( ! $+name )) ; then
					name=$arg
				elif (( ! $+dir )) ; then
					dir=$arg
				fi
				;;
		esac
	done
	if [[ -d $dir ]] ; then
		hash -d $name=$dir
	elif $remove ; then
		hash -d $name=
	fi
}
hash_if_exist xkb /usr/share/X11/xkb
hash_if_exist \L /usr/local
hash_if_exist cellar /usr/local/Cellar
hash_if_exist g ~/git
hash_if_exist mac /mnt/mac/Users/bhaskell
hash_if_exist bac /mnt/mac/backups/bhaskell-hp/home/USC/bhaskell
hash_if_exist build /usr/src/packages
hash_if_exist spec /usr/src/packages/SPECS

local _win_root _win_docset _win_inet _win_down _win_doc
[ -n "$INCYG" ] && _win_root=/cygdrive/c || _win_root=/mnt/acer2k3
[ -n "$INWIN7" ] && _win_docset=Users || _win_docset="Documents and Settings"
_win_inet=inetpub
[ -n "$INWIN7" ] && _win_down=Downloads || _win_down="My Documents/Downloads"
[ -n "$INWIN7" ] && _win_doc=Documents || _win_doc="My Documents"
hash -d benwin="$_win_root/$_win_docset/bhaskell"
hash -d allusers="$_win_root/$_win_docset/All Users"
hash -d inetpub="$_win_root/$_win_inet"
hash -d progfiles="$_win_root/Program Files"
[ -n "$INCYG" ] && hash -d colinux=~progfiles/coLinux || hash -d colinux=/opt/coLinux
hash -d downloads=~benwin/$_win_down
hash -d desktop=~benwin/Desktop
hash -d documents=~benwin/$_win_doc
hash -d chrome=~benwin/"Local Settings/Application Data/Google/Chrome"
hash -d quicklaunch=~benwin/"Application Data/Microsoft/Internet Explorer/Quick Launch"
hash -d log=/var/log

hash_if_exist alog /var/log/apache2
hash_if_exist ht /srv/www/htdocs

(( $+commands[xwininfo] )) && alias x-click-id='xwininfo | grep Window.id | cut -f4 -d" "'

if (( $+functions[rbenv] )) ; then
	setup_rbenv_directory_aliases () {
		local ver="$(rbenv version-name)"
		case $ver in
			system) ;;
			*)
				hash_if_exist -r rb ~/.rbenv/versions/$ver
				hash_if_exist -r gem ~/.rbenv/versions/$ver/lib/ruby/gems/*/gems(N[1])
				;;
		esac
	}
	setup_rbenv_directory_aliases
	chpwd_functions+=( setup_rbenv_directory_aliases )
else
	setup_rbenv () {
		(( $+commands[git] )) || { warn "Needs git" ; return }
		mkdir -p ~/git/
		git clone git://github.com/sstephenson/rbenv.git ~/.rbenv
		local rbuild=~/git/ruby-build
		git clone git://github.com/sstephenson/ruby-build.git $rbuild
		pushd $rbuild
		PREFIX=~ sh install.sh
		popd
	}
	command_not_found_handlers+=( rbenv_not_found_handler )
	rbenv_not_found_handler () {
		[[ $1 = rbenv ]] || return 1
		warn "rbenv is not installed. Run setup_rbenv to install."
		print -z setup_rbenv
	}
fi

() {
local dir
local -a target
for dir in ${^zsh_dirs}/(#i)[[:alpha:]]*(N@-/) ; do
	[[ -e $dir ]] || continue
	target=( $dir(+A) )
	(( $#target )) || continue
	hash -d ${dir:t}=$target[1]
done
}
