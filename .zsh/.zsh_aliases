# keep some builtins out of history
alias fg=' fancytitle "$(fc -ln -1) (cont.) " ; builtin fg'
alias bg=' builtin bg'
alias rehash=' builtin rehash'

# keep shell history separate
() {
  local shell
  for shell in {ba,c,fi,k,tc,}sh ; do
    alias $shell='HISTFILE=$zsh_dirs[-1]/'"${shell}-history $shell"
  done
}

# no globbing for some commands
alias cave='noglob cave'
() {
local cmd
for cmd in $commands[(I)find*] ack ; do
  alias $cmd="noglob $cmd"
done
}
'find' () {
  integer i=${argv[(i)-*]}
  (( $+INOSX && ! $#argv )) && [[ $0 = find ]] && argv=( . )
  command $0 ${~argv[1,i-1]} "${(@)argv[i,-1]}"
}

'ack'() {
  local -i i
  for (( i=1; i<$#argv; i++ )) ; do
    [[ $argv[i] == -* ]] && continue
    break
  done
  ((i++))
  command $0 "${(@)argv[1,i-1]}" ${~argv[i,-1]}
}

ack-app() {
  local -a cmd xargs
  [[ -e .zeus.sock ]] && cmd=( zeus ) || cmd=( rails )
  cmd+=( r 'puts $:.select { |d| Dir.exists?(d) }' )
  xargs=( xargs )
  (( $+commands[ack] )) && xargs+=( ack ) || xargs+=( grep -r )
  $cmd | $xargs "$@"
}

alias ri='noglob ri'

alias chroot32='sudo su - -c "linux32 chroot /32 /bin/zsh -l"'
alias fcl='fc -t %Y-%m-%d@%H:%M:%S -nl 0 | less'

# various versions of 'ls'
() {
local lscolor="ls --color=auto"
(( $+INBSD || $+INSOL )) && lscolor=ls
# OSX: -G = colorize, -e = show ACLs, -O = show file flags
(( $+INOSX )) && lscolor="ls -GO"

alias ll="$lscolor -trl"
alias l="ll -A"
alias la=l
alias lsd="ll -d"
alias lss="$lscolor -Srl"
alias lsr="$lscolor -Sl"
}

# really-short list
alias g=git
alias gv=gvim
alias v=vim
alias vi=v

be cap rake rspec ruby cucumber () {
  local dir=$PWD
  local -a bundle
  bundle=()
  while true ; do
    [[ -f $dir/Gemfile ]] && bundle=( bundle exec ) && break
    [[ $dir = / ]] && break
    dir=$dir:h
  done
  [[ $bundle[1] == bundle ]] && (( ! $+commands[bundle] )) && bundle=()
  [[ $0 == be ]] || bundle+=( $0 )
  command $bundle "$@"
}

cuke() {
  local flag logdir logdate=$(date +%Y.%m.%d.%H%M%S) retry maxretry=3 doretry ret
  local -a args
  logdir=${cuke_logs:-log}
  unset doretry
  while getopts gr flag ; do
    case "$flag" in
      g)
        if [[ "$(git rev-parse --is-inside-work-tree 2>/dev/null)" = true ]]
        then logdir+=/"$(git rev-parse HEAD 2>/dev/null || echo unknown)"
        fi
        ;;
      r)
        doretry=true
        ;;
    esac
  done
  (( OPTIND )) && shift $(( OPTIND - 1 ))
  local log=$logdir/${cuke_prefix:+$cuke_prefix.}cucumber.$logdate.log
  [[ -d $logdir ]] || {
    [[ $logdir = /* ]] || warn "Creating log directory: $logdir"
    mkdir -p $logdir
  }
  local retrylog=$(mktemp -t cucumber.retry.XXXXXXXX)
  setopt localtraps
  trap "[[ -n \"$retrylog\" ]] && rm -f \"$retrylog\"" INT QUIT KILL TERM EXIT
  for (( retry=0 ; retry < maxretry ; retry++ )) ; do
    args=( -o $log )
    (( $+doretry )) && args+=( -f rerun -o $retrylog )
    args+=( -f pretty )
    args+=( "$@" )
    if (( retry )) ; then
      warn "Retrying failures"
      args+=( $(<$retrylog) )
    fi
    if-able cucumber $args
    ret=$?
    if (( $+doretry ))
    then [[ ! -s $retrylog ]] && break
    else break
    fi
  done
  return ret
}

rcop() {
  if executable rubocop
  then be rubocop "$@"
  else true
  fi
}

run-tests() {
  local ret
  (
    [[ -n "$skip" ]] && ${=skip} () { true }
    bundle &&
    rcop &&
    rspec $@ &&
    cuke_prefix=run-tests cuke -r
  )
  ret=$?
  git --no-pager log --decorate --no-walk 2>/dev/null
  return ret
}

push-upstream() {
  # push to upstream, setting it up if needed
  local -a args
  local branch=${1:-"$(git branch | awk '/^\*/ { print $2 }')"}
  if ! git rev-parse $branch@{upstream} &> /dev/null ; then
    local remote=$(git remote | sed 1q)
    args=( -u $remote $branch )
  fi
  setopt local_options xtrace
  git push ${dry+-n} $args
}

rpush () { run-tests && push-upstream }

wipspec() {
  if (( $+commands[ack] )) && ! ack 'wip:|:wip' spec | grep -q . ; then
    warn "No wip specs"
    return 0
  fi

  if-able rspec -t @wip "${@:-spec}"
}

wipcuke() {
  if (( $+commands[ack] )) && ! ack @wip spec/features(N) features(N) | grep -q . ; then
    warn "No wip cukes"
    return 0
  fi

  local cfg=config/cucumber.yml
  local -a args
  if [[ -f $cfg ]] && grep -q '^wip:' $cfg
  then args=( -p wip )
  else args=( -t @wip )
  fi

  if-able cucumber $args "$@"
}

wipit() { wipspec "$@" && wipcuke "$@" }

executable() {
  (( $+commands[$1] || $+aliases[$1] || $+functions[$1] || $+builtins[$1] ))
}

if-able() {
  if executable $1
  then "$@"
  else true
  fi
}

rails () {
  local base dir=$PWD warning
  local -a rails rails_cmds
  local -A rails3
  unset warning
  rails=()
  rails3=( c console db dbconsole g generate d destroy r runner s server )
  rails_cmds=( ${(kv)rails3} )
  while true ; do
    [[ -d $dir/app ]] && base=$dir && break
    [[ $dir = / ]] && break
    dir=$dir:h
  done
  if [[ -f $base/bin/rails ]] ; then # rails 4
    rails=( bin/rails )
  elif [[ -f $base/script/rails ]] ; then # rails 3
    rails=( rails )
  elif [[ -f $base/script/runner ]] && [[ $rails_cmds[(i)$1] -le $#rails_cmds ]] ; then # rails 2
    if (( $+rails3[$1] )) ; then
      rails=( $base/script/$rails3[$1] )
    else
      rails=( $base/script/$1 )
    fi
    shift
    rails=( ruby $rails )
  else
    if ! "$(gem list -i rails -v '>= 3')" ; then
      warning='Rails 2 being called'
      rails=( rails )
    else
      rails=( rails )
      if [[ $1 != -* ]] && [[ $1 != new ]] ; then
        warning='Implied Rails new'
        rails+=( new )
      fi
    fi
  fi
  (( $+base )) || warning="Couldn't determine Rails app directory (implied command: $rails)"
  if (( $+warning )) ; then
    warn $warning
    read -q 'proceed?Continue (y/N)? ' || return 1
  fi
  be $rails "$@"
}

zrails zrake() {
  local -a cmd
  cmd=( ${0#z} "$@" )
  if [[ -e .zeus.sock ]] ; then
    cmd=( zeus $cmd[1,-1] )
    [[ $0 == zrails ]] && cmd[2]=()
  fi
  $cmd
}

# global aliases
alias -g L='| less'
alias -g LS='|& less -S'
alias -g LS1='| less -S'

(( UID )) && alias lvm='sudo lvm'

(( $+commands[certutil] )) && alias c-cert="certutil -d sql:$HOME/.pki/nssdb"
(( $+commands[pk12util] )) && alias c-pk12="pk12util -d sql:$HOME/.pki/nssdb"

(( $+commands[myip] )) || myip () { curl 'http://benizi.com/ip?raw=1' }

(( $+commands[colorizediff-stdin.pl] )) && diffy () {
  diff -ur "$@" | colorizediff-stdin.pl --files
}
(( $+INOSX )) && alias pf='ps aux' || alias pf='ps -ef'
alias pfg='pf | grep'
if [[ $commands[alpine] != /usr/local/bin/alpine ]] ; then
  (( $+commands[alpine-svn] )) && alias alpine='titlep ALPINE ; alpine-svn -bail -p $PINERC'
fi
(( $+commands[parallel] )) && pvim () {
  parallel -uXj1 vim "$@"
  stty --file $TTY sane
}

vimrecover () {
  local l s just_list
  unset just_list
  local -a lines extra
  local -A swapped
  (( $#argv )) && just_list=true
  for l in ~/.vim-tmp/%*.sw?(N.) ; do
    extra=()
    s=${l:t:r:gs.[%]./.}
    pid=$(perl -Mbytes -nwe 'BEGIN { $/ = \2; } print unpack s => $_ if 13..13' $l)
    if kill -0 $pid 2>/dev/null ; then
      (( $+just_list )) && extra+=( "[PID:$pid still running]" ) || continue
    fi
    if (( $+swapped[$s] )) ; then
      (( $+just_list )) && extra+=( "[already seen]" ) || continue
    fi
    if (( $+just_list )) ; then
      extra=( $s $extra )
      lines+=( ${(pj:\t:)extra} )
    else
      v +'map q :qa<CR>' $s || break
    fi
    swapped+=( $s 1 )
  done
  (( $+commands[tabulate.pl] )) && extra=( tabulate.pl ) || extra=( cat )
  (( $+just_list )) && print -rl - $lines | $extra
}

alias nacroread='acroread -openInNewWindow'
alias noagent='env -u SSH_AGENT_PID -u SSH_AUTH_SOCK'
alias ssh-noagent='noagent ssh'
alias hidessh='env -u SSH_CLIENT -u SSH_CONNECTION -u SSH_TTY'
alias noproxy='env -u auto_proxy -u http_proxy -u socks_proxy'
alias with-depot='PATH=${HOME}/bin/depot_tools:${PATH}'
alias wget-cookies='wget --load-cookies $MOZ5PROF/cookies.txt'
alias wget-fakeit="wget -U 'Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.8.1.4) Gecko/20070515 Firefox/2.0.0.4' --load-cookies \$MOZ5PROF/cookies.txt"
alias wcc='LC_ALL=C wc'
() {
local jar
for jar in /usr/share/java/saxon8.jar ; do
  if [[ -f $jar ]] ; then
    eval "xsltproc () { java -jar $jar - \"\$@\" }"
    break
  fi
done
}
alias z=' exec zsh'
if (( $+zsh_admin_mode )) ; then
  alias zu='sudo ZDOTDIR=$HOME zsh -l'
elif (( $+INOSX )) ; then
  alias zu='sudo su - root -c "ZDOTDIR=$HOME zsh -l"'
else
  alias zu='sudo su - -s =zsh -l'
fi

# fix completion for some alia
compdef _ssh ssh-noagent
compdef _precommand noagent hidessh noproxy with-depot with-status proxychains be
compdef _precommand repeat-status with-fresh-test-db in-btrfs-snapshot

alias Z=' exec sudo su -l bhaskell'
hash -d afs=/afs/cs.cmu.edu/user/bhaskell/protected
if [ -n "$INCYG" ] ; then
  alias sudo='runas /savecred /user:Administrator'
  alias -g '/?=/\?'
  hash -d c='/cygdrive/c'
  hash -d progfiles=~c/'Program Files'
else
  hash -d vdb=/var/db/pkg
fi

hash_if_exist () {
  local arg name dir remove=false
  unset name
  unset dir
  for arg ; do
    case $arg in
      -r) remove=true ;;
      *)
        if (( ! $+name )) ; then
          name=$arg
        elif (( ! $+dir )) ; then
          dir=$arg
        fi
        ;;
    esac
  done
  if [[ -d $dir ]] ; then
    hash -d $name=$dir
  elif $remove ; then
    hash -d $name=
  fi
}
hash_if_exist xkb /usr/share/X11/xkb
hash_if_exist \L /usr/local
hash_if_exist cellar /usr/local/Cellar
hash_if_exist g ~/git
hash_if_exist mac /mnt/mac/Users/bhaskell
hash_if_exist bac /mnt/mac/backups/bhaskell-hp/home/USC/bhaskell
hash_if_exist build /usr/src/packages
hash_if_exist spec /usr/src/packages/SPECS
hash_if_exist dwm ~$owner/hg/dwm

local _win_root _win_docset _win_inet _win_down _win_doc
[ -n "$INCYG" ] && _win_root=/cygdrive/c || _win_root=/mnt/acer2k3
[ -n "$INWIN7" ] && _win_docset=Users || _win_docset="Documents and Settings"
_win_inet=inetpub
[ -n "$INWIN7" ] && _win_down=Downloads || _win_down="My Documents/Downloads"
[ -n "$INWIN7" ] && _win_doc=Documents || _win_doc="My Documents"
hash -d benwin="$_win_root/$_win_docset/bhaskell"
hash -d allusers="$_win_root/$_win_docset/All Users"
hash -d inetpub="$_win_root/$_win_inet"
hash -d progfiles="$_win_root/Program Files"
[ -n "$INCYG" ] && hash -d colinux=~progfiles/coLinux || hash -d colinux=/opt/coLinux
hash -d downloads=~benwin/$_win_down
hash -d desktop=~benwin/Desktop
hash -d documents=~benwin/$_win_doc
hash -d chrome=~benwin/"Local Settings/Application Data/Google/Chrome"
hash -d quicklaunch=~benwin/"Application Data/Microsoft/Internet Explorer/Quick Launch"
hash -d log=/var/log

hash_if_exist alog /var/log/apache2
hash_if_exist ht /srv/www/htdocs

(( $+commands[xwininfo] )) && alias x-click-id='xwininfo | grep Window.id | cut -f4 -d" "'

setup_rbfu_directory_aliases () {
  hash_if_exist -r rb "${${path[(r)*rbfu/rubies/*]}:h}"
  hash_if_exist -r gem $GEM_HOME/gems
  hash_if_exist -r rdoc $GEM_HOME/doc
}

if (( $+commands[ruby-build] )) ; then
  ruby-install rbfu-install () { ruby-build $1 $rbfu_dir/rubies/$1 }
  compdef _ruby-build rbfu-install ruby-install
fi

rbfu-local () {
  (( $# )) || return 0
  echo ${1#@} > .ruby-version
  rbfu-env >&/dev/null
}
compdef _rbfu rbfu-local

ruby-manager-startup () {
  if (( $+functions[rbfu-env] )) ; then
    setup_rbfu_version () {
      local version
      if [[ -f .rbfu-version ]] || [[ -f .ruby-version ]] ; then
        rbfu-env &> /dev/null
      elif [[ -f .rvmrc ]] ; then
        version=${(f):-"$(<.rvmrc)"}
        [[ $version = rvm\ * ]] && version=${version#rvm }
        version=${version//.}
        rbfu-env @$version &> /dev/null
      fi
    }
    rbfu-env () {
      source rbfu "$@"
      setup_rbfu_directory_aliases
    }
    setup_rbfu_version
    setup_rbfu_directory_aliases
    chpwd_functions+=( setup_rbfu_version )
  elif (( $+functions[rbenv] )) ; then
    setup_rbenv_directory_aliases () {
      local ver="$(rbenv version-name)"
      case $ver in
        system) ;;
        *)
          hash_if_exist -r rb ~/.rbenv/versions/$ver
          hash_if_exist -r gem ~/.rbenv/versions/$ver/lib/ruby/gems/*/gems(N[1])
          hash_if_exist -r rdoc ~/.rbenv/versions/$ver/lib/ruby/gems/*/doc(N[1])
          ;;
      esac
    }
    setup_rbenv_directory_aliases
    chpwd_functions+=( setup_rbenv_directory_aliases )
  fi
}

ruby-manager-startup

() {
local dir
local -a target
for dir in ${^zsh_dirs}/(#i)[[:alpha:]]*(N@-/) ; do
  [[ -e $dir ]] || continue
  target=( $dir(+A) )
  (( $#target )) || continue
  hash -d ${dir:t}=$target[1]
done
}

named-gem-directory () {
  [[ $1 = d ]] && return 1
  local -a gemdir
  gemdir=( ${(f)"$(bundle show $2 2>&1)"} )
  (( $? )) && return 1
  gemdir=( $gemdir[-1] )
  [[ -d $gemdir ]] || return 1
  [[ -z $gemdir ]] && return 1
  reply=( $gemdir )
}
zsh_directory_name_functions+=( named-gem-directory )

alias cd.='cd "$(pwd)"'

typeset -a namedirs

load_namedirs() {
  local dir
  local -a target
  namedirs=( ${^zsh_dirs}/{,.}namedir(N/) )
  if (( ! $#namedirs )) ; then
    if (( ! $#argv )) ; then
      printf 'No namedir found in:\n' >&2
      printf '  %s\n' ${^zsh_dirs} >&2
    fi
    return 1
  fi
  for dir in ${^namedirs}/*(N@-/) ; do
    [[ -e $dir ]] || continue
    target=( $dir(:A) )
    (( $#target )) || continue
    hash -d ${dir:t}=$target[1]
  done
}

load_namedirs --quiet

with-fresh-test-db() {
  local testdb=$(date +test-db-%s) url ret dropdb=true
  ruby -rubygems -rdatabase_url -e 1 || return 1
  url="$(ruby -rubygems -rdatabase_url -ryaml -e 'f,n = ARGV ; puts DatabaseUrl.database_url(YAML.load_file(f)["test"].merge("database" => n))' config/database.yml $testdb)"
  (( $? )) && return 1
  printf 'DATABASE_URL='\''%s'\''\n' $url
  if printf 'Running migrations...' && DATABASE_URL=$url testdb=$testdb RAILS_ENV=test rake db:create db:migrate VERBOSE=false ; then
    printf ' Done.\n'
    DATABASE_URL=$url testdb=$testdb "${@:-$SHELL}"
  fi
  ret=$?
  [[ -n $keepdb ]] || (( ! $# )) && unset dropdb
  (( $+dropdb )) && sudo -i -u postgres dropdb $testdb && unset testdb
  (( $# )) && [[ -n $testdb ]] && printf 'testdb=%s\nDATABASE_URL='\''%s'\''\n' $testdb $url
  return ret
}

in-btrfs-snapshot() {
  local snapshot dir relative ret quit
  setopt localtraps trapsasync
  trap 'quit=true' INT QUIT
  if [[ -z $snapshot_base ]] ; then
    warn "Need to set snapshot_base to use $0"
    return 1
  fi
  snapshot=~/snapshot-$(date +%Y%m%d%H%M%S)
  dir=$(pwd)
  [[ $dir = $snapshot_base* ]] && relative=$snapshot${dir/$snapshot_base}
  btrfs subvolume snapshot $snapshot_base $snapshot || {
    warn "Snapshot failed $snapshot_base -> $snapshot"
    return 1
  }
  printf 'snapshot=%s\n' $snapshot
  pushd ${relative:-$snapshot}
  snapshot=$snapshot "${@:-$SHELL}"
  ret=$?
  popd
  (( $+keepsnap )) || sudo btrfs subvolume delete $snapshot
  return ret
}
