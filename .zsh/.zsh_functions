function colormsg () { C=${1-RED} ; shift ; print -l "${(P)C}$*${NOCOLOR}" }
function error () { colormsg RED $@ }
function title () { print "\e]2;$1\007" }
function titlep () { title "$1" ; NOTITLE=1 }
alias nl='nl -ha -ba -fa -nln'
function commafy () { perl -lpwe '@F=split/(\s+)/,$_,-1;for(@F){next if/\D/;1 while s/(?<=\d)(?=\d\d\d\b)/,/}$_=join"",@F' }
function humanfy () { perl -lpwe '@F=split/(\s+)/,$_,-1;for(@F){last if /[^\s\d]/; next if not s/^([+\-]?)(\d+(?:\.\d+)?)$/$2/; my $s = $1; my $l = int(log($_||1)/log(1024)); my $conv = "KMGTP"; if ($l > 0 and $l <= length $conv) { my $si=substr $conv, $l-1, 1; $_ /= 1024 ** $l; $_ = sprintf "%5.1f\e[%dm%s\e[0m", $_, 31+$l, $si; } else { $_ = sprintf "%5.1f", $_ } 1 while s/(?<=\d)(?=\d\d\d\b)/,/} $_=join"",@F' }
function hex () { perl -lpwe 's/(\d+)/sprintf"(dec)%d (hex)%x",$1,$1/e' }
function headline () { head -n -0 $argv | grep . | perl -lwe 'chomp(@l=<>); my $i = 0; while ($i < $#l) { next unless $l[$i]=~/==/ and ($i+2>$#l or $l[$i+2]=~/==/); splice @l, $i, 2, "@l[$i,$i+1]"; } continue { $i++; } print for @l' }
function count () { echo $#argv }
function countf () { perl -lwe '$a++for grep-f,@ARGV;print$a' $argv }
function with-size () { perl -lpwe '$_=join"\t",-s,$_' }
function with-time () { perl -lpwe '$_=join"\t",(stat)[9],$_' }
function epoch-to-localtime () { perl -lpwe 's.^(\d+)(?=\s|$).scalar localtime $1.e' }
function epoch-to-isotime () { perl -MPOSIX=strftime -lpwe 's.^(\d+)(?=\s|$).strftime "%Y-%m-%d\@%H:%M:%S%z", localtime $1.e' }
function with-time-human () { perl -lpwe '$_=join"\t",scalar(localtime((stat)[9])),$_' }
function total () { perl -lanwe '$t+=shift@F;END{$t||=0;print$t}' }
function running-avg () { perl -lapwe '$t+=$F[0];$_=($t/$.)."\t$_"' }
function running-total () { perl -lapwe '$t+=$F[0];$_="$t\t$_"' }
function total-size () { with-size | cut -f1 | total | commafy }
function sort-with-size () { with-size | sort -n }
function sort-by-size () { sort-with-size | cut -f2- }
function sort-with-time () { with-time | sort -n }
function sort-by-time () { sort-with-time | cut -f2- }
function factor-pretty () { factor $1 | perl -lanwe '@b=(shift @F); @x=(1); while (@F) { $f = shift @F; if ($f eq $b[-1]) { $x[-1]++; } else { push @b, $f; push @x, 1; } } print join " ", map { $b[$_].($x[$_] eq 1 ? "" : "^$x[$_]") } 0..$#b' }
function update-zsh () {
	pushd ~
	if [ -L .zshrc -o -L .zshenv ] ; then
		echo "Linked (no-op)"
	elif hg st -A .zshrc | grep -q . ; then
		echo "In HG (no-op)"
	else
		wget -O - http://benizi.com/zsh.tbz2 | tar -jxvf -
	fi
	popd
}
