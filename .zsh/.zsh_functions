function colormsg () { C=${1-RED} ; shift ; print -l "${(P)C}$*${NOCOLOR}" }
function error () { colormsg RED $@ }
function title () { print "\e]2;$1\007" }
function titlep () { title "$1" ; NOTITLE=1 }
alias nl='nl -ha -ba -fa -nln'
function count () { echo $#argv }
function countf () { perl -lwe '$a++for grep-f,@ARGV;print$a' $argv }
#alias countf="perl -lwe '\$a++for grep-f,@ARGV;print\$a'"
function total-size () { perl -lnwe '$t+=-s;END{$t||=0;1 while $t=~s/(?<=\d)(?=\d\d\d\b)/,/;print$t}' $argv }
function unmask () {
	EPPK=/etc/portage/package.keywords
	if grep "$1" $EPPK
	then echo Already unmasked
	else echo "$1" >> $EPPK
	fi
}
function ebuild-to-local () {
	PACK=$1
	shift
	while [ $# -gt 0 ] ; do
		case $1 in
			dry|DRY|--dry) DRY=yes ;;
		esac
		shift
	done
	case $PACK in
		/usr/portage/*) ;;
		*/*) PACK=/usr/portage/$PACK ;;
		*) PACK=(/usr/portage/*/$PACK)
			[ $#PACK != 1 ] && print -l "Multiple matches:" $PACK && return ;;
	esac
	EBUILDS=($PACK/$PACK:t-*.ebuild)
	if [ $#EBUILDS = 1 ] ; then
		echo only choice - $EBUILDS
	fi
	while [ $#EBUILDS != 1 ] ; do
		for i in {1..$#EBUILDS} ; echo $i: $EBUILDS[i]
		echo 0: cancel
		read "choice?Choice [$#EBUILDS]: "
		for l in "$choice" ; case "$l" in # for-case so it can 'break'
			'') choice=$#EBUILDS ; echo null ;;
			0) error "cancelled" ; return ;;
			<->) [ $choice -le $#EBUILDS ] && break ;&
			*) error "Should be a number from 0-$#EBUILDS" ; continue 2
		esac
		EBUILDS=($EBUILDS[choice])
		echo CHOSE $choice - $EBUILDS
	done
	FILES=($EBUILDS $PACK/files/*(N))
	ECHO=echo
	[ -z "$DRY" ] && ECHO=''
	unset allchoice
	for l in $FILES ; do
		unset skip
		LOCAL=$l:s./usr./usr/local
		D=$LOCAL:h
		if [ -f $LOCAL ] ; then
			while true ; do
				choice=${allchoice-`read "c?Overwrite $LOCAL [y/*y/N/*n/x=exit] ";echo "$c"`}
				case "$choice" in
					(#i)\*y*) allchoice=$choice ;&
					(#i)y*) error overwrote $LOCAL ; break ;;
					(#i)\*n*) allchoice=$choice ;&
					''|(#i)n*) error skipping $LOCAL ; skip=yes ; break ;;
					ex*|x*) error aborting ; return ;;
					*) error "Choose from *y/y/*n/n/x" ; unset choice ;;
				esac
			done
		fi
		[ -z "$skip" ] || continue
		[ -d $D ] || $ECHO mkdir -p $D
		$ECHO cp $l $D/
	done
}
