:{
let scriptIfExists filename = do
    opened <- Control.Exception.try $ (do
      handle <- System.IO.openFile filename System.IO.ReadMode
      text <- System.IO.hGetContents handle
      return text) :: IO (Either Control.Exception.SomeException String)
    case opened of
      Right _ -> return $ ":script " ++ filename
      _ -> return ""
:}
:def scriptIfExists scriptIfExists
:scriptIfExists .ghci.conf

-- Add :instack and :nostack to run cmds if(/not) under Stack. E.g.:
---- Set +t only if running under Stack
-- :instack :set +t
:{
let ifStack :: (Bool -> Bool) -> String -> IO String
    ifStack filter cmd = do
      env <- System.Environment.lookupEnv "STACK_EXE"
      let exists = case env of { Nothing -> False ; _ -> True }
      return (if filter exists then cmd else "")
    inStack = ifStack id
    noStack = ifStack not
:}
:def instack inStack
:def nostack noStack

:nostack :scriptIfExists .ghci.nostack
