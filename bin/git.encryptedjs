#!/usr/bin/env ruby

require 'base64'

def encrypting?
  !!(__FILE__ =~ /encrypt$/)
end

def contents
  @contents ||= $stdin.read
end

def lines
  @lines ||= contents.lines.to_a
end

def password
  `git config filter.encryptedjs.password || true`.chomp
end

def encrypted?
  !!((lines[0] || '') =~ /^benizi/)
end

def done?
  encrypting? == encrypted?
end

if done? || password.empty?
  # Already processed or no password
  $stdout.write(contents)
  exit
end

MARKER = '//OK'

def prep(contents)
  encrypting? ? mark(contents) : from_js_source(contents)
end

def mark(contents)
  [MARKER, contents].join("\n")
end

def from_js_source(contents)
  contents.lines.to_a[1..-2].map do |line|
    line.sub(/^"/, '').sub(/\\n" \+/, '')
  end.join
end

def find_salt(input)
  cipher = Base64.decode64(input)
  return if cipher.size * 2 < input.size
  marker = 'Salted__'
  return unless cipher.start_with?(marker)
  @salt = cipher[marker.size, 8].unpack("H*")[0].upcase
end

def dumpsalt(input, out)
  input.tap do
    return unless find_salt(input)
    out.puts("SALT=#{@salt}")
  end
end

def showsalt(input)
  dumpsalt(input, $stderr)
end

def putsalt(input)
  dumpsalt(input, $stdout)
end

def use_salt?
  encrypting? && ENV.has_key?('SALT')
end

def command
  op = encrypting? ? '-e' : '-d'
  salt = use_salt? ? %Q{ -S #{ENV['SALT']}} : ''
  %Q{openssl enc #{op} -a -blowfish -pass #{password}} + salt
end

def post(result)
  encrypting? ? to_js_source(result) : unmark(result)
end

def to_js_source(result)
  ret = []
  ret << 'benizi.source ='
  ret += result.lines.map { |line| %Q{"#{line.chomp}\\n" +} }
  ret << '"";'
  ret.map { |line| line + "\n" }.join
end

def unmark(result)
  first_line = result.lines.first.chomp
  abort "Bad decode (First line: #{first_line})" unless first_line == MARKER
  result.lines.drop(1).join
end

def process(input)
  IO.popen(command, 'r+') do |io|
    io.write input
    io.close_write
    io.read
  end
end

STAGES = %i[prep process post puts]

SALT_FNS = %i[showsalt putsalt]

def sym_list(s)
  String === s ? s.split(/\W+/).map(&:downcase).map(&:to_sym) : s
end

def setup_salt!(list)
  return unless ENV['SHOWSALT'] || (SALT_FNS & list).any?
  to_add = [:prep] + (encrypting? ? [:process] : []) + [:showsalt]
  to_find = Hash[to_add.reverse.each_cons(2).to_a]
  to_add.each do |s|
    next if list.include?(s)
    after = to_find[s]
    pos = list.find_index(after)
    list.insert(pos ? pos + 1 : 0, s)
  end
end

def stages
  list = sym_list(ENV['ONLY'] || STAGES)
  list << :puts if (STAGES & list).any? && !list.include?(:puts)
  setup_salt!(list)
  salt_fn = list.include?(:puts) ? :showsalt : :putsalt
  list.map! { |s| SALT_FNS.include?(s) ? salt_fn : s }
  list.uniq.select { |s| should_run?(s) }
end

def in?(var, stage, default = '')
  sym_list(ENV.fetch(var, default)).include?(stage.to_sym)
end

def should_run?(stage)
  !in?('SKIP', stage)
end

def run_stages(input)
  stages.reduce(input) { |ret, fn| send(fn, ret) }
end

run_stages(contents)
