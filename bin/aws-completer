#!/opt/virtenv/awscli/bin/python

import awscli.completer
import html
import re
import sys
import os

def first_sentence(doc):
  doc = doc.replace("\n", " ")
  m = re.search(r'<p>(?P<fs>.*?)(?:(?=\. )|(?=\.</p>))', doc)
  return m['fs'] if m else doc


def printc(cat, txt, desc=None):
  desc = desc or ""
  desc = desc.removeprefix("AWS ").removeprefix("Returns a ").replace(':', '\\:')
  desc = desc.removeprefix("Describes ")
  print(f"{cat}\t{txt}\t{desc}")


def name_arg(arg):
  return arg.startswith("Name=") or "Name=".startswith(arg)


def final_flag(args):
  n = len(args)
  flag_i = next(filter(lambda i: args[i].startswith("--"), reversed(range(n))), None)

  if not flag_i:
    return []

  flag, *rest = args[flag_i:]
  has_param = "=" in flag

  if has_param and rest:
    return []

  if has_param:
    prefix = flag[:1+flag.index("=")]
    return [(prefix[:-1], prefix)]

  all_filters = all(map(name_arg, rest))
  if (flag.startswith("--filter") and all_filters) or len(rest) <= 1:
    return [(flag, '')]

  return []


def main(args):
  c = awscli.completer.Completer()
  (cn, cc) = c._get_command(c.main_help, args)
  (sn, sc) = c._get_command(cc, args)
  flag_map = {}

  for (what, val) in [('cmd',cn),('subcmd',sn)]:
    if val:
      printc('cur', what, val)

  for (level, table) in [('subarg',sc),('cmdarg',cc),('awsarg',c.main_help)]:
    if not table:
      continue

    for arg, info in table.arg_table.items():
      cat = 'reqarg' if info.required else level
      txt = f"--{arg}"
      doc = first_sentence(info.documentation)
      flag_map[txt] = info

      printc(cat, txt, doc)

  if sn:
    level, table = None, None
  elif cn:
    level, table = 'subcmd', cc
  else:
    level, table = 'awscmd', c.main_help

  if table:
    for cmd, subcmd in table.command_table.items():
      svc = None
      if hasattr(subcmd, 'service_model'):
        svc = subcmd.service_model
      elif hasattr(subcmd, 'create_help_command'):
        svc = subcmd.create_help_command().obj

      doc = ""
      if svc and hasattr(svc, 'documentation'):
        doc = first_sentence(svc.documentation or f"({cmd}: empty docs)")

      printc(level, cmd, doc)

  for (flag, prefix) in final_flag(args):
    choices = []

    if flag == "--profile":
      choices += list(c.driver.session.available_profiles)
    elif flag in ["--filter", "--filters"] and flag in flag_map:
      info = flag_map[flag]
      names = re.findall(r'<li>\s*<p>\s*<code>([^<]+)', info.documentation)
      names = [html.unescape(x).replace(':', '\\\\:') for x in names]
      choices = sorted([f'Name={x}' for x in names])
    elif flag in flag_map:
      info = flag_map[flag]
      if info.choices:
        choices = list(info.choices)

    if choices:
      printc('cur', 'flag', flag)
      for choice in choices:
        printc('option', prefix + choice)

if __name__ == '__main__':
  main(sys.argv[1:])
