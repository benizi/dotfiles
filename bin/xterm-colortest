#!/usr/bin/perl
use strict;
use warnings;
use utf8;
use open qw/:std :utf8/;
use Encode 'decode_utf8';
$_ = do { my $v = eval { decode_utf8($_, Encode::FB_CROAK); }; $v // $_ } for @ARGV;
use Getopt::Long;
my @esc;
GetOptions(
	'text=s' => \(my $text = ''),
	'num!' => \(my $show_number),
	'escape|extra-escape=s@' => \@esc,
	'split=s' => \(my $split = chr 0x2502),
	'raw' => \(my $raw = 0),
	'square!' => \(my $square = 1),
	'list!' => \(my $list),
	'gray|grey!' => \(my $grey = 1),
	'stdin' => \(my $stdin = 0),
	'rgb' => \(my $rgb = 0),
	'88' => \(my $c88 = 0),
	'ramp!' => \(my $ramp_24bit),
) or die 'options';
$show_number //= 1-$square;
$ramp_24bit //= 1;
$list //= 1-$ramp_24bit;
chomp($text = do { undef local $/; <STDIN> }) if $stdin;
($show_number, $split) = (0, '') if $raw;
my $X = $text || 'X'; # ╬▛░▒▓█
$text ||= $X if $raw;
my @escapes = @esc ? @esc : qw/48;5;16 0;1 48;5;231;7/;

# by entheon, do whatever the hell you want with this file

for my $ba (@escapes) {
	my $c = sub { "\e[$ba;38;5;$_[0]m$_[1]\e[0m" };
	my $N = $c88 ? 4 : 6;
	if ($square) {
		my @rows;
		for (0..($N**3-1)) {
			my @rgb;
			my $n = $_;
			while (@rgb < 3) {
				unshift @rgb, $n % $N;
				$n = ($n-$rgb[0])/$N;
			}
			$_ = $_ ? ($_*40+55) : 0 for @rgb;
			my $txt = $rgb?sprintf("%02x%02x%02x",@rgb):$X;
			$txt = sprintf "{%3d=%s}", $_+16, $txt if $show_number;
			push @{$rows[int $_/$N]}, $c->($_+16, $txt);
		}
		if (!$rgb) {
			splice @{$rows[$#rows% $N]}, $N, 0, map @$_, pop @rows while @rows > $N;
			my $n = $c88 ? 4 : 3;
			my $n2 = $c88 ? 2 : 3;
			for (0..$#rows) {
				my $R = $rows[$_];
				my @n = $_*$n..$_*$n+$n-1;
				my @n2 = $_*$n2..$_*$n2+$n2-1;
				splice @$R, 0, 0, map $_<16?$c->($_, $X):" ", @n;
				splice @$R, 0+@$R, 0, map $_<8*($N-3)?$c->($_+($c88?80:232), $X):" ", @n2;
			}
		}
		print @$_, "\n" for @rows;
	} elsif ($list) {
		for (0..($grey?($c88?87:255):($c88?79:231))) {
			print $c->($_, join '', grep($show_number, $_), $text, $split);
		}
	}
	if ($ramp_24bit) {
		for (qw/100 110 010 011 001 101/) {
			my $mult = [split //];
			for my $n (grep !($_ % 6), 1..255) {
				printf "\e[38;2;%d;%d;%dm%s\e[0m", (map $n * $_, @$mult), $X;
			}
			print "\n";
		}
		last unless $square or $list;
	}
}
print "\n" unless $square;
