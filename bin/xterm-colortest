#!/usr/bin/perl

=begin

Another version:

perl -CDS -we 'for my $r (map +($_) x 3, 0..16) { print "\n"; for my $g (0,3,5,7,9,11..16) { for my $b (0..16) { printf "\e[38;2;%d;%d;%dm%s", abs(16*$r-1), abs(16*$g-1), abs(16*$b-1), "\x{2588}" } } }'
=cut

use strict;
use warnings;
use utf8;
use open qw/:std :utf8/;
use Encode 'decode_utf8';
use POSIX 'ceil';
$_ = do { my $v = eval { decode_utf8($_, Encode::FB_CROAK); }; $v // $_ } for @ARGV;

sub esc {
	sprintf '\e[%sm', join ';', @_
}

sub indexed_ansi {
	my ($i, $bg) = @_;
	esc $i + ($bg ? 40 : 30)
}

sub indexed_256 {
	my ($i, $bg) = @_;
	esc $bg ? 48 : 38, 5, $i
}

sub COLORS () { 0 + ($ENV{COLORS} || 256) }
sub HI () { COLORS == 256 }

my @available = (256, 88);
if (!grep $_ == COLORS, @available) {
	my $set = '{'.join(', ', @available).'}';
	die "Colors should be one of $set\nWas: ".COLORS."\n";
}

my @low = (
	[ 0x00, 0x00, 0x00 ],
	[ 0xcd, 0x00, 0x00 ],
	[ 0x00, 0xcd, 0x00 ],
	[ 0xcd, 0xcd, 0x00 ],
	# ? xterm 256-color : rxvt 88-color
	HI ? [ 0x00, 0x00, 0xee ] : [ 0x00, 0x00, 0xcd ],
	[ 0xcd, 0x00, 0xcd ],
	[ 0x00, 0xcd, 0xcd ],
	[ 0xe5, 0xe5, 0xe5 ],
	HI ? [ 0x7f, 0x7f, 0x7f ] : [ 0x4d, 0x4d, 0x4d ],
	[ 0xff, 0x00, 0x00 ],
	[ 0x00, 0xff, 0x00 ],
	[ 0xff, 0xff, 0x00 ],
	HI ? [ 0x5c, 0x5c, 0xff ] : [ 0x00, 0x00, 0xff ],
	[ 0xff, 0x00, 0xff ],
	[ 0x00, 0xff, 0xff ],
	[ 0xff, 0xff, 0xff ],
);

sub max_color { COLORS - 1 }
sub cube_start () { 16 }
sub grey_start () { HI ? 232 : 80 }
sub levels {
	HI
	? [0, map 95 + 40 * $_, 0..4]
	: [0x00, 0x8b, 0xcd, 0xff]
}
sub grey88 () { 23.18181818 }
sub grey_level {
	my $i = shift;
	HI
	? (8 + 10 * $i)
	: int((2 + $i + ($i > 0)) * grey88)
}

sub rgb_to_hex {
	sprintf "#%02x%02x%02x", @_
}

sub combos {
	my @ret = ([]);
	for (1..3) {
		my @newret;
		for my $v (@{levels()}) {
			push @newret, map [$v, @$_], @ret;
		}
		@ret = @newret;
	}
	[@ret]
}

sub indexed_rgb {
	my $i = shift;
	($i >= grey_start) ? (grey_level($i - grey_start)) x 3 :
	($i < cube_start) ? @{$low[$i]} :
	@{combos()->[$i - cube_start]}
}

my $show_number = 0;

sub Xfmt { $show_number ? '%3d' : '%s' }
sub X { $show_number ? shift : 'X' }

sub ramp {
	my ($fgbg, $hue) = @_;
	(map {
		my $n = $_;
		my @rgb = map $n * $_, split //, $hue;
		sprintf "\e[%d;2;%d;%d;%dm".Xfmt."\e[0m", $fgbg, @rgb, X $n;
	} grep !($_ % 6), 1..max_color), "\n"
}

sub grid {
	my $esc = shift;
	my $entry = sub {
		my $n = shift;
		sprintf "\e[%s;38;5;%dm".Xfmt."\e[0m", $esc, $n, X $n;
	};
	my @rows;
	my @ret;
	for my $batch (map [map $entry->($_), @$_],
		[0..cube_start-1],
		[cube_start..grey_start-1],
		[grey_start..max_color],
	) {
		@rows = map [], 1..@{levels()} unless @rows;
		my $large = @$batch > @rows * @rows;
		my $splice = $large ? 0 + @rows : ceil(@$batch / @rows);
		my $i = 0;
		while (@$batch) {
			push @{$rows[$i % @rows]}, splice @$batch, 0, $splice;
			$i++;
		}
		if ($show_number) {
			push @ret, map join("", @$_).($large ? "\n" : ""), @rows;
			push @ret, "\n" unless $large;
			@rows = ();
		} else {
			my ($first, $last) = @rows[0, -1];
			push @$last, ($entry->(0)) x (@$first - @$last) if @$last < @$first;
		}
	}
	@ret ? @ret : map join("", @$_)."\n", @rows
}

my $ramp = 0;
my $show_help = 0;

@ARGV = grep {!(
	(/--ramp/) ? ($ramp = 1) :
	(/--num/) ? ($show_number = 1) :
	(/--help/) ? ($show_help = 1) :
0)} @ARGV;

sub usage {
	(my $name = $0) =~ s{^.*/}{};
	warn <<HELP;
Usage: $name [options]

Options:
  --num     Print numbers inside colors
  --ramp    Print a 24-bit color ramp
  --help    Show this help
HELP
	warn "$_\n" for @_;
	exit @_ ? 1 : 0;
}

usage "Unknown argument".(@ARGV == 1 ? "" : "s").":", @ARGV if @ARGV;
usage if $show_help;

if ($ramp or $show_number) {
	print grid $_ for qw/48;5;16 0;1 48;5;231;7/;
	for my $fgbg (38, 48) {
		for my $bits (qw/100 110 010 011 001 101/) {
			print ramp $fgbg, $bits if $ramp;
		}
	}
} else {
	print rgb_to_hex indexed_rgb $_ and print "\n" for 0..max_color;
}
