#!/usr/bin/env ruby
require 'optparse'
require 'open3'
require 'socket'
require 'tempfile'
opts = {
	:mode => $0 =~ /serv/ ? :server : :print,
	:port => 24800,
	:host => Socket.gethostname,
	:include_self => true,
}
parser = OptionParser.new do |o|
	o.on('-u','--up') { opts[:up] = true }
	o.on('-d','--down') { opts[:down] = true }
	o.on('-l','--left') { opts[:left] = true }
	o.on('-r','--right') { opts[:right] = true }
	o.on('-v','--vertical') { opts[:up] = true ; opts[:down] = true }
	o.on('--dry-run') { opts[:dry] = true }
	o.on('--runit','--server') { opts[:mode] = :server }
	o.on('--killer') { opts[:mode] = :killer }
end
parser.parse!(ARGV)

host_info = ARGV.dup

hosts = []
screens = []
links = {}
alia = Hash.new { |h,k| h[k] = [] }
screen_opts = Hash.new { |h,k| h[k] = Hash.new { |hh,kk| hh[kk] = {} } }

host_info.each do |info|
	host, host_opts = info.split(':')
	host, *other_names = host.split('=')

	if host_opts
		screen_opts[host] ||= {}
		host_opts.split(',').each do |opt|
			case opt
			when 'mac'
				# swap positions of {Win}+{Alt} and {Option}+{Command}
				screen_opts[host]['alt'] = 'super'
				screen_opts[host]['super'] = 'alt'
			when 'macmac'
				# {Ctrl}+{Win}+{Alt} act as {Command}+{Alt}+{Option}
				screen_opts[host]['ctrl'] = 'super'
				screen_opts[host]['super'] = 'alt'
				screen_opts[host]['alt'] = 'ctrl'
			else
				warn "Unknown option: #{opt}"
			end
		end
	end

	hosts << host
	other_names.each { |a| alia[host] << a }
end
hosts << opts[:host] if opts[:include_self] and not hosts.include?(opts[:host])

if ![:up, :down, :left, :right].detect { |dir| opts[dir] }
	opts[:left] = true
	opts[:right] = true
end

(0...hosts.size).each do |i|
	this = hosts[i]
	screens << this
	links[this] = {}
	[
		[ -1, :left ],
		[ -1, :up ],
		[  1, :right ],
		[  1, :down ],
	].each do |add, dir|
		links[this][dir] = hosts[(i + add) % hosts.size] if opts[dir]
	end
end

class String
	def indent
		self.lines.map { |l| "\t" + l }.join('')
	end
end

def section(name, text)
	<<SECTION
section: #{name}
#{text.indent}
end
SECTION
end

def config(screens, screen_opts, links, alia)
	cfg = ''
	cfg += section 'screens', screens.map { |s|
		opt = screen_opts[s]
		"#{s}:" +
			case opt.size
			when 0
				""
			else
				"\n" + (opt.map { |k,v| "#{k} = #{v}" }.join("\n")).indent
			end
	}.join("\n")

	cfg += section 'links', links.map { |screen,to|
		screen + ":\n" + to.map { |dir,what| "#{dir} = #{what}" }.join("\n").indent
	}.join("\n")

	if alia.detect { |k,v| !v.empty? }
		cfg += section 'aliases', alia.map { |host,al|
			host + ":\n" + al.join("\n").indent
		}.join("\n")
	end

	cfg
end

def spawn_ssh(server, port)
	fork do
		system("ssh #{server} synergyk --killer")
		trap('INT') { exit }
		system("ssh -o Ciphers=blowfish-cbc -NR #{port}:localhost:#{port} #{server} 'DISPLAY=:0 synergyc -f localhost'")
	end
end

def spawn_synergy(config_text)
	fork do
		trap('INT') { exit }
		#system('xclip < /dev/null')
		Tempfile.open(['synergy','.conf']) do |file|
			file.write(config_text)
			file.close
			system("cat #{file.path}")
			system("synergys -f -c #{file.path}")
		end
	end
end

config_text = config(screens, screen_opts, links, alia)
case opts[:mode]
when :print
	print config_text
when :killer
	[ "sudo lsof -Fp -Pni :#{opts[:port]}", "sudo lsof -Fp -c synergyc" ].each do |cmd|
		pids = []
		IO.popen(cmd).lines.each do |line|
			next unless line =~ /^p(\d+)/
			pids << $1.to_i
		end
		next if pids.empty?
		Process.kill('TERM', *pids)
		puts "Killed #{pids.join(', ')}"
		sleep(1)
	end
when :server
	pids = []
	screens.each do |host,host_opts|
		next if host == opts[:host]
		pids << spawn_ssh(host, opts[:port])
	end
	pids << spawn_synergy(config_text)
	$shutdown = false
	trap('INT') { $shutdown = Time.now }
	while true
		if pid = Process.wait(-1, Process::WUNTRACED | Process::WNOHANG)
			pids.delete(pid)
		end
		exit if pids.empty?
		next unless $shutdown
		next unless Time.now - $shutdown > 10
		abort "Couldn't kill: #{pids.map(&:to_s).join(' ')}"
	end
end
