#!/usr/bin/env ruby
#
# Parse a URL for the following:
# 1. Git config `url.{{substitution}}.insteadOf` options
# 2. SSH config alias/expansion

$:.unshift(File.expand_path(File.dirname(__FILE__)))
require 'benizi-uri'

def insteadofs
  git = %w[git config -z --get-regexp ^url\..*\.insteadof$]
  IO.popen(git, 'rb').read.split("\0").map do |e|
    e.split("\n", 2)
  end.map do |(replacement,prefix)|
    [prefix, replacement.sub(/\Aurl\./,'').sub(/\.insteadof\Z/,'')]
  end.sort_by { |(prefix,_)| -prefix.size }
end

def subinsteadofs(url)
  sub = insteadofs.find { |(pre,_)| url.start_with?(pre) } || ['', '']
  prefix, rep = *sub
  rep + url[prefix.size..-1]
end

def sshparams(host)
  ssh = %W[ssh -T -G #{host}]
  params = {hostname: nil, user: nil, port: nil}
  IO.popen(ssh).readlines.map do |line|
    k, v = line.chomp.split(/\s/, 2)
    s = k.to_sym
    next unless params.has_key?(s)
    params[s] = v
  end
  params
end

def fixupssh(url)
  url = URI(url)
  # Bare hostname (e.g., `github.com`):
  url = URI("ssh://#{url.path}") if url.path and not url.scheme
  # Short hostname + path (e.g., `gh:benizi/dotfiles`):
  url = URI("ssh://#{url.scheme}/#{url.opaque}") if url.opaque
  return url unless url.scheme == "ssh"
  sshparams(url.host).each { |(k,v)| url.send("#{k}=", v) if v }
  url
end

def input
  ARGV.empty? ? STDIN.readlines.map(&:chomp) : ARGV
end

puts input.map { |url| fixupssh(subinsteadofs(url)) }
