#!/bin/sh
set -e

helpmsg() {
  cat >&2 <<'USAGE'
Usage:
  Fork or create repository:
    git [config] fork [flags]
  Debug `git-fork` script:
    git [config] fork (--|--debug) command [args]

Flags:
    -h Show usage

Config:
    Configuration is through `github.{{option}}` values.
    To set for one command:
      git -c github.{{option}}={{value}} fork ...
    To set for all runs:
      git config github.{{option}} {{value}}

Configuration options:

  Upstream repo information:
    upstream - GitHub `{{user}}/{{repo}}` for source
    upuser (?) - `{{user}}` portion of source repository
    uprepo (?) - `{{repo}}` portion of source repository

  Fork/new repository information:
    user (*) - `{{user}}` portion of new/forked repository
    repo - `{{repo}}` portion of new/forked repository

  Script options:
    token (*) - GitHub API token
    dry - activates "dry run" mode (if non-empty)

  (*): must be set

  (?): will be taken from the first of the following that yields a valid value:
    1. explicit configuration
    2. parsed from `upstream`
    3. parsed from the first `git remote` that looks like a GitHub URL
USAGE
}

usage() {
  if test $# -gt 0
  then ret=$1 ; shift
  else ret=0
  fi
  test $# -eq 0 || printf '** %s **\n\n' "$*" >&2
  helpmsg
  test $# -eq 0 || printf '\n** %s **\n' "$*" >&2
  exit $ret
}

cfg() { git config github.$1 ; }

# required config
gh_user="$(cfg user | grep .)"
gh_token="$(cfg token | grep .)"

# optional config
gh_repo="$(cfg repo || basename "$(pwd)")"
up_stream="$(cfg upstream || :)"
up_user="$(cfg upuser || :)"
up_repo="$(cfg uprepo || :)"

# take default up_user and up_repo from up_stream, if it was provided
if test -n "$up_stream"
then
  test -n "$up_user" || up_user=${up_stream%/*}
  test -n "$up_repo" || up_repo=${up_stream#*/}
fi

dry_run="$(cfg dry || :)"

fail() {
  printf "$@" >&2
  test -n "$dry_run" && exit 0 || exit 1
}

dryly() {
  if test -n "$dry_run"
  then
    printf ']] %s\n' 'Would run:' "$@" >&2
    test -t 0 || {
      printf '%s\n' 'With input: >>>'
      cat -
      printf '%s\n' '<<<'
    } >&2
  else "$@"
  fi
}

remotes_impl() {
  git config -z --get-regexp '^remote\..+\.url$' |
  awk -F\\n -v RS=\\000 '{print$2}' |
  git parse-url |
  url2json |
  jq -c 'select(.scheme=="ssh" and .host=="github.com") |
  (.path | rtrimstr(".git") | split("/")) as $parts |
  .gh = {user: $parts[1], repo: $parts[2]}'
}

remotes=
remotes() {
  test -n "$remotes" || remotes="$(remotes_impl)"
  printf '%s\n' "$remotes"
}

fail_if_exists() {
  remotes |
  jq -r 'select(.gh.user=="'"$gh_user"'").url' |
  while read fork
  do fail 'Already forked: %s\n' "$fork"
  done
}

upstream_from_config() {
  case "$up_user":"$up_repo" in (*:|:*) return 1 ;; esac
  printf '%s %s\n' "$up_user" "$up_repo"
}

find_user_repo() {
  upstream_from_config ||
  remotes |
  jq -r '[.gh.user,.gh.repo]|join(" ")' |
  sed '1!d'
}

create_fork() {
  : ${up_user:=$1}
  : ${up_repo:=$2}
  github_post https://api.github.com/repos/$up_user/$up_repo/forks
}

create_repo() {
  jq --arg name "$2" -n '{
  name: $name, has_issues: true, has_projects: false, has_wiki: false
  }' |
  github_post https://api.github.com/user/repos -d @-
}

github_post() {
  dryly curl -X POST -H "Authorization: token $gh_token" "$@" -D - -o /dev/null
}

add_remote() {
  : ${gh_repo:=$2}
  dryly git remote add "$gh_user" "gh:$gh_user/$gh_repo"
}

main() {
  fail_if_exists
  set -- $(find_user_repo)
  if test $# -gt 0
  then create_fork "$@"
  else
    set -- "$gh_user" "$gh_repo"
    create_repo "$@"
  fi
  add_remote "$@"
}

case "$1" in
  (--|--debug)
    shift
    test $# -gt 0 || usage 1 --debug requires a command
    parse=false
    ;;
  (*)
    parse=true
    set -- main "$@"
    ;;
esac

if $parse
then
  blanked=false
  for arg
  do
    $blanked || { blanked=true ; set -- ; }
    case "$arg" in
      (-h|--help) usage 0 ;;
      (*) set -- "$@" "$arg" ;;
    esac
  done
fi

"$@"
