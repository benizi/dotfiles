#!/bin/sh

set -e

: ${tld=self}
: ${ca=ca.$tld}
: ${bits=4096}
: ${O=benizi}
: ${OU=WWW}

test $# -gt 0 || set -- host1 host2

has_cmd() {
  hash "$1" 2>/dev/null
}

# driver for all of this
has_cmd cfssl
# for splitting resulting certs
has_cmd cfssljson-dev || has_cmd cfssljson
# for generating JSON configuration
has_cmd edn

debugtee() {
  if test -n "$debug"
  then jq . | tee "$1"
  else cat
  fi
}

cfssljson_binary() {
  if has_cmd cfssljson-dev
  then echo cfssljson-dev
  elif has_cmd cfssljson
  then echo cfssljson
  else printf 'No `cfssljson` binary found?\n' >&2 ; exit 1
  fi
}

export cfssl_names=benizi
case "$(cfssljson_binary)" in
  (*-dev) _cert=.cert _key=.key ;;
  (*) _cert=.pem _key=-key.pem ;;
esac

cfssljson() {
  command "$(cfssljson_binary)" "$@"
}

host_config() {
  edn <<CA_CSR_EDN
{
  CN $1
  key {algo rsa size $bits}
  names [{C US, ST Pennsylvania, L Pittsburgh, O "$O", OU "$OU"}]
}
CA_CSR_EDN
}

host_config $ca |
debugtee req.$ca.json |
cfssl genkey -initca - |
debugtee genkey.$ca.json |
cfssljson -bare $ca

for shortname
do
  test x$shortname != x-- || continue
  host=$shortname.$tld
  host_config $host |
  debugtee req.$host.json |
  cfssl gencert \
    -ca $ca$_cert \
    -ca-key $ca$_key \
    -hostname=$host \
    - |
  cfssljson -bare $host
done
