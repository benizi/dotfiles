#!/usr/bin/perl
use warnings;
use strict;
#
#  Copyright (C) 2002-2003 Constantin Kaplinsky.  All Rights Reserved.
#  Copyright (C) 1999 AT&T Laboratories Cambridge.  All Rights Reserved.
#
#  This is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This software is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this software; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307,
#  USA.
#

#
# vncserver - wrapper script to start an X VNC server.
#

use File::Spec;
use File::Basename;
use Socket;
use Sys::Hostname;

my $prog = basename $0;
my $host = hostname;


#
# First make sure we're operating in a sane environment.
#

SanityCheck();

#
# Global variables.  You may want to configure some of these for your site.
#

my $vncClasses = "/usr/share/tightvnc/classes";
my $vncUserDir = "$ENV{HOME}/.vnc";

# X colors database path is optional, uncomment and edit to use:
my $colorPath = "/usr/share/X11/rgb";

# You might wish to make your vnc directory under /tmp, to make sure
# passwords are always kept on the local filesystem. To do that, just
# uncomment the line below. Note that in this case Xvnc's .Xauthority
# file will be searched in the same $vncUserDir directory by default,
# and $ENV{HOME}/.vncstartup will be executed instead of usual
# $vncUserDir/xstartup.
#
# $vncUserDir = "/tmp/$ENV{USER}-vnc";

my $defaultXStartup = <<'XINITRC';
#!/bin/sh

xrdb $HOME/.Xresources
xsetroot -solid grey
xterm -geometry 80x24+10+10 -ls -title "$VNCDESKTOP Desktop" &
twm &
XINITRC

my $vncUserDirUnderTmp = $vncUserDir =~ m{^/tmp/.};

my $xstartup = $vncUserDirUnderTmp
	? "$ENV{HOME}/.vncstartup"
	: "$vncUserDir/xstartup";
my $xauthorityFile = $ENV{XAUTHORITY};
$xauthorityFile ||= $vncUserDirUnderTmp
	? "$vncUserDir/.Xauthority"
    : "$ENV{HOME}/.Xauthority";



# Check command line options

use Getopt::Long qw/:config pass_through bundling/;
my @options = (
	'name=s' => \(my $desktopName = 'Xvnc'), <<'USAGE',
        -name <DESKTOP-NAME>
USAGE
	'geometry=s' => \(my $geometry = "1280x768"), <<'USAGE',
        -geometry <WIDTH>x<HEIGHT>
USAGE
	'depth=i' => \(my $depth = 24), <<'USAGE',
        -depth <DEPTH>
USAGE
	'pixelformat=s' => \(my $pixelFormat = ''), <<'USAGE',
        -pixelformat rgb<NNN>
        -pixelformat bgr<NNN>
USAGE
	'kill' => \(my $kill = 0), <<'USAGE',
        -kill :<DISPLAY#>
USAGE
	'scan' => \(my $scan = 0), <<'USAGE',
        -scan
USAGE
	'help|h|?' => \(my $help = 0), <<'USAGE',
        -h/-help/-?
USAGE
	'wmDecorationWidth=i' => \(my $wmDecorationWidth), <<'USAGE',
        -wmDecorationWidth <WIDTH>    a guess at typical size for window manager
USAGE
	'wmDecorationHeight=i' => \(my $wmDecorationHeight), <<'USAGE',
        -wmDecorationHeight <HEIGHT>    decoration size
USAGE
	'decoration!' => \(my $decoration = 0), <<'USAGE',
        -nodecoration                 for when the window manager doesn't
USAGE
	'dry' => \(my $dry_run = 0), <<'USAGE',
        -dry                          show what would be run
USAGE
	'fontpath=s' => \(my $fontPath = undef), <<'USAGE',
        -fontpath <PATH>[,<PATH>]*
USAGE
);
my @usage;
unshift @usage, splice @options, $_, 1 for grep 2==($_%3), reverse 0..$#options;
$wmDecorationWidth ||= $decoration * 4;
$wmDecorationHeight ||= $decoration * 24;
GetXDisplayDefaults();

sub usage {
	my $prog = basename $0;
	my $options = join '', @usage;
    die <<USAGE,
TightVNC Server version 1.3.9

Usage: $prog [<OPTIONS>] [:<DISPLAY#>]
       $prog -kill :<DISPLAY#>
       $prog -scan

$options
See vncserver and Xvnc manual pages for more information.
USAGE
}

usage if !GetOptions(@options) or $help;
$pixelFormat = '' if $depth;

my $display;
@ARGV = grep { not
	defined($display) ? 0 :
	/^:(\d+)(?:\.\d+)?$/ ? (($display = $1),1) :
0 } @ARGV;
warn "Unknown options: @ARGV\n" and usage if @ARGV;

Kill() if $kill;
Scan() if $scan;

CheckGeometryAndDepth();

# Create the user's vnc directory and password file if necessary.
my $passwd = File::Spec->catfile($vncUserDir, "passwd");
my @authType = (-rfbauth => $passwd);

if (!-e $vncUserDir) {
	mkdir $vncUserDir, 0700 or die "$prog: Couldn't create $vncUserDir.\n";
}
for ($vncUserDir, $passwd) {
	my $mode = (lstat)[2];
	die "$prog: $_ is not owned by the current user\n" if -e and !-o;
	if (($mode & 0077)
		or ((-d) and $vncUserDirUnderTmp and ($mode & 0700) != 0700)
		) {
		die "$prog: $_ has insecure permissions\n"
	}
}
		
# Make sure the user has a password.

if (!-f $passwd) {
	warn "Setting up a password\n";
	system { 'vncpasswd' } 'vncpasswd', $passwd
		and die "Couldn't create password file\n";
}

# Find display number.

$display = GetDisplayNumber() unless defined $display;
if (CheckDisplayNumber($display)) {
	die "A VNC server is already running as :$display\n";
}

my $vncPort = 5900 + $display;
my $desktopLog = File::Spec->catfile($vncUserDir, "$host:$display.log");
unlink $desktopLog;

# Make an X server cookie - use as the seed the sum of the current time, our
# PID and part of the encrypted form of the password.  Ideally we'd use
# /dev/urandom, but that's only available on Linux.


{
	local @ARGV = ($passwd);
	srand time+$$+unpack "L",scalar <>;
}
my $cookie = join '', map sprintf("%02x", int rand 256), 1..16;

for ("$host:$display", "$host/unix:$display") {
	system { 'xauth' } 'xauth', '-f', $xauthorityFile, 'add', $_, '.', $cookie;
}

# Now start the X VNC Server
my @cmd = (
	'Xvnc',
	":$display",
	'-desktop', $desktopName,
	'-httpd', $vncClasses,
	'-auth', $xauthorityFile,
	'-rfbwait', 120000,
	@authType,
	'-rfbport', $vncPort,
	map(@$_,
		grep $$_[1],
		[-geometry => $geometry],
		[-depth => $depth],
		[-pixelformat => $pixelFormat],
		[-fp => $fontPath],
		[-co => $colorPath],
	),
	@ARGV,
);

sub TryToStart {
	my $pid = $dry_run || fork;
	warn "Couldn't fork: $!" and return unless defined $pid;
	if ($pid) {
		my $pidFile =
			File::Spec->catfile($vncUserDir, "$host:$display.pid");
		warn "PIDfile: $pidFile\nWould run: @cmd\n" and return if $dry_run;
		open my $f, '>', $pidFile or die ">$pidFile: $!";
		print $f $pid, $/;
		close $f;
		return $pid;
	}
	open STDOUT, '>>', $desktopLog or die ">>$desktopLog: $!";
	open STDERR, '>&STDOUT' or die "dup STDERR: $!";
	exec { $cmd[0] } @cmd;
	die "Couldn't exec: $!";
}

# Run $cmd and record the process ID.
my $pid = TryToStart;

# Give Xvnc a chance to start up

sleep 1;

if (!$pid or !kill 0, $pid) {
	$pid = 'undef' if not defined $pid;
	warn <<START;
Couldn't start Xvnc {PID=$pid}; trying default font path.
Please set correct fontPath in the $prog script.
START
	for (0..$#cmd-1) {
		warn "cmd[$_]={$cmd[$_]}\n";
		next unless $cmd[$_] eq '-fp';
		splice @cmd, $_, 2;
		last;
	}
	$pid = TryToStart;
    sleep 1;
}
if (!$pid or !kill 0, $pid) {
    warn "Couldn't start Xvnc process.\n\n";
	local @ARGV = ($desktopLog);
	print while <>;
    die "\n";
}

$pid and warn "New '$desktopName' desktop is $host:$display\n\n";
system "pstree -apu $pid";

# Create the user's xstartup script if necessary.

if (!-e $xstartup) {
    warn "Creating default startup script $xstartup\n";
	open my $xstart, '>', $xstartup or die ">$xstartup: $!";
	print $xstart $defaultXStartup;
	close $xstart;
    chmod 0755, $xstartup;
}

# Run the X startup script.

warn "Starting applications specified in $xstartup\n";
warn "Log file is $desktopLog\n\n";

# If the unix domain socket exists then use that (DISPLAY=:n) otherwise use
# TCP (DISPLAY=host:n)

if (-e "/tmp/.X11-unix/X$display") {
    $ENV{DISPLAY}= ":$display";
} else {
    $ENV{DISPLAY}= "$host:$display";
}
$ENV{VNCDESKTOP}= $desktopName;

kill 0, $pid or die "X server no longer there\n";
open STDOUT, '>>', $desktopLog or die ">>$desktopLog: $!";
open STDERR, '>&1' or die "Dup STDERR: $!";
exec { $xstartup } $xstartup;
die "Problem forking: $!";


###############################################################################
#
# CheckGeometryAndDepth simply makes sure that the geometry and depth values
# are sensible.
#

sub CheckGeometryAndDepth {
	die "$prog: Bad geometry {$geometry}\n" unless $geometry =~ /^([1-9]\d+)x([1-9]\d+)$/;
	$geometry =~ s/^(\d+)(?=x)/($1 % 4) ? $1 + 4 - $1 % 4 : $1/e;
	$geometry =~ s/(?<=x)(\d+)$/($1 % 2) ? $1 + 1 : $1/e;
	die "Depth must be between 8 and 32\n" if $depth < 8 or $depth > 32;
}


#
# GetDisplayNumber gets the lowest available display number.  A display number
# n is taken if something is listening on the VNC server port (5900+n) or the
# X server port (6000+n).
#

sub GetDisplayNumber {
	CheckDisplayNumber($_) or return $_ for 1..99;
	die "$prog: no free display number on $host.\n";
}


#
# CheckDisplayNumber checks if the given display number is available.  A
# display number n is taken if something is listening on the VNC server port
# (5900+n) or the X server port (6000+n).
#

sub CheckDisplayNumber {
	my $n = shift;
	my $servs = 0;

	for ([6000,2],[5900,1]) {
		my ($add,$type) = @$_;
		my $port = $n + $add;
		socket my $s, AF_INET, SOCK_STREAM, 0 or die "$prog: socket failed: $!\n";
		eval { setsockopt $s, SOL_SOCKET, SO_REUSEADDR, pack 'l', 1 };
		$servs += $type if bind $s, pack 'S n x12', AF_INET, $port;
		close $s;
	}

	for my $lock ("/tmp/.X$n-lock", "/tmp/.X11-unix/X$n") {
		next if !-e $lock;
		warn <<EXISTING unless $scan;
Warning: $host:$n is taken because of $lock
Remove this file if there is no X server $host:$n
EXISTING
		return $servs || 4;
    }
}


#
# GetXDisplayDefaults uses xdpyinfo to find out the geometry, depth and pixel
# format of the current X display being used.  If successful, it sets the
# options as appropriate so that the X VNC server will use the same settings
# (minus an allowance for window manager decorations on the geometry).  Using
# the same depth and pixel format means that the VNC server won't have to
# translate pixels when the desktop is being viewed on this X display (for
# TrueColor displays anyway).
#

sub GetXDisplayDefaults {

	return unless defined $ENV{DISPLAY};

	{
		chomp(my @lines = `xset q 2>/dev/null`);
		for (0..$#lines-1) {
			next unless $lines[$_] eq 'Font Path:';
			s/^\s+//, s/\s+$// for $fontPath = $lines[$_+1];
			my @fdir = map[$_,$_], split /,/, $fontPath;
			$$_[1] =~ s/:\w+// for @fdir;
			$$_[1] =~ s{/$}{} for @fdir;
			my %seen;
			@fdir = grep -r $$_[1], grep -d $$_[1],
				grep !$seen{$$_[1]}++, @fdir;
			my @good = 0..$#fdir;
			my %good;
			$good{$_}++ for @good;
			0 and warn "Bad fonts:\n", map $$_[0].$/,
				@fdir[grep !$good{$_}, 0..$#fdir];
			@fdir=map $$_[1], @fdir[@good];
			$fontPath = join ',', @fdir;
			last;
		}
	}

    chomp(my @lines = `xdpyinfo 2>/dev/null`);

    return if $? or !@lines;

	for (grep /dimensions/, @lines) {
		next unless my ($w, $h) = /(\d+)x(\d+) pixels/;
		$geometry = join 'x', $w - $wmDecorationWidth, $h - $wmDecorationHeight;
		last;
	}

	my $i;
	for (grep /default visual id/, @lines) {
		next unless my ($defaultVisualId) = /id:\s+(\S+)/;
		for (0..$#lines-4) {
			$i = $_;
			next unless $lines[$i] =~ /^\s*visual id:\s+\Q$defaultVisualId\E$/;
			return if $lines[$i+1] !~ /TrueColor/
				or $lines[$i+2] !~ /depth/
				or $lines[$i+4] !~ /red, green, blue masks/;
			last;
		}
	}

	return if $i >= @lines;

	my ($depth) = ($lines[$i+2] =~ /depth:\s+(\d+)/);
	my (@rgb) =
		map sprintf("%b",hex),
		($lines[$i+4] =~ /masks:\s+0x([\da-f]+), 0x([\da-f]+), 0x([\da-f]+)/);


	($pixelFormat, @rgb) = (length $rgb[0] > length $rgb[2])
		? ('rgb', @rgb)
		: ('bgr', reverse @rgb);
	$pixelFormat .= tr/1/1/ for @rgb;
}


#
# removeSlashes turns slashes into underscores for use as a file name.
#

sub removeSlashes { local $_ = shift; tr{/}{_}; $_ }


#
# Scan
#

sub Scan {
	my %types = (
		0 => 'No servers',
		1 => 'VNC server',
		2 => 'X server',
		3 => 'VNC and X servers',
		4 => 'unknown servers',
	);
	for my $n (0..99) {
		my $type = CheckDisplayNumber($n);
		print ":$n -> $types{$type}\n" if $type;
	}
	exit;
}

#
# Kill
#

sub Kill {
	die <<CANTTELL if $display !~ /\A\d+\Z/;
Can't tell if $display is on $host
Use -kill :<number> instead
CANTTELL

	my $pidFile = File::Spec->catfile($vncUserDir, "$host:$display.pid");

	die <<CANTFIND if !-r $pidFile;
Can't find file $pidFile
You'll have to kill the Xvnc process manually
CANTFIND

    $SIG{HUP} = 'IGNORE';
	local @ARGV = $pidFile;
	my $pid;
	while (<>) {
		chomp;
		$pid = $_;
	}
	if (!kill 0, $pid) {
		warn "Process $pid may already be dead\n";
		exit;
	}
    warn "Killing Xvnc process ID $pid\n";
	kill "TERM", $pid;
    unlink $pidFile;
    exit;
}


#
# Routine to make sure we're operating in a sane environment.
#

sub SanityCheck {
    my $prog = basename $0;
	my @errors;

    #
    # Check we have all the commands we'll need on the path.
    #

	my @cmd = qw/uname xauth Xvnc vncpasswd/;
	my %found;
	for my $path (File::Spec->path) {
		-x File::Spec->catfile($path, $_) and $found{$_}++ for @cmd;
	}
	push @errors, map "$_ is not in your PATH\n", grep !$found{$_}, @cmd;

    #
    # Check the HOME and USER environment variables are both set.
    #

	push @errors, map "\$$_ is unset\n", grep !defined($ENV{$_}), qw/HOME USER/;
	die @errors if @errors;
}
