#!/usr/bin/env perl
use strict;
use warnings;
use File::Temp 'tempdir';

my $verbose = 0;

# Arg parsing
my ($cmd, @gems, @cmd);
for (@ARGV) {
  if ($cmd) {
    push @cmd, $_;
    next;
  }
  if ($_ eq '--') {
    $cmd = 1;
  } elsif ($_ =~ /^-v|--verbose$/) {
    $verbose++;
  } elsif ($_ =~ /^be|bundle$/) {
    $cmd = 1;
    push @cmd, $_;
  } else {
    push @gems, $_;
  }
}

# Usage message if user didn't specify the gems and cmd
if (!(@cmd and @gems)) {
  die <<USAGE;
Usage: $0 [external gems] [-- | be | bundle] cmd [args]

All arguments up to '--', 'be', or 'bundle' should be gems which aren't
currently in the Gemfile.

'be' will be replaced by ['bundle', 'exec'].

cmd [args]
USAGE
}

# expand qw/be/ to qw/bundle exec/
splice @cmd, 0, 1, qw/bundle exec/ if $cmd[0] eq 'be';

# Create new Gemfile and Gemfile.lock
# Gemfile will have the external gems tacked onto the end
my $dir = tempdir 'with-external-gems.XXXXXXXX', TMPDIR => 1, CLEANUP => 1;
for (qw/Gemfile Gemfile.lock/) {
  next unless -f;
  open my $modified, '>', "$dir/$_" or die ">$dir/$_: $!";
  open my $original, '<', $_ or die "<$_: $!";
  undef local $/;
  my $file = <$original>;
  print $modified $file;
  next if /lock/;
  print $modified "\n"; # deal with absent trailing newline
  print $modified qq{gem '$_'\n} for @gems;
}

# Clean out Bundler-related environment variables
my %env = %ENV;
delete $ENV{$_} for qw/BUNDLE_GEMFILE BUNDLE_BIN_PATH RUBYOPT/;

# Install all gems
$ENV{BUNDLE_GEMFILE} = "$dir/Gemfile";
my $bundle = 'bundle';
$bundle .= ' >/dev/null' unless $verbose;
system $bundle and die "bundle failed\n";

# Run the command bundled with the alternate Gemfile
system { $cmd[0] } @cmd;
exit $?;
