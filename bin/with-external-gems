#!/usr/bin/env perl
use strict;
use warnings;
use File::Temp 'tempdir';
use File::Spec;
use Cwd;

my $verbose = 0;

# Arg parsing
my ($cmd, @gems, @cmd, $dump);
for (@ARGV) {
  if ($cmd) {
    push @cmd, $_;
    next;
  }
  if ($_ eq '--') {
    $cmd = 1;
  } elsif ($_ =~ /^-v|--verbose$/) {
    $verbose++;
  } elsif ($_ =~ /^be|bundle$/) {
    $cmd = 1;
    push @cmd, $_;
  } elsif ($_ =~ /^--dump$/) {
    $dump = 1;
  } else {
    push @gems, $_;
  }
}

# Usage message if user didn't specify the gems and cmd
if (!((@cmd || $dump) and @gems)) {
  die <<USAGE;
Usage: $0 [external gems] [-- | be | bundle] cmd [args]

All arguments up to '--', 'be', or 'bundle' should be gems which aren't
currently in the Gemfile.

'be' will be replaced by ['bundle', 'exec'].

cmd [args]
USAGE
}

# expand qw/be/ to qw/bundle exec/
splice @cmd, 0, 1, qw/bundle exec/ if @cmd and $cmd[0] eq 'be';

sub existing_gemfile {
  my $ext = shift;
  my $file = $ENV{BUNDLE_GEMFILE} || 'Gemfile';
  File::Spec->rel2abs(join '.', grep length, grep defined, $file, $ext)
}

# Create new Gemfile and Gemfile.lock
my $dir = tempdir 'with-external-gems.XXXXXXXX', TMPDIR => 1, CLEANUP => 1;

my ($existing, $existing_lock) = map existing_gemfile($_), '', 'lock';

# Gemfile wraps existing Gemfile
open my $gemfile, '>', "$dir/Gemfile";
print $gemfile "eval_gemfile '$existing'\n";
print $gemfile "gem '$_'\n" for @gems;
close $gemfile;

# Gemfile.lock same as current if it exists (will be modified by bundle install)
if (-f $existing_lock) {
  local @ARGV = ($existing_lock);
  open my $lock, '>', "$dir/Gemfile.lock";
  print $lock $_ for <>;
  close $lock;
}

my $list_dirs = q/ruby -e "$:.each { |dir| puts dir }"/;
chomp(my @before = qx/bundle exec $list_dirs/);
my %before = map {; $_ => 1 } @before;

# Clean out Bundler-related environment variables
my %env = %ENV;
delete $ENV{$_} for qw/BUNDLE_GEMFILE BUNDLE_BIN_PATH RUBYOPT/;

# Install all gems
$ENV{BUNDLE_GEMFILE} = "$dir/Gemfile";

# Try the following:
# 1. bundle check (faster way to check if all gems are already installed)
# 2. bundle --local (install without fetching gem index)
# 3. bundle (full install)
# 4. otherwise fail with an error
for my $cmd ('check', '--local', undef, 'failed') {
  die "Could not satisfy bundle requirements\n" if ($cmd || '') eq 'failed';
  my $bundle = join ' ', grep defined, bundle => $cmd, grep !$verbose, '>/dev/null';
  system $bundle or break;
}

if ($dump) {
  chomp(my @after = qx/bundle exec $list_dirs/);
  print "RUBY_LIB=".join(':', grep !$before{$_}, @after)."\n";
  exit;
}

# Run the command bundled with the alternate Gemfile
system { $cmd[0] } @cmd;
exit $?;
