#!/usr/bin/perl
my $just_keys = $0 =~ /keys/;
my $just_vals = $0 =~ /data/ || $0 =~ /val/;
my $raw = $0 =~ /r$/;
use strict;
use warnings;
sub readlen { my ($fh, $len) = @_; return '' unless $len; local $/ = \$len; scalar <$fh>; }
sub uint32 { my $fh = shift; unpack 'V', readlen($fh, 4); }
my $fh;
if (@ARGV) { open $fh, '<', $ARGV[0] or die "<$ARGV[0]: $!"; }
$fh ||= *STDIN;

my $end = uint32($fh) - 2048;
readlen($fh, 2044);
my $read = 0;
while ($read < $end) {
	my $klen = uint32($fh);
	my $dlen = uint32($fh);
	my $key = readlen($fh, $klen);
	my $data = readlen($fh, $dlen);
	my @print;
	if ($just_keys or !$just_vals) {
		push @print, $klen unless $raw;
		push @print, $key;
	}
	if ($just_vals or !$just_keys) {
		push @print, $dlen unless $raw;
		push @print, $data;
	}
	print join "\t", @print;
	print "\n";
	$read += 8 + $klen + $dlen;
}
