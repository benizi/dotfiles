#!/usr/bin/perl
use strict;
use warnings;
use open ':std', ':utf8';
use utf8;
use Encode qw/decode_utf8 FB_CROAK/;
use POSIX 'strftime';
# like pstree -aclpuU, but without the need to filter so much.
use Getopt::Long qw/:config no_ignore_case bundling/;
my (@cmds, @pids);
GetOptions(
	'cmd=s' => \@cmds,
	'pid=s@' => \@pids,
	'grep-args!' => \(my $grep_args = 1),
	'v|verbose+' => \(my $verbose = 0),
	'VIM' => \(my $vim = $0 =~ /pstv/),
	'a|show-args!' => \(my $show_args),
	'C|l|level=i' => \(my $levels),
	'A|after=i' => \(my $kid_levels),
	'kids' => \(my $all_kids),
	'B|before=i' => \(my $parent_levels),
	'P' => \(my $print_pids),
	'cwd|dir' => \(my $print_cwd),
	't+' => \(my $print_time),
	'tr|time-relative' => \(my $time_relative = 0),
	'tf|time-format=s' => \(my $time_format),
	'T' => \(my $use_tasks),
	'E' => \(my $show_env),
	'max-env=i' => \(my $max_env = 32),
	'F' => \(my $show_files = $0 =~ /pstf/),
	'i' => \(my $case_insensitive),
	'u=s' => \(my $user),
	'U' => \(my $show_user),
	'g=s' => \(my $group),
	'G' => \(my $show_group),
	'q' => \(my $quiet),
	'<>' => sub {
		for (@_) {
			/^\d+$/ ? push @pids, $_
			: push @cmds, $_;
		}
	},
) or die 'options';
$time_format //= $time_relative ? 'relative' : '%Y-%m-%d %H:%M:%S';
my $print_target_pids;
$print_target_pids //= 0 if $quiet;
$_ = $_ ? '(?i)' : '' for $case_insensitive;
@cmds = ('vim') if $vim and not @cmds;
$show_args //= !$vim;
$show_env //= $verbose;
$all_kids = 1 unless @pids or @cmds;
my $default_parent_levels =
	(grep defined, $levels, $kid_levels, $parent_levels) ? 0 : -1;
$kid_levels //= -1 if $all_kids;
$kid_levels //= $levels // 0;
$parent_levels //= $levels // $default_parent_levels;
sub number_files {
	opendir my $d, $_[0] or return ();
	grep /^\d+$/, readdir $d;
}
my @procs = number_files "/proc";
sub slurp {
	my $fn = shift;
	open my $f, '<', $fn or return '';
	undef local $/;
	scalar <$f>
}
sub utf8ly {
	my $ret = shift;
	eval {
		my $utf8 = decode_utf8 $ret, FB_CROAK;
		$ret = $utf8;
	};
	$ret
}
sub linky {
	my $fn = shift;
	return '' unless -r $fn and -l $fn;
	utf8ly readlink $fn;
}
@procs = map +{
	pid => 0+$_,
	dir => "/proc/$_",
}, @procs;
if ($use_tasks) {
	my %proc;
	$proc{$$_{pid}}++ for @procs;
	my @tasks;
	for my $p (@procs) {
		my @tid = number_files "$$p{dir}/task";
		push @tasks, map +{
			pid => 0+$_,
			dir => "/proc/$_",
			parentish=>$$p{pid},
			task => 1
		}, grep !$proc{$_}, @tid;
	}
	push @procs, @tasks;
}
my $boot_time = (slurp "/proc/stat") =~ /btime (\d+)/ ? $1 : 0;
for my $p (@procs) {
	my ($pid, $dir) = @$p{qw/pid dir/};
	my ($uid, $gid) = (stat $dir)[4,5];
	$$p{user} = getpwuid($uid // -1) // $uid // -1;
	$$p{group} = getgrgid($gid // -1) // $gid // -1;
	$$p{$_} = slurp "$dir/$_" for qw{cmdline stat};
	$$p{$_} = linky "$dir/$_" for qw{root exe cwd};
	unless ((@$p{qw/taskname status ppid pgid sid/}) =
		$$p{stat} =~ /^\d+ \((\S+)\) (.) (\d+) (\d+) (\d+)/) {
		# deal with readdir(/proc/*) race condition
		$$p{invalid} = 1;
		next;
	}
	$$p{start} = (split ' ', $$p{stat})[21] // 0;
	$$p{start} /= 100;
	$$p{start} += $boot_time;
	$$p{cmdline} = "($$p{taskname})" if !length $$p{cmdline};
	$$p{argv} = [ split "\0", $$p{cmdline}, -1 ];
	$$p{cmd} = $$p{argv}[0] // '';
	$$p{parentish} //= $$p{ppid};
}
@procs = grep !$$_{invalid}, @procs;
my %procs;
$procs{$$_{pid}} = $_ for @procs;
push @{$procs{$$_{parentish}}{kids}}, $_ for grep $$_{parentish}, grep $$_{parentish} ne $$_{pid}, @procs;
$$_{parentish} and $$_{parent} = $procs{$$_{parentish}} for @procs;
my $any_filters;
for (
	[1=>cmd=>@cmds],
	[1=>cmdline=>grep $grep_args, @cmds],
	[0=>pid=>map '^'.$_.'$', @pids],
	[0=>user=>grep length, grep defined, $user],
	[0=>group=>grep length, grep defined, $group],
) {
	my ($filter_self, $field, @vals) = @$_;
	for my $v (@vals) {
		$any_filters++;
		@$_{qw/marked target/} = (1, 1) for
			grep { !$filter_self or $$_{pid} != $$ }
			grep $$_{$field} =~ /$case_insensitive$v/, @procs;
	}
}

my $maxdepth = 0;
my @n = ($procs{1});
while (@n) {
	$maxdepth++;
	@n = map @$_, grep defined, map $$_{kids}, @n;
}
$_ = $_ < 0 ? $maxdepth : $_ for $parent_levels, $kid_levels;
($levels) = (sort { $a <=> $b } grep defined, 0, $parent_levels, $kid_levels, $levels)[-1];

my @m = grep $$_{marked}, @procs;
my $any_marked = @m;
$print_target_pids //= $any_marked || $verbose;
if (!@m) {
	exit 1 if $any_filters;
	@m = ($procs{1});
}

my @p = @m;
for my $l (0..$parent_levels) {
	my %seen;
	@p = grep !$seen{$$_{pid}}++, @p, grep defined, map $$_{parent}, @p;
}
my @k = @m;
for (0..$kid_levels) {
	my %seen;
	@k = grep !$seen{$$_{pid}}++, @k, map @$_, grep defined, map $$_{kids}, @k;
}
$$_{marked} = 1 for @p, @k;

my ($dash, $pipe, $haskid, $ismid, $islast) = map chr 0x2500+$_, 0, 2, 0x2c, 0x1c, 0x14;
my @roots = grep !$$_{parent}{marked}, grep $$_{marked}, @procs;
open STDOUT, "| ".($ENV{PAGER}//"less");
for my $r (@roots) {
	my @toprint;
	my @q = ([0,$r,1]);
	while (@q) {
		my ($lev, $node, $islast) = @{shift @q};
		my $this = {lev=>$lev, node=>$node, last=>$islast};
		my @k = grep $$_{marked}, map @$_, $$node{kids}//[];
		@k = sort { $$a{cmd} cmp $$b{cmd} or $$a{pid} <=> $$b{pid} } @k;
		unshift @q, map [$lev+1, $k[$_], $_==$#k?1:0], 0..$#k;
		$$this{haskid} = 0+@k;
		push @toprint, $this;
		my @extra;
		if ($show_args and $verbose) {
			push @extra, argv => [map "$_=$$node{argv}[$_]", 0..$#{$$node{argv}}];
		}
		if (($show_files and ($$node{target} or $all_kids))
			or ($vim and $$node{target})) {
			my %fds = map {
				$_ => linky("$$node{dir}/fd/$_")
			} number_files "$$node{dir}/fd";
			if ($show_files) {
				my @files = map "$_: $fds{$_}", sort { $a <=> $b } keys %fds;
				push @extra, files => [@files] if @files;
			}
			if ($vim) {
				my @vim =
					map m{^(.*)\.sw\w$} ? $1 : $_,
					map join('/', split /%/, $_, -1),
					map { (split m{/}, $_, -1)[-1] }
					grep m{tmp/%},
					sort values %fds;
				push @extra, "open swap files" => [@vim] if @vim;
			}
		}
		if ($show_env and $$node{target}) {
			my @e;
			for (split /\0/, slurp "$$node{dir}/environ", -1) {
				push @e, [split /=/, $_, 2];
			}
			for (@e) {
				$$_[1] = substr($$_[1], 0, $max_env).'...' if 3 + $max_env < length $$_[1];
				$$_[1] =~ s{([^\x20-\x7e])}{sprintf "%%%02x", ord $1}ge;
			}
			push @extra, env => [
				map join("=", @$_),
				sort {
					$$a[0] cmp $$b[0]
						or
					$$a[1] cmp $$b[1]
				} @e
			];
		}
		my $had_extra = @extra;
		while (my ($k, $v) = splice @extra, 0, 2) {
			# header and nodes for each extra thing
			push @toprint, {
				lev => $lev + 1,
				haskid => (0+@$v) ? 1 : 0,
				last => @extra ? 0 : !$$this{haskid},
				node => { cmd => "» $k «" },
			}, map {
				lev => $lev+2,
				node => { cmd => $_ },
			}, @$v;
			$toprint[-1]{last} = 1 if @$v;
		}
		$$this{haskid} ||= 1 if $had_extra;
	}
	for my $i (0..$#toprint) {
		my $t = $toprint[$i];
		my $n = $$t{node};
		my @info;
		push @info, ($$n{target} or !$any_marked) ? $$n{pid} : '' if $print_target_pids;
		push @info, $$n{user} if $show_user;
		push @info, $$n{group} if $show_group;
		if ($print_time) {
			my $time = $$n{start} // 0;
			if ($time_format eq 'relative') {
				$time = time - $time if $time;
				$time = int $time;
			} else {
				$time = strftime $time_format, localtime $time;
			}
			my $blank = 0;
			$blank = 1 unless ($$n{target} or !$any_marked) or $print_pids or !$print_target_pids;
			$blank = 0 if $print_time > 1;
			$blank = 1 if !defined $$n{start};
			$time =~ s/./ /g if $blank;
			push @info, $time;
		}
		push @info, @$n{qw/pid ppid pgid sid status/} if $print_pids;
		print join "\t", map $_//'', @info, '' if @info;
		if ($$t{lev}) {
			for my $l (1..$$t{lev}-1) {
				my ($prev) = (grep $$_{lev} == $l, reverse @toprint[0..$i-1]);
				print $$prev{last} ? " " : $pipe;
				print " ";
			}
			print $$t{last} ? $islast : $ismid;
			print $dash;
			print $haskid if $$t{haskid};
			print $dash;
			print " ";
		}
		print $$n{task} ? "«$$n{taskname}»" : $$n{cmd};
		print " [$$n{cwd}]" if $print_cwd;
		if ($show_args and not $verbose) {
			my $arg_sep = ' ';
			my @argv = @{$$n{argv} // []};
			if (@argv) {
				print "${arg_sep}{", $argv[0], "}" if $argv[0] ne $$n{cmd};
			}
			print "$arg_sep$_" for @argv[1..$#argv];
		}
		print "\n";
	}
}
close STDOUT;
