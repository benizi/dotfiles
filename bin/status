#!/bin/zsh

typeset -a info funcs

add-term() {
  local term
  for term in term urxvt uxterm xterm
  do
    (( $+commands[$term] )) || continue
    printf '^ca(1,%s)term^ca()' $term
    break
  done
}
funcs+=( add-term )

add-bat() {
  local plugged levels sum avg l bg
  battery -p | read plugged levels
  sum=0
  for l in ${=levels}
  do (( sum += l ))
  done
  (( avg = sum / ${#${=levels}} ))

  if $plugged
  then
    if (( avg < 40 ))
    then bg=996633
    else bg=009900
    fi
  else
    if (( avg < 10 ))
    then bg=ff3333
    elif (( avg < 30 ))
    then bg=ff9933
    elif (( avg < 60 ))
    then bg=666633
    else bg=009900
    fi
  fi
  printf '^fg(#ffffff)^bg(#%s)%s %s^fg()^bg()' $bg $plugged $levels
}
funcs+=( add-bat )

add-date() {
  date="$(date +'%s %Y-%m-%d %H:%M:%S')"
  epoch=${date%% *}
  date=${date#* }
  printf '%s' $date
  [[ -f ~/tz ]] || return 0
  printf '%s' "$(TZ=$(<~/tz) date +'(%H %Z)')"
}
funcs+=( add-date )

add-essid() {
  if (( ! ( epoch % 10 ) )) || (( ! $+essid ))
  then essid="$(essid)"
  fi
  printf '%s' $essid
}
funcs+=( add-essid )

add-mem() {
  awk '
function report(t,f,usecolor){
used = kb(t-f)
colorcode = !usecolor ? "" : (kb(f) < 1000) ? "^bg(#ff0000)" : "^fg(#ff9900)"
color = colorcode ? colorcode "^ca(1,sudo swapoff -a && sudo swapon -a)" : ""
nocolor = color ? "^fg()^bg()^ca()" : ""
return color used "/" kb(t) nocolor
}
function kb(b){return int(b/1024)}
{ stats[$1] = $2 }
END {
printf("mem:%s", report(stats["MemTotal:"], stats["MemFree:"] + stats["Cached:"]))
if (stats["SwapTotal:"]) printf(" swp:%s", report(stats["SwapTotal:"], stats["SwapFree:"], 1))
}
' /proc/meminfo
}
funcs+=( add-mem )

toggle-middle() {
  if (( ! epoch % 10 )) || (( ! $+togglemiddle ))
  then
    local trackpoints="$(xinput list --short | awk '/Lite-On/&&/TrackPoint/&&/pointer/' | sed -e 's/^.*=//' -e 's/[[:space:]].*$//' | tac | sed 1q)"
    local id toggle
    togglemiddle=
    for id in ${=trackpoints}
    do
      if [[ "$(xinput list-props $id | awk '/Evdev Wheel Emulation/ { print $NF }' | sed 1q)" = 1 ]]
      then toggle=0
      else togglemiddle+='^fg(#ff9900)^bg(#ff9900)' toggle=1
      fi
      togglemiddle+='^ca(1,xinput set-prop '$id' "Evdev Wheel Emulation" '$toggle')'
      (( toggle )) && togglemiddle+='^r(7x8)^p(-7)'
      togglemiddle+='^i('${(%):-%x}'.middle.xpm)'
      togglemiddle+='^fg()^bg()^ca()'
    done
  fi
  printf '%s' $togglemiddle
}
funcs=( toggle-middle $funcs )

reset-keyboard() {
  if (( $+commands[x-kbdesc] ))
  then x-kbdesc +benizi
  else false
  fi && return
  printf '%s' '^ca(1,k)^i('${(%):-%x}'.kbd.xpm)^ca()'
}
funcs=( reset-keyboard $funcs )

lid-status() {
  if (( ! epoch % 10 )) || (( ! $+lidstatus ))
  then
    lidstatus='^ca(1,sudo '${commands[lid-toggle]}')^i('${(%):-%x}'.'
    if lid-close-ok
    then lidstatus+=clam
    else lidstatus+=open
    fi
    lidstatus+='.xpm)^ca()'
  fi
  printf '%s' $lidstatus
}
funcs=( lid-status $funcs )

minimal-date() {
  print -P '%D{%Y-%m-%d %H:%M:%S}'
}

setup() {
  info=()
  for fn in $funcs
  do
    info+=( "$($fn)" )
  done
}

output() {
  printf '%sâ”‚' $info
  printf '\n'
}

trap 'echo Restarting... ; exec $0' HUP

if test -e /tmp/status.minimal
then funcs=( add-term minimal-date )
fi

while sleep 1
do
  setup
  output
done
