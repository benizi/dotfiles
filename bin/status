#!/bin/zsh

typeset -a info funcs

add-term() {
  local term
  for term in term urxvt uxterm xterm
  do
    (( $+commands[$term] )) || continue
    printf '^ca(1,%s)term^ca()' $term
    break
  done
}
funcs+=( add-term )

add-bat() {
  local plugged levels sum avg l bg
  battery -p | read plugged levels
  sum=0
  for l in ${=levels}
  do (( sum += l ))
  done
  (( avg = sum / ${#${=levels}} ))

  if $plugged
  then
    if (( avg < 40 ))
    then bg=996633
    else bg=009900
    fi
  else
    if (( avg < 10 ))
    then bg=ff3333
    elif (( avg < 30 ))
    then bg=ff9933
    elif (( avg < 60 ))
    then bg=666633
    else bg=009900
    fi
  fi
  printf '^fg(#ffffff)^bg(#%s)%s %s^fg()^bg()' $bg $plugged $levels
}
funcs+=( add-bat )

add-date() {
  date="$(date +'%s %Y-%m-%d %H:%M:%S')"
  epoch=${date%% *}
  date=${date#* }
  printf '%s' $date
  [[ -f ~/tz ]] || return 0
  printf '%s' "$(TZ=$(<~/tz) date +'(%H %Z)')"
}
funcs+=( add-date )

add-essid() {
  if (( ! ( epoch % 10 ) )) || (( ! $+essid ))
  then essid="$(essid)"
  fi
  printf '%s' $essid
}
funcs+=( add-essid )

add-mem() {
  mem dzen
}
funcs+=( add-mem )

find-trackpoints() {
  xinput list --short |
  awk '/Lite-On/&&/TrackPoint/&&/pointer/' |
  sed -e 's/^.*=//' -e 's/[[:space:]].*$//' |
  tac |
  sed -n -e 1p
}

detect-scrolling() {
  xinput list-props $1 |
  awk -v toggle= -v property= '
  {
    thisprop = ""
    for (i=1; i<=NF && $i !~ /[0-9]/; i++) thisprop = thisprop (i>1?" ":"") $i
    found = 0
  }
  thisprop == "Evdev Wheel Emulation" { found = 1 ; tog = 1 - $NF }
  thisprop == "libinput Scroll Method Enabled" { found = 1 ; tog = "0 0 " (1-$NF) }
  !found { next }
  { print tog ; print thisprop ; exit }'
}

toggle-middle() {
  if (( ! epoch % 10 )) || (( ! $+togglemiddle ))
  then
    local trackpoints="$(find-trackpoints)"
    local id toggle
    togglemiddle=
    for id in ${=trackpoints}
    do
      detect-scrolling $id |
      { read toggle ; read property }
      [[ $toggle = (*0) ]] || togglemiddle+='^fg(#ff9900)^bg(#ff9900)'
      togglemiddle+='^ca(1,xinput set-prop '$id' "'$property'" '$toggle')'
      [[ $toggle = (*1) ]] && togglemiddle+='^r(7x8)^p(-7)'
      togglemiddle+='^i('${(%):-%x}'.middle.xpm)'
      togglemiddle+='^fg()^bg()^ca()'
    done
  fi
  printf '%s' $togglemiddle
}
funcs=( toggle-middle $funcs )

reset-keyboard() {
  if (( $+commands[x-kbdesc] ))
  then x-kbdesc +benizi
  else false
  fi && return
  printf '%s' '^ca(1,k)^i('${(%):-%x}'.kbd.xpm)^ca()'
}
funcs=( reset-keyboard $funcs )

lid-status() {
  if (( ! epoch % 10 )) || (( ! $+lidstatus ))
  then
    lidstatus='^ca(1,sudo '${commands[lid-toggle]}')^i('${(%):-%x}'.'
    if lid-close-ok
    then lidstatus+=clam
    else lidstatus+=open
    fi
    lidstatus+='.xpm)^ca()'
  fi
  printf '%s' $lidstatus
}
funcs=( lid-status $funcs )

bt-is-powered() {
  btmgmt -i 0 info |
  awk -v x=1 '/current settings:/ && /powered/ { x = 0 } END { exit x }'
}

add-bluetooth() {
  local toggle
  (( $+commands[btmgmt] )) || return
  if (( ! epoch % 15 )) || (( ! $+btstatus ))
  then
    if bt-is-powered
    then toggle=off btstatus='++'
    else toggle=on btstatus='--'
    fi
    btstatus='^ca(1,sudo btmgmt -i 0 power '"$toggle"')'"$btstatus"'^ca()'
    btstatus+='^ca(1,in-term bluetoothctl)bt^ca()'
  fi
  printf '%s' $btstatus
}
funcs=( add-bluetooth $funcs )

minimal-date() {
  print -P '%D{%Y-%m-%d %H:%M:%S}'
}

setup() {
  info=()
  for fn in $funcs
  do
    info+=( "$($fn)" )
  done
}

output() {
  printf '%sâ”‚' $info
  printf '\n'
}

trap 'echo Restarting... ; exec $0' HUP

if test -e /tmp/status.minimal
then funcs=( add-term minimal-date )
fi

while sleep 1
do
  setup
  output
done
