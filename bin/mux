#!/bin/sh

warnf() {
  printf "$@" >&2
}

die() {
  warnf '%s\n' "$*"
  exit 1
}

usage() {
  warnf 'Usage: mux [start template-name] | [completions start]\n'
  test $# -eq 0 || exit $1
}

mux_completions_start() {
  find ~/.tmuxinator/ -maxdepth 1 -name '*.yml' |
  awk -F/ '{ print $NF }' |
  awk -F. '{ NF-- } 1' |
  sort
}

mux_parse() {
  local sess=$1
  local file=$HOME/.tmuxinator/${sess}.yml
  ruby -ryaml -- - "$file" <<'RUBY'
def out(*args); puts args.join("\t"); end
@pre = nil
def runall(id, cmds)
  [@pre, cmds].flatten.compact.each { |cmd| out :run, id, cmd }
end
YAML::load(ARGF.read).tap do |file|
  root, @pre, windows = %w(root pre_window windows).map { |k| file.delete(k) }
  file.delete("name")
  out :root, 0, File.expand_path(root) if root
  abort "Unhandled file keys: #{file.inspect}" unless file.empty?
  windows.each_with_index do |whash, wi|
    wname, window = whash.to_a.first
    out :window, wi, wname
    case window
    when Hash # panes
      panes, layout = %w(panes layout).map { |k| window.delete(k) }
      abort "Unhandled keys: #{window.inspect}" unless window.empty?
      abort "Unknown panes type: #{panes.inspect}" unless Array === panes
      panes.each_with_index do |phash, pi|
        pid = [wi, pi].join('.')
        case phash
        when String ; runall pid, phash
        when Hash
          pname, pane = phash.to_a.first
          runall pid, pane
          out :pane, pid, pname
        end
      end
      out :layout, wi, layout if layout
    when Array, String # list, single
      runall wi, window
    else abort "Unknown window type: #{window.inspect}"
    end
  end
end
RUBY
}

mux_start() {
  set -e
  local sess=$1 action target command root
  mux_parse $sess |
  while read action target command
  do
    case $action in
      (root) cd $command ;;
      (window)
        if test $target -eq 0
        then tmux new-session -d -s $sess -n "$command"
        else tmux new-window -t $sess -n "$command"
        fi
        ;;
      (run)
        win=${target%.*}
        pane=${target#*.}
        if test $pane -gt 0
        then tmux split-window ${root+"-c"} ${root+"$root"} -t $sess:$win
        fi
        tmux_send_keys $sess:$target "$command" C-m
        ;;
      (layout)
        tmux select-layout -t $sess:$target $command
        ;;
      (*)
        printf 'action[%s] target[%s] command[%s]\n' "$action" "$target" "$command"
        warnf 'UNKNOWN: [%s]\n' $action
        continue
        ;;
    esac
  done
  tmux attach -t $sess
}

tmux_send_keys() {
  local target=$1
  shift
  local keys first=true
  for keys
  do
    if $first
    then
      first=false
      set -- tmux send-keys -t "$target"
      if test -n "$dry"
      then set -- printf '%s\n' "$@"
      fi
    fi
    case "$keys" in
      (*';') keys="${keys%';'}"'\;' ;;
    esac
    set -- "$@" "$keys"
  done
  "$@"
}

set -e

case "$*" in
  ('completions start')
    mux_completions_start
    exit
    ;;
esac

case "$1" in
  (parse)
    shift
    test $# -eq 1 || usage 1
    mux_parse $1
    ;;
  (start)
    shift
    test $# -eq 1 || usage 1
    sess=$1
    if tmux has -t "$sess" 2>/dev/null
    then tmux attach -t "$sess"
    else mux_start "$sess"
    fi
    ;;
esac
