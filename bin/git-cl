#!/usr/bin/env perl
use 5.016;
use warnings;
use URI;
use Getopt::Long;
use IPC::Run qw(harness);
use JSON qw(encode_json);

sub usage {
  die <<USAGE;
Usage: git $0 [options] repo [-- other args to git-clone]

Options:
  --dry   Dry run
  -u/--include-user  Prepend the username to the clone destination, e.g.:
     git $0 gh:benizi/dotfiles -> dotfiles
     git $0 -u gh:benizi/dotfiles -> benizi-dotfiles
  -v/--verbose  Print a bunch of extra info for scripting
  -j/--json  Print debug info in JSON format (default is tab-delimited)
USAGE
}

GetOptions(
  'dry' => \(my $dry = 0),
  'u|include-user' => \(my $hyphenated = 0),
  'v|verbose' => \(my $verbose = 1 - -t 1),
  'j|json' => \(my $json = 0),
) or usage;

usage unless @ARGV;
$verbose ||= $json;
my ($repo, @extra) = splice @ARGV;
chomp(my $resolved = qx/git parse-url $repo/);

# Repo must resolve to a recognizable URL
my $uri = URI->new($resolved);
unless ($uri->scheme eq 'git' or $uri->has_recognized_scheme) {
  my %seen;
  my $msg = join '->', map "{$_}", grep !$seen{$_}++, $repo, $uri;
  die "Couldn't resolve $msg.\n";
}
(my $path = $uri->path) =~ s{^/}{};

# Upstream must be identifier-like
my $valid_upstream = qr/^[A-Za-z][\w\-]*$/;

# Use the first path component (without `.git`) if there are multiple segments
my $upstream = $path =~ m{^([^/]+)/} ? $1 : '';
$upstream =~ s/\.git$//;

# Otherwise, use the "scheme-like" portion of the short repo name
unless ($upstream =~ $valid_upstream) {
  $upstream = URI->new($repo)->scheme if $repo ne $uri;
}

# Construct destination if requested
my $dest;
$dest = join '-', $1, $2 if $hyphenated and $path =~ m{^([^/]+)/([^/]+)};
(my $default_dest = $path) =~ s{[/.]+git$}{};
$default_dest =~ s{^.*/}{};
my $chosen_dest = $dest // $extra[0];

# Construct the `git-clone` command
my @clone = qw/git clone --progress/;
push @clone, -o => $upstream if $upstream;
push @clone, $repo;
push @clone, $dest if $dest;
push @clone, @extra;

sub bool { local $_ = @_ ? $_[0] : $_; $_ ? JSON::true : JSON::false }

sub tee {
  my ($prefix, $fh, $string) = @_;
  $$string = '';
  sub {
    local $_ = shift;
    $$string .= $_;
    s{(\A|\n(?!\Z))}{$1$prefix> }g;
    print $fh $_;
  };
}

say "@clone" unless $verbose;
my $ret = 0;
my ($out, $err);
if (not $dry) {
  my $out_sub = tee out => $verbose ? \*STDERR : \*STDOUT, \$out;
  my $err_sub = tee err => \*STDERR, \$err;
  my $cmd = harness \@clone, \undef, $out_sub, $err_sub;
  run $cmd;
  $ret = $cmd->result;
}
if ($verbose) {
  my $info = {
    original => [$repo, @extra],
    dry => bool($dry),
    grep($upstream, upstream => $upstream),
    repo => $repo,
    resolved => $resolved,
    path => $path,
    dest => $chosen_dest // $default_dest,
    defaulted => bool(not defined $chosen_dest),
    grep(!$dry, code => $ret||0),
  };
  if ($json) {
    $$info{$$_[0]} = $$_[1] for [stdout => $out], [stderr => $err];
    say encode_json $info;
  } else {
    while (my ($k, $v) = each %$info) {
      $v = join "\t", @$v if 'ARRAY' eq ref $v;
      say join "\t", $k, $v;
    }
  }
}
exit $ret;
