#!/usr/bin/perl
use strict;
use warnings;
use IPC::Run 'run';
use Getopt::Long;
GetOptions(
	'client|c' => \(my $client = 0),
	'server|s' => \(my $server = 0),
	'host=s' => \(my $host = 'localhost'),
	'kill24800!' => \(my $kill_24800 = 1),
	'port=i' => \(my $port = 24800),
) or die 'options';
$client++ unless $server;
my $cs = $client ? 'c' : 's';
my $synergy = "synergy$cs";

sub my_kill {
	@_ = @_ ? (@_) : ($_);
	run "sudo kill -9 $_" for @_;
}

my %ppids;
{
	chomp(my @pstree = reverse readpipe "pstree -aclpu");
	my $max;
	my $seen = 0;
	for (@pstree) {
		my ($pref, $proc, $pid) = /^([\s\|\-\`]*)([^\s,]+),(\d+)/;
		($seen, $max) = (1, length $pref) if $pid == $$;
		next unless $seen;
		next unless $max > length $pref;
		$ppids{$pid}++;
		$max = length $pref;
	}
}
if ($kill_24800) {
	chomp(my @procs = readpipe "sudo lsof -i :$port -Fp");
	s/^p// for @procs = grep /^p/, @procs;
	@procs = grep !$ppids{$_}, @procs;
	my_kill for @procs;
	@procs and die "Killed old SSH process(es). Should reconnect now.\n";
}
chomp(my @already = readpipe "pgrep $synergy");
my_kill for @already;
if (!$ENV{SSH_CLIENT}) {
	warn "Killed ".(0+@already)." process".(1==@already?"":"es")."\n";
	exit;
}
my @s_args = ('-f');
push @s_args, join ':', $host, $port if $client;
exec { $synergy } $synergy, @s_args;
