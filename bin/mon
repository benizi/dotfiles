#!/bin/zsh
dry=0
debug=0
primarypref=
printstate=0
label=0
single=0
toggle=0
virtuals=0
lid-open && defclam=0 || defclam=1
orphan=1
for arg ; do
  case "$arg" in
    (-n|--dry*) ((++dry)) ;;
    (-d|--debug) ((++debug)) ;;
    (--status) ((++printstate)) ;;
    (--label) ((++label)) ;;
    (--toggle) ((++toggle)) ;;
    (--primary=*) primarypref=${arg#*=} ;;
    (--clam|--only-ext) clam=1 ;;
    (--noclam|--all) clam=0 ;;
    (--single) single=1 ;;
    (--virt) virtuals=1 ;;
    (--orphan=*)
      case "${arg#--orphan=}" in
        (left) orphan=0 ;;
        (mid|middle|center) orphan=1 ;;
        (right) orphan=2 ;;
      esac
      ;;
    (--no=*|--off=*|--skip=*) skip+=( ${arg#*=} ) ;;
    (*)
      tput setaf 1 >&2
      printf 'Unknown option: %s\n' "$arg"
      tput sgr0 >&2
      exit 1
      ;;
  esac
done
[[ -f ~/.config/mon ]] && . ~/.config/mon

if (( label ))
then
  xrandr |
  awk -v q=\' '
  $1 == "Screen" {
    # "2160," -> "2160"
    h = substr($10,1,length($10)-1)
    print "convert -geometry +0+0 -size " $8 $9 h " xc:none \\"
    print " -pointsize 72 -fill white \\"
  }
  $2 == "connected" {
    nd = split($3 ~ /x/ ? $3 : $4, d, /[^0-9]/)
    name = $1
    w = d[1]
    h = d[2]
    x = d[3]
    y = d[4]
    tw = w/2
    tx = x + w/2
    ty = y + h/2
    print "\\( \\"
    print " -size " w "x" h " xc:none \\"
    txt = "-draw \"text 0,0 " q name q "\""
    print " -gravity center \\"
    print " -stroke black -strokewidth 15 " txt " \\"
    print " -stroke none " txt " \\"
    print " -trim +repage \\"
    print " -bordercolor none -border " (w/64) " \\"
    print " \\( +clone -draw \"color 0,0 reset\" \\) \\"
    print " -compose overlay -composite \\"
    print " -background none -extent " w "x" h " \\"
    print " -shave 10x10 \\"
    print " -compose copy \\"
    print " -bordercolor green -border 10 \\"
    print " -repage +" x "+" y " \\"
    print "\\) \\"
  }
  END { print " -layers flatten -geometry +0+0 x:" }
  ' |
  tee /dev/tty |
  exec sh -xs
fi

if (( toggle ))
then
  if [[ "$($0 --status)" = (*' '*) ]]
  then single=1
  else single=0
  fi
fi

xrandr --query --verbose |
awk \
  -v single=${single:-0} \
  -v clam=${clam:-$defclam} \
  -v dry=$dry \
  -v orderpref=$orderpref \
  -v primarypref="$primarypref" \
  -v skippref="$skip" \
  -v virtuals=$virtuals \
  -v debug=$debug \
  -v status=$printstate \
  -v orphan=$orphan \
'BEGIN {
  nout = split("", outs)
  nmodes = split("", modes)
  out = ""
  nskip = split(skippref, skipouts)
  split("", skip)
  for (i=1; i<=nskip; i++) {
    skip[skipouts[i]]++
  }
  norder = split(orderpref, order)
  split("", inpref)
  for (i=1; i<=norder; i++) {
    inpref[order[i]]++
  }
}
{ mode = "" ; heading = 0 }
!/^Screen/ && !/^[[:space:]]/ { heading = 1 }
/^  [^[:space:]]/ { mode = $1 }
heading {
  out = $1
  outs[++nout] = out
}
mode {
  nmodes++
  modeid[nmodes] = mode
  hasmode[out]++
}
mode && !first[out] { first[out] = nmodes }
mode && /[+]preferred/ && !preferred[out] { preferred[out] = nmodes }
mode && /[*]current/ && !current[out] { current[out] = nmodes }
nmodes && $1 == "h:" { modew[nmodes] = $3 }
nmodes && $1 == "v:" { modeh[nmodes] = $3 }
function warnf(fmt,x) { printf(fmt,x) | "cat >&2" }
function warnraw(x) { warnf("%s", x) }
function warn(x) { warnf("%s\n", x) }
function debugarray(nm,arr,k,n,i,stringy,keys) {
  n = 0
  stringy = 0
  for (k in arr) {
    keys[++n] = k
    if (k ~ /[^0-9]/) {
      stringy = 1
    }
  }
  if (!stringy) {
    for (i=1; i<=n; i++) {
      if (!(i in arr)) {
        stringy = 1
        last
      }
    }
  }
  if (!stringy) {
    for (i=1; i<=n; i++) {
      keys[i] = i
    }
  }
  split(stringy ? "{}" : "[]", delims, //)
  warnf("%s[", nm)
  warnf(n "]=%s", delims[1])
  for (i=1; i<=n; i++) {
    k = keys[i]
    if (i > 1) {
      warnraw(" ")
    }
    if (stringy) {
      warnf(":%s ", k)
    }
    warnf("\"%s\"", arr[k])
  }
  warn(delims[2])
}
function dumpall() {
  debugarray("order", order)
  debugarray("modeid", modeid)
  debugarray("modew", modew)
  debugarray("modeh", modeh)
  debugarray("preferred", preferred)
  debugarray("current", current)
  debugarray("hasmode", hasmode)
  debugarray("actual", actual)
  debugarray("used", used)
  debugarray("usedmode", usedmode)
  debugarray("usedactual", usedactual)
  debugarray("off", off)
  debugarray("cmd", cmd)
  debugarray("cmdg", cmdg)
}
function pushcmd(arg) {
  if (!length(arg)) {
    return
  }
  cmd[++ncmd] = arg
  cmdg[ncmd] = cmdgroup
}
function cmdarg(a,b) {
  pushcmd(a)
  pushcmd(b)
}
END {
  # Find outputs that should be skipped (no mode) or turned off:
  # 1. --single, and the single monitor was already found
  # 2. !virtuals, and the output is virtual
  # 3. --clam, and nothing has been skipped
  for (i=1; i<=nout; i++) {
    out = outs[i]
    if (!hasmode[out]) {
      continue
    }
    turnoff = 0
    if (skip[out]) {
      turnoff = 1
    } else if (single) {
      if (nused) {
        turnoff = 1
      }
    } else if (out ~ /^VIRTUAL/ && !virtuals) {
      turnoff = 1
    } else if (onlypref && !inpref[out]) {
      turnoff = 1
    } else if (nout > 1 && clam && !skippedclam++) {
      turnoff = 1
    }
    if (turnoff) {
      off[++noff] = out
    } else {
      used[++nused] = out
      mode = (out in preferred) ? preferred[out] : first[out]
      usedmode[out] = mode
      isused[out]++
      w[out] = modew[mode]
      h[out] = modeh[mode]
    }
  }
  # Set actual to the set of used outputs in orderpref order
  for (i=1; i<=norder; i++) {
    out = order[i]
    if (!hasmode[out] || !isused[out]) {
      continue
    }
    actual[++nactual] = out
    usedactual[out] = 1
  }
  # Also set up outputs unspecified by orderpref
  for (i=1; i<=nused; i++) {
    out = used[i]
    if (usedactual[out]) {
      continue
    }
    actual[++nactual] = out
    usedactual[out] = 1
  }
  if (status) {
    outputs = ""
    for (i=1; i<=nout; i++) {
      out = outs[i]
      if (current[out]) {
        outputs = outputs (outputs ? " " : "") out
      }
    }
    print outputs
    exit 0
  }
  ++cmdgroup
  cmdarg("xrandr")
  if (dry) {
    ++cmdgroup
    cmdarg("--dryrun")
  }
  for (i=1; i<=noff; i++) {
    ++cmdgroup
    cmdarg("--output", off[i])
    cmdarg("--off")
  }
  posx = 0
  posy = 0
  maxy = 0
  nwide = 2
  noutodd = (nactual % 2) ? 1 : 0
  if (nactual > 3) {
    nwide = int(nactual / 2) + noutodd
  }
  primaryout = usedactual[primarypref] ? primarypref : actual[1]
  for (i=1; i<=nactual; i++) {
    out = actual[i]
    if (1 == i % nwide) {
      posx = 0
      posy += maxy
      maxy = 0
    } else {
      prev = actual[i-1]
      posx += w[prev]
    }
    if (h[out] > maxy) {
      maxy = h[out]
    }
    if (i == nwide + 1 && noutodd) {
      posx += int(orphan * w[out] / 2)
    }
    mode = modeid[usedmode[out]]
    pos = posx "x" posy
    ++cmdgroup
    cmdarg("--output", out)
    if (out == primaryout) cmdarg("--primary")
    cmdarg("--mode", mode)
    cmdarg("--pos", pos)
    # TODO(bhaskell): why does explicit CRTC specification seem to be needed?
    cmdarg("--crtc", ncrtc++)
  }
}
END {
  if (ncmd) {
    if (debug) {
      if (debug > 1) dumpall()
      for (i=1; i<=ncmd; i++) {
        arg = cmd[i]
        g = cmdg[i]
        while (i < ncmd && cmdg[i+1] == g) {
          arg = arg " " cmd[++i]
        }
        print arg
      }
    } else {
      interpreter = cmd[1]
      nulcmd = ""
      for (i=2; i<=ncmd; i++) {
        nulcmd = nulcmd (nulcmd ? "\000" : "") cmd[i]
      }
      print nulcmd | ("xargs -0 " interpreter)
    }
  }
}'
