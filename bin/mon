#!/bin/zsh
dry=0
debug=0
single=0
virtuals=0
lid-open && defclam=0 || defclam=1
for arg ; do
  case "$arg" in
    (--dry*) ((++dry)) ;;
    (--debug) ((++debug)) ;;
    (--clam|--only-ext) clam=1 ;;
    (--noclam|--all) clam=0 ;;
    (--single) single=1 ;;
    (--virt) virtuals=1 ;;
    (*)
      tput setaf 1 >&2
      printf 'Unknown option: %s\n' "$arg"
      tput sgr0 >&2
      exit 1
      ;;
  esac
done
[[ -f ~/.config/mon ]] && . ~/.config/mon

if (( dry > 1 ))
then cmd=( xargs -0 printf '%s\n' xrandr )
elif (( dry ))
then cmd=( cat )
else cmd=( xargs xrandr )
fi

xrandr --query --verbose |
awk \
  -v single=${single:-0} \
  -v clam=${clam:-$defclam} \
  -v dry=$dry \
  -v orderpref=$orderpref \
  -v virtuals=$virtuals \
  -v debug=$debug \
'BEGIN {
  nout = split("", outs)
  nmodes = split("", modes)
  out = ""
  norder = split(orderpref, order)
  split("", inpref)
  for (i=1; i<=norder; i++) {
    inpref[order[i]]++
  }
}
{ mode = "" ; heading = 0 }
!/^Screen/ && !/^[[:space:]]/ { heading = 1 }
/^  [^[:space:]]/ { mode = $1 }
heading {
  out = $1
  outs[++nout] = out
}
mode {
  nmodes++
  modeid[nmodes] = mode
  hasmode[out]++
}
mode && !first[out] { first[out] = nmodes }
mode && /[+]preferred/ && !preferred[out] { preferred[out] = nmodes }
mode && /[*]current/ && !current[out] { current[out] = nmodes }
nmodes && $1 == "h:" { modew[nmodes] = $3 }
nmodes && $1 == "v:" { modeh[nmodes] = $3 }
function warnf(fmt,x) { printf(fmt,x) | "cat >&2" }
function warnraw(x) { warnf("%s", x) }
function warn(x) { warnf("%s\n", x) }
function debugarray(nm,arr,k,n,i,stringy,keys) {
  n = 0
  stringy = 0
  for (k in arr) {
    keys[++n] = k
    if (k ~ /[^0-9]/) {
      stringy = 1
    }
  }
  if (!stringy) {
    for (i=1; i<=n; i++) {
      if (!(i in arr)) {
        stringy = 1
        last
      }
    }
  }
  if (!stringy) {
    for (i=1; i<=n; i++) {
      keys[i] = i
    }
  }
  split(stringy ? "{}" : "[]", delims, //)
  warnf("%s[", nm)
  warnf(n "]=%s", delims[1])
  for (i=1; i<=n; i++) {
    k = keys[i]
    if (i > 1) {
      warnraw(" ")
    }
    if (stringy) {
      warnf(":%s ", k)
    }
    warnf("\"%s\"", arr[k])
  }
  warn(delims[2])
}
END {
  # Find outputs that should be skipped (no mode) or turned off:
  # 1. --single, and the single monitor was already found
  # 2. !virtuals, and the output is virtual
  # 3. --clam, and nothing has been skipped
  for (i=1; i<=nout; i++) {
    out = outs[i]
    if (!hasmode[out]) {
      continue
    }
    turnoff = 0
    if (single) {
      if (nused) {
        turnoff = 1
      }
    } else if (out ~ /^VIRTUAL/ && !virtuals) {
      turnoff = 1
    } else if (onlypref && !inpref[out]) {
      turnoff = 1
    } else if (nout > 1 && clam && !skippedclam++) {
      turnoff = 1
    }
    if (turnoff) {
      off[++noff] = out
    } else {
      used[++nused] = out
      mode = (out in preferred) ? preferred[out] : first[out]
      usedmode[out] = mode
      isused[out]++
      w[out] = modew[mode]
      h[out] = modeh[mode]
    }
  }
  # Set actual to the set of used outputs in orderpref order
  for (i=1; i<=norder; i++) {
    out = order[i]
    if (!hasmode[out] || !isused[out]) {
      continue
    }
    actual[++nactual] = out
    usedactual[out] = 1
  }
  # Also set up outputs unspecified by orderpref
  for (i=1; i<=nused; i++) {
    out = used[i]
    if (usedactual[out]) {
      continue
    }
    actual[++nactual] = out
    usedactual[out] = 1
  }
  if (debug) {
    debugarray("order", order)
    debugarray("modeid", modeid)
    debugarray("modew", modew)
    debugarray("modeh", modeh)
    debugarray("preferred", preferred)
    debugarray("current", current)
    debugarray("hasmode", hasmode)
    debugarray("actual", actual)
    debugarray("used", used)
    debugarray("usedmode", usedmode)
    debugarray("usedactual", usedactual)
    debugarray("off", off)
    exit 0
  }
  ORS = (dry > 1) ? "\000" : "\n"
  if (dry) {
    print "--dryrun"
  }
  for (i=1; i<=noff; i++) {
    print "--output", off[i], "--off"
  }
  posx = 0
  posy = 0
  maxy = 0
  nwide = 2
  noutodd = (nactual % 2) ? 1 : 0
  if (nactual > 3) {
    nwide = int(nactual / 2) + noutodd
  }
  for (i=1; i<=nactual; i++) {
    out = actual[i]
    if (1 == i % nwide) {
      posx = 0
      posy += maxy
      maxy = 0
    } else {
      prev = actual[i-1]
      posx += w[prev]
    }
    if (h[out] > maxy) {
      maxy = h[out]
    }
    if (i == nwide + 1 && noutodd) {
      posx += int(w[out] / 2)
    }
    modeflag = ((i == 1) ? "--primary " : "") "--mode"
    mode = modeid[usedmode[out]]
    pos = posx "x" posy
    print "--output", out, modeflag, mode, "--pos", pos
  }
}' | $cmd
