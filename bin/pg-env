#!/usr/bin/env ruby
#
# Runs a subprocess with the correct exported PostgreSQL env vars for connecting
#
# For use under `rails runner`, e.g.:
# rails r script/spawn psql    -- no better than `rails db`, just an example
# zeus r script/spawn ENV=test psql    -- faster than `rails db -e test`
# zeus r script/spawn go run script/privacy-list.go

# re-execute under rails runner if this looks like a Rails app and we're not
# already in it.  Use `zeus`, too, if it looks like it's running

RE_EXEC_MARKER = %w[-- __re-exec__]

if !defined?(Rails) && %w[config app lib].all? { |dir| File.exists?(dir) }
  cmd = File.exists?('.zeus.sock') ? 'zeus' : 'rails'
  exec(cmd, 'runner', __FILE__, *RE_EXEC_MARKER, *ARGV.dup)
end

ARGV.shift(RE_EXEC_MARKER.size) if ARGV.slice(0, RE_EXEC_MARKER.size) == RE_EXEC_MARKER

def envname
  @envname || Rails.env
end

def config
  heroku_config ||
  ActiveRecord::Base.configurations[envname] ||
    ActiveRecord::Base.connection_config.stringify_keys
end

def heroku_config
  appname = envname.sub(/^heroku:/, '')
  return if appname == envname
  url_to_config %x{heroku config:get DATABASE_URL -a #{appname}}.chomp
end

def url_to_config(url)
  u = URI(url)
  u.define_singleton_method(:database) { u.path[1..-1] }
  Hash[{
    scheme: 'adapter',
    host: 'host',
    port: 'port',
    user: 'user',
    password: 'password',
    database: 'database',
  }.map do |method, key|
    val = u.send(method)
    val ? [key, val] : nil
  end.compact]
end

CONFIG_TO_ENV = {
  host: 'PGHOST',
  port: 'PGPORT',
  username: 'PGUSER',
  user: 'PGUSER',
  password: 'PGPASSWORD',
  database: 'PGDATABASE',
}

def env
  CONFIG_TO_ENV.select do |k,v|
    config.key?(k.to_s) && config[k.to_s]
  end.map do |k, var|
    [var, config[k.to_s].to_s]
  end.to_h
end

env_arg = /\AENV=(.+)\Z/
args = []
cmd = []

while ARGV.any?
  arg = ARGV.shift
  match = arg.match(env_arg)

  if match
    @envname = match[1]
  elsif arg == '--'
    cmd += ARGV
    break
  elsif arg =~ /^-/
    args << arg
  else
    cmd << arg
    cmd += ARGV
    break
  end
end

def with_args?(args, *options, &block)
  return unless options.any? { |opt| args.include?(opt) }
  block.call
  exit
end

def help
  puts "Usage: [ENV=envname | -h | --help | -p | --print] [--] cmd [args]"
end

with_args?(args, *%w[--help -h]) { help }

unless %w[postgres postgresql].include?(config["adapter"])
  abort "Only works for PostgreSQL currently"
end

with_args?(args, *%w[--print -p]) { puts env.map { |kv| kv.join('=') } }

cmd = %w[psql] if cmd.empty?

exec(env, *cmd)
