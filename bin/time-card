#!/usr/bin/ruby

require 'pp'
require 'ostruct'
require 'optparse'

opts = OpenStruct.new
use = { :histfile => false, :vimtrack => false, :chromium => false }
opts.cutoff = 14
opts.chunk = 10
optparse = OptionParser.new do |o|
	o.on('-h') { use[:histfile] = true }
	o.on('-v') { use[:vimtrack] = true }
	o.on('-c') { use[:chromium] = true }
	o.on('--cutoff') { opts.cutoff = 14 }
	o.on('--chunk') { opts.chunk = 10 }
	o.on('-w N') { |n| opts.width = n.to_i }
	o.on('--whour N') { |n| opts.whour = n.to_i }
end.parse!(ARGV)

if not opts.width and not opts.whour
	opts.width = 120
	opts.whour = 13
elsif opts.width
	opts.whour = 30
elsif opts.whour
	opts.width = 10000
end

unless use.select { |k,v| v }.length > 0
	use.each { |k,v| use[k] = true }
	ARGV << "#{ENV['HOME']}/.historyfile" if ARGV.size.zero?
end

now = Time.new
min_date = now - 86400 * opts.cutoff

times = {}
min_max = {}
min_chunk = opts.chunk
abort "min_chunk should divide 60 (but is #{min_chunk})" if 60 % min_chunk != 0

@wk_fmt = '%Y week %U'
@day_fmt = '%Y-%m-%d - %a'
@blk_fmt = '%H:%M'

all_times = []

if use[:histfile]
	ARGV << ENV['HOME']+'/.historyfile' if ARGV.empty?
	ARGF.each do |line|
		m = line.match(/^: (\d+):\d+;/) or next
		all_times << [ 'hist', Time.at(m[1].to_i) ]
	end
end

if use[:vimtrack]
	begin
		require 'rubygems'
		require 'dbi'
		dbh = DBI.connect('DBI:SQLite3:' + (ENV['HOME'] or abort 'home?') + '/.vim.local/timetrack.sqlite3')
		sth = dbh.prepare('select time from edited_files')
		sth.execute
		while r = sth.fetch
			all_times << [ 'vim', Time.at(r[0].to_i) ]
		end
		sth.finish
		dbh.disconnect
	rescue
		puts "Couldn't read Vim tracking"
	end
end

if use[:chromium]
	begin
		require 'find'
		require 'open3'
		@dbfiles = []
		dirs = ['google-chrome','chromium'].map { |d| ENV['HOME'] + '/.config/' + d }
		Find.find(*dirs) do |path|
			case File.basename(path)
			when 'History'
				if File.mtime(path) >= min_date
					@dbfiles << path
				end
			end
		end
		@dbfiles = @dbfiles.map { |path| [ path, path + '.readonly' ] }
		@readonly = @dbfiles.map do |paths|
			file, readonly = paths
			cmd = ['rsync','-av',file,readonly]
			Open3.popen3(*cmd)
			readonly
		end

		require 'rubygems'
		require 'dbi'
		require 'date'

		@windows_epoch = Date.civil(1601,1,1).strftime("%s").to_f
		def from_chrometime(nanoseconds)
			Time.at(@windows_epoch + (nanoseconds.to_i / 1e6))
		end

		def to_chrometime(time)
			Time.at(1e6 * time.to_i - @windows_epoch).strftime("%s")
		end

		@readonly.each do |path|
			# Open3.popen3('sqlite3',path,'.schema') { |i,o,e| puts o.read }
			# next
			#puts "Fetching from #{path}"
			dbh = DBI.connect("DBI:SQLite3:#{path}")
			sth = dbh.prepare(<<SQL)
select urls.url, visit_time
from visits
join urls on visits.url = urls.id
where length(title) > 0
order by visit_time
SQL
			sth.execute
			while r = sth.fetch
				url, time = r
				case url
				when /google/, /benizi/, /webmail/, /reviews\/dashboard/
				else
					#puts "#{from_chrometime(time)} #{url}"
					all_times << [ 'chromium', from_chrometime(time) ]
				end
			end
			sth.finish
			dbh.disconnect
		end
	end
end

all_times.select {|t| t[-1] >= min_date }.each do |info|
	label, t = info
	r = Time.at(t - t.to_i % (min_chunk * 60))
	wk = r.strftime("%Y week %U")
	day = r.strftime("%Y-%m-%d - %a")
	block = r.strftime("%H:%M")

	min_max[day] ||= {}
	mmd = min_max[day]
	mmd[:min] ||= t
	mmd[:max] ||= t
	mmd[:min] = t if t < mmd[:min]
	mmd[:max] = t if t > mmd[:max]

	times[wk] ||= {}
	times[wk][day] ||= {}
	times[wk][day][block] ||= 0
	times[wk][day][block] += 1
	# times[f] << t.strftime("%Y-%m-%d %H:%M")
end

times.keys.sort.each do |wk|
	puts '',wk
	times[wk].keys.sort.each do |day|
		h = times[wk][day]
		(0..23).each do |hr|
			(0...60).each do |min|
				next if 0 != min % min_chunk
				h[sprintf "%02d:%02d", hr, min] ||= 0
			end
		end
		x = {}
		h.each do |k,v|
			hr = k[0,2].to_i
			newk = k # hr < 9 ? "<<:" << k[3,2] : hr > 20 ? ">>:" << k[3,2] : k # (9..20).include?(hr) ? k : "xx:xx"
			x[newk] ||= 0
			x[newk] += v
		end
		h = x

		ordered = h.keys.sort
		# Unicode box-drawing chars: 0x2502 = vertical line, ones in @vals are shaded boxes
		sep = [ 0x2502 ].pack("U")
		@vals = [ [ 0, 0x20 ], [ 1, 0x2591 ], [ 3, 0x2592 ], [ 7, 0x2593 ], [ 10, 0x2588 ] ].reverse
		def val_to_chr(val)
			@vals.each do |x|
				v, c = x
				return [c].pack("U") if val >= v
			end
			return '-'
		end

		hourline = []
		minuteline = []
		timeline = []

		chunk = 60 / min_chunk
		ordered.each_slice(chunk) do |keys|
			hourline << sep
			minuteline << sep
			timeline << ''
			keys.each_with_index do |x,i|
				hourline << (i > 2 ? ' ' : i > 0 ? '' : x[0,2])
				minuteline << (i > 0 ? x[3,2] : '  ')
				timeline << (h[x].to_i > 0 ? sprintf((val_to_chr h[x]) * 1) : ' ')
			end
		end

		# hourline << ' ' + day
		puts "#{day} min(#{min_max[day][:min].strftime("%H:%M:%S")}) max(#{min_max[day][:max].strftime("%H:%M:%S")})"
		lines = ['','']
		while hourline.length > 0
			[ hourline, timeline ].each_with_index do |arr,i|
				lines[i] << arr.shift(1 + chunk).join('')
			end
			if lines[0].length > opts.width || lines[0].length > (chunk + 1) * opts.whour || hourline.length == 0
				lines.each { |x| puts x }
				lines = ['','']
			end
		end
		#[ hourline, timeline ].each { |arr| puts arr.join('') }
	end
end
