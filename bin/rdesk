#!/usr/bin/perl
use strict;
use warnings;
use feature ':5.10';
use Getopt::Long qw/:config pass_through/;
my %opt;
GetOptions(
	'size|dimensions|wh|g=s' => \$opt{graphics},
	'server=s' => \$opt{server},
	'username|user|u=s' => \$opt{user},
	'password|pass|p=s' => \$opt{pass},
	'byip' => \(my $use_ips = 0),
	'defaults=s' => \(my $defaults_from = ''),
	'dry' => \(my $dry = 0),
	'verbose+' => \(my $verbose = 0),
	'disk' => \(my $add_disk = 0),
	'sound' => \(my $add_sound = 0),
) or die 'options';
$opt{server} //= shift @ARGV;
shift @ARGV if @ARGV and $ARGV[0] eq '--';
warn "Extra options: (@ARGV)\n" if @ARGV;
$opt{extra} = [@ARGV];

my (%rev_alias, %ip);
my %defaults = (
	'' => {
		graphics => '95%',
		depth => 16,
		user => $ENV{LOGNAME},
		extra => [ '-z' ],
	},
	localhost => {
		depth => 24,
	},
);

for (grep -f, "$ENV{HOME}/.config/rdesk") {
	next unless open my $f, '<', $_;
	eval join '', <$f>;
}

$use_ips ? s/:.*$// : s/^.*:// for values %ip;

my %alias;
while (my ($val, $arr) = each %rev_alias) { $alias{$_} = $val for @$arr; }
die "Must specify server\n" unless defined $opt{server};

my $in_server = delete $opt{server};
for (
	[ $defaults_from, 1, 0 ],
	[ $in_server, 0, 0 ],
	[ '', 0, 1 ],
	) {
	my ($hier, $no_server, $is_last) = @$_;
	while (1) {
		$hier = $alias{$hier // ''} // $hier // '';
		my $atts = ($hier =~ s/^([^,]+),(.*)$/$1/) ? $2 : '';
		last unless $atts;
		for (grep length, $atts) {
			while (s/^,?(\w+)=([^,]+)//) {
				my ($k, $v) = ($1, $2);
				if ($k eq 'size') {
					($k, $v) = (graphics =>
						{qw/small 1010x740 wide 1265x770/}->{$v});
				}
				$opt{$k} //= $v;
			}
			die "Bad attributes: $atts\n" if length $atts;
		}
	}
	my @parts = split /\./, $hier;
	next if !@parts and !$is_last;
	$is_last and !@parts and @parts = ('');
	$opt{server} //= $hier unless $no_server;
	my @keys = map join('.', @parts[$_..$#parts]), 0..$#parts;
	for my $param (qw/graphics depth user pass extra:@/) {
		my ($o, $arr) = split /:/, $param;
		for my $d (map $defaults{$_}||{}, @keys) {
			last if !$arr and defined $opt{$o};
			my $val = $$d{$o};
			next unless defined $val;
			if ($arr) {
				push @{$opt{$o}}, @$val;
			} else {
				$opt{$o} = $val;
			}
		}
	}
}

my @extra = @{$opt{extra}||[]};
push @extra, '-r', 'disk:shared=/home/bhaskell/shared' if $add_disk;
push @extra, '-r', 'sound' if $add_sound;
my $seamless = grep /-A/, @extra;
my @rcmd = (
	rdesktop =>
	grep(!$seamless, -g => $opt{graphics}),
	-a => $opt{depth},
	-u => $opt{user},
	grep(defined($opt{pass}), -p => $opt{pass}),
	@extra,
	$opt{server},
);
$dry and warn "@rcmd\n" and exit;
$verbose and warn "@rcmd\n";
exec { $rcmd[0] } @rcmd;
die "Couldn't exec(",join(",",@rcmd),")\n";
