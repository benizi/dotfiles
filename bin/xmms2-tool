#!/usr/bin/perl
use strict;
use warnings;
use DBI;
use Getopt::Long;
my $opt;
(my $def_opt = $0) =~ s{^.*xmms2-}{};
GetOptions(
	'dry-run' => \(my $dry = 0),
	'out' => \(my $just_out = 0),
	'debug+' => \(my $debug = 0),
	'verbose+' => \(my $verbose = 0),
	'file=s' => \(my $file = "$ENV{HOME}/.config/xmms2/medialib.db"),
	'opt=s' => \$opt,
	'<>' => sub {
		local $_ = shift;
		my $pn = qr/^prev(?:ious)?|next$/;
		my $die = 0;
		if (/$pn/) {
			$opt //= $def_opt;
			$die = 1 if $opt and $opt =~ /$pn/;
			$opt .= $_;
		} else {
			$die = defined $opt;
			$opt = shift;
		}
		die "Too many options" if $die;
	},
	'current=s' => \(my $current),
) or die 'options';
$opt //= $def_opt;
$opt || die "Must specify something\n";

my (%A,%just_out); BEGIN { undef @A{keys %::} }
$just_out = 1 if $just_out{$opt};

my $dbh = DBI->connect("dbi:SQLite:$file") or die "Connect: $!";

sub _single { ($dbh->selectrow_array(@_)) }

BEGIN { $just_out{currlist}++; }
sub currlist {
	_single(<<SQL);
select collid
from CollectionLabels
where name='_active'
SQL
}

BEGIN { $just_out{total}++; }
sub total {
	_single(<<SQL, {}, currlist);
select count(*) as c
from CollectionIdlists
where collid = ?
SQL
}
BEGIN { $just_out{current}++; }
sub _old_current { # takes an oddly-long time to update
	$current // _single(<<SQL, {}, currlist);
select value
from CollectionAttributes
where key='position'
and collid=?
SQL
}
# CollectionIdlists = collid, position, mid
# CollectionAttributes = collid, key, value
sub current {
	$current // _single(<<SQL, {}, currlist);
select col.position
from media as las
join CollectionIdlists as col on mid=las.id
where las.key='laststarted'
and col.collid = ?
order by las.intval desc
limit 1;
SQL
}
sub _next_prev {
	my $rev = shift;
	my ($gtlt, $desc) = $rev ? ('<', ' desc') : ('>', '');
	my $id = _single(<<SQL, {}, (current, currlist) x 2);
select 1+min(position)
from CollectionIdlists as c
join Media as u on (u.id=mid and u.key='url')
join Media as a on (a.id=mid and a.key='artist')
join Media as al on (al.id=mid and al.key='album')
where position $gtlt ?
and collid=?
and al.value <> (
	select al.value
	from CollectionIdlists as c
	join Media as al on (mid=al.id and al.key='album')
	where position=?
	and collid=?
)
group by al.value
order by position$desc
limit 1
SQL
	$id // ($rev ? total : 0);
}
sub albumnext { _next_prev 0 }
sub albumprev { _next_prev 1 }

sub _random {
	my $rev = shift;
	srand 618;
	my @i = (0..total-1);
	my @all;
	push @all, splice @i, rand(@i), 1 while @i;
	my $curr = current;
	my ($ci) = grep $all[$_] == $curr, 0..$#all;
	return $all[(($rev?-1:1)+$ci) % @all];
}
sub random { _random 0 }
sub randomnext { _random 0 }
sub randomprev { _random 1 }

sub _get_config { chomp(my $ret = `nyxmms2 server config $_[0]`); (split ' ', $ret)[-1] }
sub _rpt { _get_config "playlist.repeat_$_[0]" }
BEGIN { $just_out{repeat_status}++; }
sub repeat_status {
	my ($r1, $ra) = map _rpt($_), qw/one all/;
	$r1 ? "<1>" : $ra ? "<->" : "-->";
}
BEGIN { $just_out{repeat}++; }
sub repeat {
	my ($r1, $ra) = map _rpt($_), qw/one all/;
	my ($s1, $sa);
	if (!$r1 and !$ra) {
		$sa = 1;
	} elsif ($ra and !$r1) {
		$s1 = 1;
	} else {
		($sa, $s1) = (0, 0);
	}
	for ([all=>$sa],[one=>$s1]) {
		my ($which, $doit) = @$_;
		$doit // next;
		system "nyxmms2 server config playlist.repeat_$which $doit";
	}
	repeat_status
}

my %dispatch;
$dispatch{$_} = eval "\\&$_" for grep /[a-z]/, grep !/::$/, grep !/^_/, grep !exists($A{$_}), keys %::;
my $value = ($dispatch{$opt} || sub { die "Unknown option: $opt\n" })->();
print "$0 $opt => $value\n" and exit if $dry;
print $value, "\n" and exit if $just_out;
my @cmd = ("xmms2", "jump", $value);
print "@cmd\n" if $verbose;
system { $cmd[0] } @cmd;
