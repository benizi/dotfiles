#!/usr/bin/ruby

require 'optparse'
require 'thread'

opt = {}
optparse = OptionParser.new do |o|
	o.on('-k','--keep') { opt[:keep] = true }
	o.on('-f','--force') { opt[:overwrite] = true }
end
optparse.parse!(ARGV)

class File
	def is?(type)
		types = {
			:xz => "\xfd7zXZ\x00\x00",
			:bz2 => "BZh91AY",
			:gz => "\x1f\x8b\x08\x00",
		}
		return nil if pos != 0
		return nil unless sig = types[type]
		ret = read(sig.size) == sig
		rewind
		ret
	end
end

## See: http://stackoverflow.com/questions/2108727/3380168#3380168
#
def has_program?(program)
	ENV['PATH'].split(File::PATH_SEPARATOR).any? do |directory|
		File.executable?(File.join(directory, program.to_s))
	end
end

todo = Queue.new

def over?(newfn, opt)
	abort "#{newfn} exists!" if File.exist?(newfn) and not opt[:overwrite]
end

ARGV.each do |filename|
	abort "#{filename} doesn't exist?" unless File.exist?(filename)
	abort "#{filename} isn't gzip?" unless File.new(filename).is?(:gz)
	newfn = filename.
		sub(/\.tar\.gz$/,'.tar.xz').
		sub(/\.tgz$/,'.tar.xz').
		sub(/gz$/,'xz').
		sub(/gzip$/,'xz')
	over?(newfn, opt)
	# TODO: wow -- pipes are confusing...
	abort "Can only handle filenames that don't need quoting" unless [ filename, newfn ].grep(/[^A-Za-z0-9_\/.\-]/).empty?
	todo << [ filename, newfn ]
end

until todo.empty?
	filename, newfn = todo.pop
	over?(newfn, opt)
	cat = has_program?('pv') ? 'pv' : 'cat'
	cmd = "#{cat} < #{filename} | gzip -d | xz > #{newfn}"
	puts "Creating #{newfn} from #{filename}\n{ #{cmd} }"

	if system(cmd)
		old_size, new_size = File.size(filename), File.size(newfn)
		File.unlink(filename) if File.new(newfn).is?(:xz)
		puts <<REPORT
Original: #{old_size} #{filename}
New     : #{new_size} #{newfn}
Savings : #{old_size - new_size} = #{sprintf("%.2f%%", (100.0 * (old_size - new_size) / old_size))}
REPORT
	else
		File.unlink(newfn) if File.exist?(newfn)
		abort "Failed to run:\n#{cmd}"
	end
end
