#!/usr/bin/ruby

require 'optparse'
require 'thread'

opt = {
	:out => :xz
}
optparse = OptionParser.new do |o|
	o.on('-k','--keep') { opt[:keep] = true }
	o.on('-f','--force') { opt[:overwrite] = true }
	o.on('--out TYPE','-d TYPE','--dest TYPE') { |t| opt[:out] = t.to_sym }
	o.on('--dry','--dry-run') { opt[:dry] = true }
end
optparse.parse!(ARGV)

TYPES = {
	:xz => { :prog => 'xz', :long => 'xzip', :sig => "\xfd7zXZ\x00\x00" },
	:bz2 => { :prog => 'bzip2', :sig => "BZh91AY" },
	:gz => { :prog => 'gzip', :sig => "\x1f\x8b\x08\x00" },
}
OUT = TYPES[opt[:out]] or abort "No definitions for output type #{opt[:out]}"

class File
	def is?(type)
		return nil if pos != 0
		return nil unless sig = TYPES[type][:sig]
		ret = read(sig.size) == sig
		rewind
		ret
	end
end

## See: http://stackoverflow.com/questions/2108727/3380168#3380168
#
def has_program?(program)
	ENV['PATH'].split(File::PATH_SEPARATOR).any? do |directory|
		File.executable?(File.join(directory, program.to_s))
	end
end

todo = Queue.new

def over?(newfn, opt)
	abort "#{newfn} exists!" if File.exist?(newfn) and not opt[:overwrite]
end

ARGV.each do |filename|
	unless File.exist?(filename)
		warn "#{filename} doesn't exist?"
		next
	end
	if File.new(filename).is?(opt[:out])
		long = OUT[:long] || OUT[:prog]
		warn "#{filename} is already #{long}'ed"
		next
	end
	base = nil
	types = []
	TYPES.each do |type,atts|
		[ type.to_s, atts[:prog] ].uniq.each do |ext|
			case filename
			when %r{^(.+)\.(?:tar\.|t)#{ext}$}
				base = $1
				types += [ :tar, type ]
			when %r{^(.+)\.#{ext}$}
				base = $1
				types << type
			end
			types.empty? or break
		end
		types.empty? or break
	end
	if types.empty?
		warn "Couldn't determine type for #{filename}"
		next
	end
	newfn = base.dup
	newfn << ".#{types[0]}" if types.size > 1
	newfn << ".#{opt[:out]}"
	over?(newfn, opt)
	# TODO: wow -- pipes are confusing...
	abort "Can only handle filenames that don't need quoting" unless [ filename, newfn ].grep(/[^A-Za-z0-9_\/.\-]/).empty?
	todo << [ filename, newfn, types[-1] ]
end

until todo.empty?
	filename, newfn, src_type = todo.pop
	over?(newfn, opt)
	cat = has_program?('pv') ? 'pv' : 'cat'
	decomp = TYPES[src_type.to_sym][:prog]
	comp = OUT[:prog]
	cmd = "#{cat} < #{filename} | #{decomp} -d | #{comp} > #{newfn}"
	puts "Creating #{newfn} from #{filename}\n{ #{cmd} }"
	next if opt[:dry]

	if system(cmd)
		old_size, new_size = File.size(filename), File.size(newfn)
		File.unlink(filename) if File.new(newfn).is?(:xz)
		puts <<REPORT
Original: #{old_size} #{filename}
New     : #{new_size} #{newfn}
Savings : #{old_size - new_size} = #{sprintf("%.2f%%", (100.0 * (old_size - new_size) / old_size))}
REPORT
	else
		File.unlink(newfn) if File.exist?(newfn)
		abort "Failed to run:\n#{cmd}"
	end
end
