#!/usr/bin/env python

from __future__ import print_function

import hashlib
import os
from sys import argv

CHUNK_SIZE = int(os.environ.get('CHUNK_SIZE', 7 << 20))
MIN_CHUNKED = int(os.environ.get('MIN_CHUNKED', CHUNK_SIZE))


def etag(source, size=None):
    pieces = []
    chunked = size and size >= MIN_CHUNKED
    with open(source, 'rb') as f:
        if not chunked:
            return hashlib.md5(f.read()).hexdigest()
        while True:
            block = f.read(CHUNK_SIZE)
            if len(block) or not pieces:
                pieces.append(hashlib.md5(block).digest())
            if len(block) != CHUNK_SIZE:
                break
    return '%s-%s' % (hashlib.md5(b''.join(pieces)).hexdigest(), len(pieces))


if __name__ == '__main__':
    fnames = argv[1:] if len(argv) > 1 else ['/dev/stdin']
    for fname in fnames:
        size = os.path.getsize(fname)
        print("%s\t%s\t%s" % (size, etag(fname, size), fname))
