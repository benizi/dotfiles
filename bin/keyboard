#!/usr/bin/perl
use strict;
use warnings;
use feature ':5.10';
use FindBin '$Bin';
use Getopt::Long qw/:config pass_through/;
use IPC::Run;
my %opt;
my @xkbopts = qw/rules model layout variant keycodes/;
my @default_options = qw/terminate:ctrl_alt_bksp/;

sub version {
	local @ARGV = grep -f, map "/sys/devices/virtual/dmi/id/${_}_version", @_;
	do { undef local $/; (@ARGV ? <> : "") }
}

my $is_macbook = (version 'board') =~ /MacBook/;
push @default_options, 'benizi:x240' if (version 'product') =~ /X240/;

my $xkb_dir = "$Bin/../xkb";

GetOptions(
	(map {; "$_=s" => \$opt{$_} } @xkbopts),
	'o|option=s@' => \my @options,
	'dry' => \(my $dry_run = 0),
	'extra=s@' => \my @extra,
	'winkey=s' => \(my $win = 'mod4'),
	'modmap=s@' => \my @modmaps,
	'M|justmod' => \(my $just_modmap = 0),
	'clear' => \(my $clear_mods),
	'I=s@' => \my @includes,
	'macbook' => \$is_macbook,
	'print' => \(my $just_print),
) or die 'options';

@includes = grep -d, $xkb_dir unless @includes;
@modmaps = grep -f, "$xkb_dir/.xmodmap" unless @modmaps;

sub run_it {
	my @flat = map ref() ? @$_ : $_, grep { (!ref) or ('ARRAY' eq ref) } @_;
	$_ = (length) ? $_ : "''" for @flat;
	print "@flat\n";
	$dry_run and return;
	@_ = [@_] unless grep ref, @_;
	&IPC::Run::run;
}
push @options, @default_options;
my %defaults = (
	rules => 'benizi',
	model => 'pc104',
	layout => 'benizi',
	variant => 'intl',
	keycodes => 'evdev',
);
for (qw/layout variant/) { $opt{$_} //= shift @ARGV if @ARGV; }
push @extra, @ARGV if @ARGV;
warn "Extra options: (@extra)\n" if @extra;
$opt{$_} //= $defaults{$_} for keys %defaults;

sub setxkbmap {
	my @inc = map "-I$_", @includes;

	my @cmd = ('setxkbmap', @inc);
	push @cmd, map {; "-$_" => $opt{$_} } grep length($opt{$_}), @xkbopts;
	push @cmd, -option => $_ for @options;
	push @cmd, @extra;
	push @cmd, '-print';

	my @xkbcomp = (qw/xkbcomp -w 3/, @inc, '-', $ENV{DISPLAY});

	@cmd = ([@cmd]);
	push @cmd, '|', [@xkbcomp] unless $just_print;
	run_it @cmd;
}

sub xmodmap_e {
	run_it xmodmap => -e => "@_";
}

sub swap_mods {
	my ($key, $old, $new) = @_;
	xmodmap_e "remove $old = $key";
	xmodmap_e "add $new = $key";
}

sub xmodmap_files {
	run_it xmodmap => $_ for @modmaps;
}

sub macbook_mousekeys {
	my ($b2, $b3) = (64, 108);
	xmodmap_e "keycode $b2 = Pointer_Button2";
	xmodmap_e "keycode $b3 = Pointer_Button3";
	run_it xkbset => 'm';
}

sub windows_key {
	swap_mods 'Super_L', sort { ($a eq $win) <=> ($b eq $win) } qw/mod3 mod4/;
}

sub system_key {
	$is_macbook ? macbook_mousekeys : windows_key;
}

sub alt_is_meta {
	swap_mods 'Alt_R', 'mod1', 'mod3';
}

sub clear_mods {
	run_it xdotool => keyup => $_
		for qw/
		Hyper_L Hyper_R
		Super_L Super_R
		Alt_L Alt_R
		Control_L Control_R
		Shift_L Shift_R
		/;
}

sub main {
	setxkbmap unless $just_modmap;
	return if $just_print;
	xmodmap_files;
	system_key;
	alt_is_meta;
	clear_mods if $clear_mods;
}

main

__END__
setxkbmap
-model pc104
-layout us
-variant intl
-option ''
-option lv3:ralt_switch
-option altwin:super_win
-option ctrl:nocaps
-option compose:menu
