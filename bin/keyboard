#!/usr/bin/perl
use strict;
use warnings;
use feature ':5.10';
use FindBin '$Bin';
use Getopt::Long qw/:config pass_through/;
use IPC::Run;
my (%opt, %args);
my @xkbopts = qw/rules model layout variant keycodes/;
my @default_options = qw/terminate:ctrl_alt_bksp/;

sub version {
	local @ARGV = grep -f, map "/sys/devices/virtual/dmi/id/${_}_version", @_;
	do { undef local $/; (@ARGV ? <> : "") }
}

my $is_macbook = (version 'board') =~ /MacBook/;

my $xkb_dir = "$Bin/../xkb";
my ($dev, $device_name, $device_id);
my ($device_match, $device_match_id);
my $system_keyboard = 0;
my $all_devices = 0;

my @option_spec = (
	(map {; "$_=s" => \$opt{$_} } @xkbopts),
	'o|option=s@' => \my @options,
	'dry' => \(my $dry_run = 0),
	'winkey=s' => \(my $win = 'mod4'),
	'modmap=s@' => \my @modmaps,
	'M|justmod' => \(my $just_modmap),
	'clear' => \(my $clear_mods),
	'I=s@' => \my @includes,
	'macbook' => \$is_macbook,
	'print' => \(my $just_print),
	'compile!' => \(my $run_xkbcomp = 1),
	'setxkbmap|Wp=s@' => \($args{setxkbmap} = []),
	'xkbcomp|Wc=s@' => \($args{xkbcomp} = []),
	'all' => \$all_devices,
	'device=s' => \$device_match,
	'sys' => sub { $dev = 'sys'; $system_keyboard = 1 },
	'usb' => sub { $dev = 'usb' },
	'pfu|hhkb' => sub { $dev = 'hhkb' },
	'core' => sub { $dev = 'core' },
	'id=i' => \$device_match_id,
	'help' => \(my $usage = 0),
);

sub usage {
  my @flags;
  for my $i (grep !($_ % 2), 0..$#option_spec) {
    my ($names, $type) = split /(?==)/, $option_spec[$i];
    $type //= '';
    $type =~ s/=/ = /;
    my $no = ($names =~ s/!$//);
    push @flags, map "  $_$type", join '/', map "--$_", split /\|/, $names;
  }
  @flags = map {
    local $_ = $_;
    s/(?:^|(?<=\|))/--/g;
    s/=/ = /;
    s!\|!/!g;
    s/-(?=[a-z])(?![a-z]{2})//gi;
    "  $_"
  } @option_spec[grep !($_ % 2), 0..$#option_spec];
  my $flags = join "\n", @flags;
  my $err = @_ ? "ERROR: @_\n" : undef;
  (my $cmd = $0) =~ s{^.*/}{};
  my $usage = join "\n\n", grep defined, $err, <<USAGE, $err;
Usage: $cmd [options]
$flags
USAGE
  $usage =~ s/\n{2,}/\n\n/g;
  $usage =~ s/\n*\Z/\n/;
  $usage
}

GetOptions(@option_spec) or die usage;
print usage and exit if $usage;

$device_match = {
  sys => qr/AT Translated/,
  usb => qr/ThinkPad USB/,
  hhkb => qr/PFU.*HHKB/,
  core => qr/Virtual core/,
}->{$dev} if $dev and not $device_match;

unless ($all_devices or $device_match or $device_match_id) {
  die usage <<DEVICE
Need a device specification:
  --device=NAME / --id=N           (specific device)
  --sys / --usb / --core / --hhkb  (shortcuts)
  --all                            (omit xkbcomp -i flag)
DEVICE
}

{
  my %kbds;

  sub kbd_ids {
    chomp(my @devs = readpipe "xinput list");
    s/^\W+// for @devs;
    @devs = grep /keyboard/, reverse @devs;
    %kbds = map {
      my ($name, $id) = /^(.+?)\s+id=(\d+)/;
      $name ? ($name, 0 + $id) : ()
    } @devs;
  }

  sub find_device {
    kbd_ids unless %kbds;
    while (my ($k, $v) = each %kbds) {
      if ($device_match) {
        next unless $k =~ $device_match;
        next if $device_id and $device_id < $v;
      }
      if ($device_match_id) {
        next unless $v == $device_match_id;
      }
      ($device_name, $device_id) = ($k, $v);
      last if $device_match_id;
    }
  }
}

unless ($all_devices) {
  find_device;
  $dev //= $device_match_id ? 'id' : 'match';
  my $matcher = $device_match // $device_match_id;
  die "Couldn't find device ($dev = $matcher)\n" unless defined $device_id;
}

my $defaults = ($dev and $dev =~ 'hhkb') ? 'hhkb' : 'benizi';
my $just_xkb = ($defaults ne 'benizi' and not defined $just_modmap) ? 1 : 0;

@includes = grep -d, $xkb_dir unless @includes;
@modmaps = grep -f, "$xkb_dir/.xmodmap" unless @modmaps;

if ($system_keyboard and (version 'product') =~ /X240/) {
  push @default_options, 'benizi:x240';
}

{
	my $tty;
	sub tty {
		return $tty if $tty;
		open $tty, '>', '/dev/tty' or $tty = \do { my $stringio = '' };
		$tty;
	}
}

sub terminal_out {
	scalar grep -t, *STDOUT, *STDERR;
}

sub all_piped {
	scalar !grep !-p, *STDOUT, *STDERR;
}

sub want_errors {
	terminal_out and not all_piped;
}

sub run_it {
	my @flat = map ref() ? @$_ : $_, grep { (!ref) or ('ARRAY' eq ref) } @_;
	$_ = (length) ? $_ : "''" for @flat;
	my $fh = $dry_run ? *STDOUT : *STDERR;
	stat $fh;
	$fh = tty if $dry_run and not (-f _ or -p _);
	say $fh "@flat" if $dry_run or want_errors;
	$dry_run and return;
	@_ = [@_] unless grep ref, @_;
	&IPC::Run::run;
}
push @options, @default_options;

my %benizi_defaults = (
	rules => 'benizi',
	model => 'pc104',
	layout => 'benizi',
	variant => 'intl',
	keycodes => 'evdev',
);
my %hhkb_defaults = (
	rules => 'hhkb',
	model => 'pc104',
	layout => 'hhkb',
	variant => 'sw14',
	keycodes => 'hhkb',
);
my %defaults = (
  sys => {%benizi_defaults},
  usb => {%benizi_defaults},
  hhkb => {%hhkb_defaults},
);
%defaults = %{($defaults{$dev // ""} || {})};

for (qw/layout variant/) { $opt{$_} //= shift @ARGV if @ARGV; }
push @{$args{setxkbmap}}, splice @ARGV;
$opt{$_} //= $defaults{$_} for @xkbopts;

for (sort keys %args) {
	my $val = $args{$_};
	next unless @$val;
	warn "Extra $_ options:\n", map "  $_\n", @$val;
}

sub includes {
	map "-I$_", @includes;
}

sub xkbcomp {
  my @dev = $device_id ? (-i => $device_id) : ();
	my @dest = $just_print ? qw/-xkb -o -/ : (@dev, $ENV{DISPLAY});
	my @pipe = grep !want_errors, '2>', sub {};
	[qw/xkbcomp -w 3/, includes, @{$args{xkbcomp}}, '-', @dest], @pipe;
}

sub setxkbmap {
	my @cmd = ('setxkbmap', includes);
	push @cmd, map {; "-$_" => $opt{$_} } grep length($opt{$_}), @xkbopts;
	push @cmd, -option => $_ for @options;
	push @cmd, @{$args{setxkbmap}};
	push @cmd, '-print' if $just_print or $run_xkbcomp;

	@cmd = ([@cmd], '|', xkbcomp) if $run_xkbcomp;

	run_it @cmd;
}

sub xmodmap_e {
	run_it xmodmap => -e => "@_";
}

sub swap_mods {
	my ($key, $old, $new) = @_;
	xmodmap_e "remove $old = $key";
	xmodmap_e "add $new = $key";
}

sub xmodmap_files {
	run_it xmodmap => $_ for @modmaps;
}

sub macbook_mousekeys {
	my ($b2, $b3) = (64, 108);
	xmodmap_e "keycode $b2 = Pointer_Button2";
	xmodmap_e "keycode $b3 = Pointer_Button3";
	run_it xkbset => 'm';
}

sub windows_key {
	swap_mods 'Super_L', sort { ($a eq $win) <=> ($b eq $win) } qw/mod3 mod4/;
}

sub system_key {
	$is_macbook ? macbook_mousekeys : windows_key;
}

sub alt_is_meta {
	swap_mods 'Alt_R', 'mod1', 'mod3';
}

sub clear_mods {
	run_it xdotool => keyup => $_
		for qw/
		Hyper_L Hyper_R
		Super_L Super_R
		Alt_L Alt_R
		Control_L Control_R
		Shift_L Shift_R
		/;
}

sub main {
	setxkbmap unless $just_modmap;
	return if $just_print or $just_xkb;
	xmodmap_files;
	system_key;
	alt_is_meta;
	clear_mods if $clear_mods;
}

main

__END__
setxkbmap
-model pc104
-layout us
-variant intl
-option ''
-option lv3:ralt_switch
-option altwin:super_win
-option ctrl:nocaps
-option compose:menu

setxkbmap
  -I/home/bhaskell/dotfiles/bin/../xkb
  -rules benizi
  -model pc104
  -layout us
  -variant intl
  -keycodes evdev
  -option terminate:ctrl_alt_bksp
  -option benizi:x240
  -print |
  xkbcomp -w 3
  -I/home/bhaskell/dotfiles/bin/../xkb
  - :0

#!/bin/sh

version() {
  grep -q $2 /sys/devices/virtual/dmi/id/${1}_version
}

rules=benizi
model=pc104
layout=benizi
variant=intl
keycodes=evdev

version product X240 && x240_option=benizi:x240 || x240_option=
