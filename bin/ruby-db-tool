#!/usr/bin/env ruby
require 'yaml'
require 'erb'
require 'ostruct'

module Adapters
  class Base
    attr_accessor :cfg

    def initialize(cfg)
      self.cfg = OpenStruct.new(cfg)
    end
  end

  class Mysql < Base
    def grant
      <<SQL
create database if not exists `#{cfg.database}`;
grant all privileges on `#{cfg.database}`.* to '#{cfg.username}'@'localhost' identified by "#{cfg.password}";
flush tables;
SQL
    end

    def _params
      %W[-u#{cfg.username} -p#{cfg.password} -h#{cfg.host || 'localhost'}]
    end

    def connect
      ['mysql'] + _params + %W[-D#{cfg.database}]
    end

    def dump
      ['mysqldump'] + _params + [cfg.database]
    end
  end

  class Postgresql < Base
    def grant
      <<SHELL
-- Create User if it doesn't exist
DO $$ BEGIN
if not exists (select * from pg_catalog.pg_user where usename = '#{cfg.username}')
then create user "#{cfg.username}";
end if;
END $$;
-- Create Database if it doesn't exist (requires 'dblink', unfortunately)
DO $create$ BEGIN
if not exists (select * from pg_database where datname = '#{cfg.database}')
then perform dblink_exec(
  'dbname=' || current_database(),
  $$create database "#{cfg.database}" with owner = "#{cfg.username}"$$
);
end if;
END $create$;
SHELL
    end

    def connect
      %W[psql] + [cfg.database, cfg.username]
    end
  end

  class Sqlserver < Base
    def connect
      cli_tool + server_or_host + user + pass
    end

    private

    def cli_tool
      ['tsql']
    end

    def server_or_host
      if cfg.dataserver
        ['-S', cfg.dataserver]
      elsif host = cfg.host || cfg.hostname
        %W[-H #{host} -p #{cfg.port || 1433}]
      else
        []
      end
    end

    def user
      cfg.username ? ['-U', cfg.username] : []
    end

    def pass
      cfg.password ? ['-P', cfg.password] : []
    end
  end
end

action = $0 =~ /ruby-db-(\w+)$/ ? $1.to_sym : :connect
action = ARGV.shift.to_sym if action == :tool

if yaml = YAML.load(ERB.new(File.read(ENV['CONFIG'] || 'config/database.yml')).result)
  envs = ENV['ENV'] || ENV['RAILS_ENV'] || 'development'
  envs.split.each do |env|
    cfg = yaml[env]

    if !cfg
      warn "No config for env: #{env}"
      next
    end

    adapter = cfg['adapter']
    unless adapter
      warn "No adapter specified for env: #{env}"
      next
    end

    begin
      adapter_class =
        case adapter
        when 'mysql', 'mysql2' ; then Adapters::Mysql
        when 'postgresql' ; then Adapters::Postgresql
        when 'sqlserver' ; then Adapters::Sqlserver
        else raise NotImplementedError, "Adapter #{adapter} not yet handled"
        end

      handler = adapter_class.new(cfg)
      method = handler.method(action)
      args = method.arity == -1 ? ARGV.clone : []
      ret = method.call(*args)
      if String === ret
        if $stdout.tty? and not defined?($warned)
          warn "(Commands aren't being run -- need to pipe them to something)"
          $warned = true
        end
        puts ret
      elsif Array === ret
        exec(*ret)
      else
        raise NotImplementedError, "Action returned non-string/array"
      end
    rescue NameError
      warn %Q{#{adapter} adapter can't handle "#{action}" action. (env: #{env})}
    rescue NotImplementedError => e
      warn e.message
    end
  end
end
