#!/bin/zsh
case $0 in
	*-fresh) argv+=( --scratch http://${${0//-fresh/}:t} ) ;;
	*.*) _profile=$0:e ;;
	*chromium*|*open|*sensible-browser) ;;
	*scratch) argv+=( --scratch ) ;;
	*) _profile=$0:t ;;
esac
function warn () { echo "\e[31m$*\e[0m" >&2 }
function die () { warn $* ; exit 1 }
_dry=false
_plugins=true
unset _url _ua _scratch
_logging=false
_userscripts=true
#_ipv6=true
unset _ipv6
_args=()
_flags=( plugins logging user-scripts ipv6 )

if [[ -d /Applications ]] ; then
	_official="/Applications/Chrome.app/Contents/MacOS/Google Chrome"
	_config_dirs=(
		~/Library/Application\ Support/Google/Chrome
	)
	_remote=false
else
	_official=/opt/google/chrome/chrome
	_config_dirs=(
		~/.config/google-chrome
		~/.config/chromium
	)
	_remote=true
fi

find_exe () {
	unset exe
	if [[ -f $_official ]] ; then
		exe=$_official
	else
		path=( ${path/${${(%):-"%x"}:h}} )
		for command in chromium chromium-bin chrome ; do
			(( $+commands[$command] )) || continue
			exe==$command
			break
		done
	fi
	(( $+exe )) || { echo "Couldn't find chromium/chrome" >&2 ; exit 1 }
}

# check for chromedriver invocation
unset noparse
for arg ; do
	case "$arg" in
		*TestingInterface*) noparse=true ;;
	esac
done

if (( $+noparse )) ; then
	find_exe
	exec $exe $@
fi

while [ $# -gt 0 ] ; do
	arg=$1 ; shift
	for l in $_flags ; do
		_found=true
		alt=${l//-}
		#local -a yes no
		yes=( -{,-}{$l,$alt} )
		no=( -{,-}no{,-}{$l,$alt} )
		case $arg in
			${~${(j:|:)yes}}) eval "_$alt=true" ;;
			${~${(j:|:)no}}) eval "_$alt=false" ;;
			*) _found=false ;;
		esac
		$_found && break
	done
	$_found && continue
	case "$arg" in
		-profile*|--profile*) _profile=${arg/*=}
			if [ "$arg" = "$_profile" ] ; then _profile="$1" ; shift ; fi
			[ -z "$_profile" ] && die "Bad argument: $arg" ;;
		--scratch) _scratch=true ;;
		--firefox) _ua='Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2.4) Gecko/20100527 SUSE/3.6.4-2.2 Firefox/3.6.4' ;;
		--googlebot) _ua='Googlebot/2.1 (+http://www.google.com/bot.html)' ;;
		--default) _profile=Default ;;
		-dry|--dry) _dry=true ;;
		http:*|https:*|ftp:*|file:*|/*) _url=$arg ;;
		*) _args+=( $arg ) ;;
	esac
done

setup_defaults () {
	set +e
	pushd $_profdir
	touch 'First Run'
	local theme_id=bfjgbcjfpbbfepcccpaffkjofcmglifg
	local theme_dir=Default/Extensions/${theme_id}
	local k image
	mkdir -p $theme_dir/i
	local -a image_colors colors tints properties settings
	local -A image_color color tint propertie h image_dims
	image_color=(
		toolbar \#f99
		frame \#fcc
		ntp_background \#ccf
		# button_background \#f00
	)
	image_dims=(
		toolbar 190x190
		frame 32x190
		ntp_background 190x190
		button_background 32x32
	)
	propertie=(
		ntp_background_repeat repeat
	)
	color=(
		# bookmark_text '[ 0, 0, 0 ]'
		# frame '[ 255, 117, 117 ]'
		ntp_background '[ 255, 192, 192 ]'
		# ntp_link '[ 0, 0, 0 ]'
		ntp_section '[ 255, 192, 192, 0.4 ]'
		# ntp_section_link '[ 0, 0, 0 ]'
		# ntp_section_text '[ 0, 0, 0 ]'
		# ntp_text '[ 255, 0, 0 ]'
		ntp_header '[ 255, 216, 216 ]'
		# tab_background_text '[ 0, 0, 0 ]'
		# tab_text '[ 0, 255, 0 ]'
		toolbar '[ 255, 192, 192 ]'
		# control_background '[ 0, 255, 0 ]'
		# button_background '[ 255, 0, 0 ]
	)
	tint=(
		# buttons '[ 0.5, 1, 0.5 ]'
		toolbar '[ 0.9, -1, 0.5 ]'
		# frame '[ 0.3, -1, -1 ]'
		# frame_inactive '[ 0.25, 0.5, -1 ]'
		# background_tab '[ 1, 1, 0.5 ]
	)
	if (( $+commands[convert] )) ; then
		for k in ${(k)image_color} ; do
			image=i/$k.png
			out=png:$theme_dir/$image
			c=$image_color[$k]
			# speckled=gray10 wavy=verticalsaw
			# style=pattern pattern=verticalleftshingle dim=36x36
			case ${style:-plain} in
				plasma) img=plasma: ;;
				plain) img=xc:$c ;;
				pattern) : ${dim:=32x32} ; img=( pattern:${pattern:-hexagons} -fill $c -opaque black ) ;;
			esac
			: ${dim:=$image_dims[$k]}
			cmd=( convert -size $dim $img $out )
			#cmd=( convert rose: +matte $out )
			$cmd || echo "Failed: $cmd"
			images+=( "\"theme_$k\": \"$image\"" )
		done
		#convert $theme_dir/i/* +append x:
	fi
	for k in color tint propertie ; do
		p=${k}s
		h=( ${(Pkv)k} )
		for l in ${(k)h} ; do
			n=${(P)#p}
			(( n += 1 ))
			v=${h[$l]}
			[[ $v = \[* ]] || v="\"$v\""
			typeset $p"[$n]"="\"$l\": $v"
		done
	done
	for k in images colors tints properties ; do
		(( ${#${(P)k}} )) || continue
		settings+=( "\"$k\": { ${(Pj:,:)k} }" )
	done
	cat > Default/Preferences <<PREFSJSON
{
	"browser": {
		"skip_first_run_ui": true,
		"show_welcome_page": false,
		"import_search_engine": false,
		"import_history": false,
		"import_bookmarks": false,
		"create_all_shortcuts": false,
		"make_chrome_default": false
	},
	"extensions": {
		"settings": {
			"${theme_id}": {
				"manifest": {
					"key": "MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQClY8uVLNLboHrzx5431OElszuH0FpiLCZyl1ZzU5HCYYA4t6ReRvaUG7HTNWpeUUUUki73XqgJV13qv/SeawOlmBzxt3MRDPBpcOFd7LzZTwz7dXJXGbTx+gh0b4VJve+pXSgLAF88sRm/YEOU/m52Gw8qCXTvK2tT2bA+JY2cmwIDAQAB",
					"name": "",
					"theme": { ${(j:,:)settings} },
					"version": "1.0"
				},
				"path": "${theme_id}",
				"location": 1,
				"state": 1
			}
		},
		"theme": { "id": "${theme_id}" }
	}
}
PREFSJSON
	popd
}

cleanup_tmp () { [[ $_profdir = *scratch* ]] && rm -rf $_profdir }
if (( $+_scratch )) ; then
	(( $+_profile || $+_profdir )) && die "Can't use --scratch with --profile/--profdir"
	_profile=SCRATCH
	_profdir=$(mktemp -t -d chromium-scratch.XXXXXXXX)
	(( $+_profdir )) || die "Couldn't create tmp dir?"
	trap cleanup_tmp EXIT INT TERM
	setup_defaults
fi

: ${_profile=Default}
: ${_profdir=$_profile}
if ! [[ $_profdir = */* ]] ; then
	for loc in $_config_dirs ; do
		_profdir=$loc/$_profile
		[[ -e $_profdir ]] && break
	done
	if [[ $_profile = Default ]] ; then
		_profdir=$_profdir:h
		[[ -e $_profdir ]] || unset _profdir
	fi
fi
_logext=$_profdir:t
(( $+_profdir )) && _args+=( --user-data-dir=$_profdir )
(( $+_ua )) && _args+=( --user-agent=$_ua )
: ${_plugins=true}
: ${_logext=default}
for flag in $_flags ; do
	${(P)${:-_${flag//-}}} && _args+=( --enable-$flag ) || _args+=( --disable-$flag )
done
_echo=()
$_dry && _echo=(echo)
_exec=()
(( $+_scratch )) || _exec=(exec)
if [[ -n "$_url" ]] ; then
	if $_remote ; then
		(( $+commands[dwm-activate] )) && dwm-activate browser &
		_args+=( --remote "$_url" )
	else
		exec $_echo open $_url
	fi
fi
find_exe
_cmd=( $_echo $_exec $exe $_args )
if $_logging ; then
	_logfile=~/logs/errors-chromium-${_logext}-$(date +%Y-%m-%d-%H%M%S)
	if $_dry ; then
		echo LOG file: $_logfile
		echo $_cmd
		exit
	fi
	[[ -d $_logfile:h ]] || mkdir -p $_logfile:h
	if (( $+commands[tai64n] )) ; then
		$_cmd |& tai64n > $_logfile
	else
		$_cmd |& perl -pwe '$|=1; s/^/time . "\t"/e' > $_logfile
	fi
else
	$_cmd
fi
