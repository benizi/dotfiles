#!/bin/sh
#
# Simple program to set up my USB keyboard so my son can play with my computer
# without being able to cause any trouble.
#
# `drewdle` does the following:
# - set up the keyboard
# - bump the font size up
# - clear the screen
# - run `cat`, so he can type away (typing `exit` anywhere on a line will exit)
# - reset the font size
# - reset the keyboard

# List the external keyboard's multiple X11 inputs and how to modify them:
# - disable the TrackPoint entirely
# - disable "spcial" keys: volume controls, ThinkVantage (power) button
# - modify the layout so the only modifier key is "Shift" (no Ctrl, Alt, etc.)
identify_inputs() {
  xinput --list --long |
  awk '
  function disable(id) { print "disable", id }
  function nomods(id) { print "nomods", id }
  /id=/ {
    id = $(NF-3)
    sub(/^id=/,"",id)
    kind[id] = $(NF-1)
    if (/ThinkPad USB/) thinkpad[id] = 1
  }
  END {
    for (id in thinkpad) {
      if (kind[id] == "pointer") {
        disable(id)
        continue
      }
      cmd = "xinput list-props " id
      specialbuttons = 0
      while (cmd | getline p) {
        if (p ~ /Button/) specialbuttons = 1
      }
      if (specialbuttons) disable(id); else nomods(id)
    }
  }'
}

bugfix() {
  # workaround for https://bugs.freedesktop.org/show_bug.cgi?id=91571
  # hit a key on a device other than the one just mapped to trigger the mapping
  xdotool key Ctrl
}

modify_inputs() {
  identify_inputs
  echo bugfix
}

reset_inputs() {
  identify_inputs | awk '{$1="enable"} 1'
  echo bugfix
  echo keyboard
}

enable() {
  xinput enable "$@"
}

disable() {
  xinput disable "$@"
}

# send rxvt-unicode extension code to set the font size to be huge
font() {
  case $1 in
    (big) set -- size=48 ;;
    (*) set -- ;;
  esac
  printf '\e]777'
  printf ';%s' font-switch reset "$@"
  printf '\a'
}

generate_layout() {
  keyboard --print |
  awk '$1 != "modifier_map" || $2 == "Shift"'
}

nomods() {
  local dev=$1
  set -- xkbcomp
  ${all:-false} || set -- "$@" -i "$dev"
  set -- "$@" -w 0 - "${destination:-"$DISPLAY"}"
  generate_layout | "$@"
}

cat_exit() {
  cat < /dev/tty |
  awk '/exit/{exit}'
}

pad() {
  modify_inputs
  echo font big
  echo clear
  echo cat_exit
  echo font reset
  reset_inputs
}

run_actions() {
  tee /dev/tty |
  while read action id
  do $action $id
  done
}

generator=pad
runner=run_actions

while test $# -gt 0
do
  arg=$1
  shift
  case $arg in
    (i|stdin|-) generator=cat ;;
    (o|stdout|-) runner=cat ;;
    (mod|modify) generator=modify_inputs ;;
    (reset|enable) generator=reset_inputs ;;
    (*) generator=$arg ; break ;;
  esac
done

$generator "$@" | $runner
